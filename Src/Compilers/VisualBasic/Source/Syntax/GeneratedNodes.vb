' Definition of parse trees.
' Generated by a tool on 4/5/2012 12:49 PM
' DO NOT HAND EDIT

Imports Roslyn.Compilers.Internal
Imports System.Collections.Generic

Namespace Roslyn.Compilers.VisualBasic

    ''' <summary>
    ''' Enumeration with all Visual Basic syntax node kinds.
    ''' </summary>
    Public Enum SyntaxKind
        None
        List
        ''' <summary>
        ''' A class to represent an empty statement. This can occur when a colon is on a
        ''' line without anything else.
        ''' </summary>
        EmptyStatement                     ' EmptyStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndIfStatement                     ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndUsingStatement                  ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndWithStatement                   ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndSelectStatement                 ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndStructureStatement              ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndEnumStatement                   ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndInterfaceStatement              ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndClassStatement                  ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndModuleStatement                 ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndNamespaceStatement              ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndSubStatement                    ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndFunctionStatement               ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndGetStatement                    ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndSetStatement                    ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndPropertyStatement               ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndOperatorStatement               ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndEventStatement                  ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndAddHandlerStatement             ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndRemoveHandlerStatement          ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndRaiseEventStatement             ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndWhileStatement                  ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndTryStatement                    ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        EndSyncLockStatement               ' EndBlockStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an entire source file of VB code.
        ''' </summary>
        CompilationUnit                    ' CompilationUnitSyntax
        ''' <summary>
        ''' Represents an Option statement, such as "Option Strict On".
        ''' </summary>
        OptionStatement                    ' OptionStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an Imports statement, which has one or more imports clauses.
        ''' </summary>
        ImportsStatement                   ' ImportsStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the clause of an Imports statement that defines an alias for a
        ''' namespace or type.
        ''' </summary>
        AliasImportsClause                 ' AliasImportsClauseSyntax : ImportsClauseSyntax
        ''' <summary>
        ''' Represents the clause of an Imports statement that imports all members of a
        ''' namespace.
        ''' </summary>
        MembersImportsClause               ' MembersImportsClauseSyntax : ImportsClauseSyntax
        ''' <summary>
        ''' Defines a XML namespace for XML expressions.
        ''' </summary>
        XmlNamespaceImportsClause          ' XmlNamespaceImportsClauseSyntax : ImportsClauseSyntax
        ''' <summary>
        ''' Represents a Namespace statement, its contents and the End Namespace statement.
        ''' </summary>
        NamespaceBlock                     ' NamespaceBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of a namespace declaration. This node always
        ''' appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
        ''' </summary>
        NamespaceStatement                 ' NamespaceStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a declaration of Module, its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ModuleBlock                        ' ModuleBlockSyntax : TypeBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a declaration of a Structure, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        StructureBlock                     ' StructureBlockSyntax : TypeBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a declaration of a Interface, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        InterfaceBlock                     ' InterfaceBlockSyntax : TypeBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a declaration of a Class its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ClassBlock                         ' ClassBlockSyntax : TypeBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a declaration of an Enum, its contents and the End Enum statement
        ''' that ends it.
        ''' </summary>
        EnumBlock                          ' EnumBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an Inherits statement in a Class, Structure or Interface.
        ''' </summary>
        InheritsStatement                  ' InheritsStatementSyntax : InheritsOrImplementsStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an Implements statement in a Class or Structure.
        ''' </summary>
        ImplementsStatement                ' ImplementsStatementSyntax : InheritsOrImplementsStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of a Module declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
        ''' </summary>
        ModuleStatement                    ' ModuleStatementSyntax : TypeStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of a Structure declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
        ''' </summary>
        StructureStatement                 ' StructureStatementSyntax : TypeStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of a Interface declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
        ''' </summary>
        InterfaceStatement                 ' InterfaceStatementSyntax : TypeStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of a Class declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
        ''' </summary>
        ClassStatement                     ' ClassStatementSyntax : TypeStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning statement of an Enum declaration. This node always
        ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
        ''' </summary>
        EnumStatement                      ' EnumStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the type parameter list in a declaration.
        ''' </summary>
        TypeParameterList                  ' TypeParameterListSyntax
        ''' <summary>
        ''' Represents a type parameter on a generic type declaration.
        ''' </summary>
        TypeParameter                      ' TypeParameterSyntax
        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As Constraint".
        ''' </summary>
        TypeParameterSingleConstraintClause' TypeParameterSingleConstraintClauseSyntax : TypeParameterConstraintClauseSyntax
        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As { Constraints }".
        ''' </summary>
        TypeParameterMultipleConstraintClause' TypeParameterMultipleConstraintClauseSyntax : TypeParameterConstraintClauseSyntax
        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        NewConstraint                      ' SpecialConstraintSyntax : ConstraintSyntax
        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        ClassConstraint                    ' SpecialConstraintSyntax : ConstraintSyntax
        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        StructureConstraint                ' SpecialConstraintSyntax : ConstraintSyntax
        ''' <summary>
        ''' Represents a type parameter constraint that is a type.
        ''' </summary>
        TypeConstraint                     ' TypeConstraintSyntax : ConstraintSyntax
        ''' <summary>
        ''' Represents a name and value in an EnumDeclarationBlock.
        ''' </summary>
        EnumMemberDeclaration              ' EnumMemberDeclarationSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        SubBlock                           ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        FunctionBlock                      ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ConstructorBlock                   ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        OperatorBlock                      ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        PropertyGetBlock                   ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        PropertySetBlock                   ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        AddHandlerBlock                    ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        RemoveHandlerBlock                 ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        RaiseEventBlock                    ' MethodBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a block property declaration: A declaration that has a beginning
        ''' declaration, some get or set accessor blocks and an end statement.
        ''' </summary>
        PropertyBlock                      ' PropertyBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a custom event declaration: A declaration that has a beginning event
        ''' declaration, some accessor blocks and an end statement.
        ''' </summary>
        EventBlock                         ' EventBlockSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the parameter list in a method declaration.
        ''' </summary>
        ParameterList                      ' ParameterListSyntax
        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        SubStatement                       ' MethodStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        FunctionStatement                  ' MethodStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A statement that declares a constructor. This statement will be the Begin of a
        ''' BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
        ''' will be the Body of that BlockStatement.
        ''' </summary>
        ConstructorStatement               ' ConstructorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        DeclareSubStatement                ' DeclareStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        DeclareFunctionStatement           ' DeclareStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        DelegateSubStatement               ' DelegateStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        DelegateFunctionStatement          ' DelegateStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A statement that declares an event. If the event being declared is a custom
        ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
        ''' accessors will be part of the Accessors of that node.
        ''' </summary>
        EventStatement                     ' EventStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A statement that declares an operator. If this operator has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        OperatorStatement                  ' OperatorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Statement that declares a property. If this property has accessors declared,
        ''' this statement will be the Begin of a BlockNode, and the accessors will be the
        ''' Body of that node. Auto properties are property declarations without a
        ''' PropertyBlock.
        ''' </summary>
        PropertyStatement                  ' PropertyStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        GetAccessorStatement               ' AccessorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        SetAccessorStatement               ' AccessorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        AddHandlerAccessorStatement        ' AccessorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        RemoveHandlerAccessorStatement     ' AccessorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        RaiseEventHandlerAccessorStatement ' AccessorStatementSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the "Implements ..." clause on a type member, which describes which
        ''' interface members this member implements.
        ''' </summary>
        ImplementsClause                   ' ImplementsClauseSyntax
        ''' <summary>
        ''' Represents the "Handles ..." clause on a method declaration that describes
        ''' which events this method handles.
        ''' </summary>
        HandlesClause                      ' HandlesClauseSyntax
        ''' <summary>
        ''' Represents a single handled event in a "Handles ..." clause.
        ''' </summary>
        HandlesClauseItem                  ' HandlesClauseItemSyntax
        ''' <summary>
        ''' Represents the beginning of a declaration. However, not enough syntax is
        ''' detected to classify this as a field, method, property or event. This is node
        ''' always represents a syntax error.
        ''' </summary>
        IncompleteMember                   ' IncompleteMemberSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the declaration of one or more variables or constants, either as
        ''' local variables or as class/structure members. In the case of a constant, it is
        ''' represented by having "Const" in the Modifiers (although technically "Const" is
        ''' not a modifier, it is represented as one in the parse trees.)
        ''' </summary>
        FieldDeclaration                   ' FieldDeclarationSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the part of a variable or constant declaration statement that
        ''' associated one or more variable names with a type.
        ''' </summary>
        VariableDeclarator                 ' VariableDeclaratorSyntax
        ''' <summary>
        ''' Represents an "As {type-name}" clause that does not have an initializer or
        ''' "New". The type has optional attributes associated with it, although attributes
        ''' are not permitted in all possible places where this node occurs.
        ''' </summary>
        SimpleAsClause                     ' SimpleAsClauseSyntax : AsClauseSyntax
        ''' <summary>
        ''' Represents an "As New {type-name} [arguments] [initializers]" clause in a
        ''' declaration. The type has optional attributes associated with it, although
        ''' attributes are not permitted in many places where this node occurs (they are
        ''' permitted, for example, on automatically implemented properties.)
        ''' </summary>
        AsNewClause                        ' AsNewClauseSyntax : AsClauseSyntax
        ''' <summary>
        ''' Represents a "With {...} clause used to initialize a new object's members.
        ''' </summary>
        ObjectMemberInitializer            ' ObjectMemberInitializerSyntax : ObjectCreationInitializerSyntax
        ''' <summary>
        ''' Represents a "From {...} clause used to initialize a new collection object's
        ''' elements.
        ''' </summary>
        ObjectCollectionInitializer        ' ObjectCollectionInitializerSyntax : ObjectCreationInitializerSyntax
        ''' <summary>
        ''' Represent a field initializer in a With {...} initializer where the field name
        ''' is inferred from the initializer expression.
        ''' </summary>
        InferredFieldInitializer           ' InferredFieldInitializerSyntax : FieldInitializerSyntax
        ''' <summary>
        ''' Represent a named field initializer in a With {...} initializer, such as ".x =
        ''' expr".
        ''' </summary>
        NamedFieldInitializer              ' NamedFieldInitializerSyntax : FieldInitializerSyntax
        ''' <summary>
        ''' Represents an "= initializer" clause in a declaration for a variable,
        ''' pararameter or automatic property.
        ''' </summary>
        EqualsValue                        ' EqualsValueSyntax
        ''' <summary>
        ''' Represent a parameter to a method, property, constructor, etc.
        ''' </summary>
        Parameter                          ' ParameterSyntax
        ''' <summary>
        ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
        ''' used in parameter declarations and variable declarations.
        ''' </summary>
        ModifiedIdentifier                 ' ModifiedIdentifierSyntax
        ''' <summary>
        ''' Represents a modifier that describes an array type, without bounds, such as
        ''' "()" or "(,)".
        ''' </summary>
        ArrayRankSpecifier                 ' ArrayRankSpecifierSyntax
        ''' <summary>
        ''' Represents a group of attributes within "&lt;" and "&gt;" brackets.
        ''' </summary>
        AttributeBlock                     ' AttributeBlockSyntax
        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        Attribute                          ' AttributeSyntax
        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        AttributeTarget                    ' AttributeTargetSyntax
        ''' <summary>
        ''' Represents a file-level attribute, in which the attributes have no other
        ''' syntactic element they are attached to.
        ''' </summary>
        AttributesStatement                ' AttributesStatementSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represent an expression in a statement context.
        ''' </summary>
        ExpressionStatement                ' ExpressionStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a While...End While statement, including the While, body and End
        ''' While.
        ''' </summary>
        WhileBlock                         ' WhileBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an entire Using...End Using statement, including the Using, body and
        ''' End Using statements.
        ''' </summary>
        UsingBlock                         ' UsingBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a entire SyncLock...End SyncLock block, including the SyncLock
        ''' statement, the enclosed statements, and the End SyncLock statment.
        ''' </summary>
        SyncLockBlock                      ' SyncLockBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a With...End With block, include the With statement, the body of the
        ''' block and the End With statement.
        ''' </summary>
        WithBlock                          ' WithBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the declaration of one or more local variables or constants.
        ''' </summary>
        LocalDeclaration                   ' LocalDeclarationSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a label statement.
        ''' </summary>
        LabelStatement                     ' LabelStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "GoTo" statement.
        ''' </summary>
        GoToStatement                      ' GoToStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        IdentifierLabel                    ' LabelSyntax : ExpressionSyntax
        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        NumericLabel                       ' LabelSyntax : ExpressionSyntax
        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        NextLabel                          ' LabelSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
        ''' kind of statement this is.
        ''' </summary>
        StopStatement                      ' StopOrEndStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
        ''' kind of statement this is.
        ''' </summary>
        EndStatement                       ' StopOrEndStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitDoStatement                    ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitForStatement                   ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitSubStatement                   ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitFunctionStatement              ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitOperatorStatement              ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitPropertyStatement              ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitTryStatement                   ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitSelectStatement                ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ExitWhileStatement                 ' ExitStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ContinueWhileStatement             ' ContinueStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ContinueDoStatement                ' ContinueStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ContinueForStatement               ' ContinueStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Return" statement.
        ''' </summary>
        ReturnStatement                    ' ReturnStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a line If-Then-Else statement.
        ''' </summary>
        SingleLineIfStatement              ' SingleLineIfStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents part of a single line If statement, consisting of a beginning
        ''' if-statement, followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an SingleLineIf.
        ''' </summary>
        SingleLineIfPart                   ' SingleLineIfPartSyntax
        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        SingleLineElsePart                 ' SingleLineElsePartSyntax
        ''' <summary>
        ''' Represents a block If...Then...Else...EndIf Statement. The Kind property can be
        ''' used to determine if it is a block or line If.
        ''' </summary>
        MultiLineIfBlock                   ' MultiLineIfBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        IfPart                             ' IfPartSyntax
        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ElseIfPart                         ' IfPartSyntax
        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        ElsePart                           ' ElsePartSyntax
        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        IfStatement                        ' IfStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        ElseIfStatement                    ' IfStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the Else part of a If...End If block (or line If). This statement is
        ''' always the Begin of a ElsePart.
        ''' </summary>
        ElseStatement                      ' ElseStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an entire Try...Catch...Finally...End Try statement.
        ''' </summary>
        TryBlock                           ' TryBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents part of an Try...Catch...Finally...End Try statement, consisting of
        ''' a beginning statement (Try, Catch or Finally), followed by a body of statements
        ''' controlled by that beginning statement. The Kind property returns which kind of
        ''' part this is.
        ''' </summary>
        TryPart                            ' TryPartSyntax
        ''' <summary>
        ''' Represents a Catch part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Catch statement, followed by a body of statements controlled by
        ''' that Catch statement. The Kind property returns which kind of part this is.
        ''' </summary>
        CatchPart                          ' CatchPartSyntax
        ''' <summary>
        ''' Represents the Finally part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Finally statement, followed by a body of statements controlled
        ''' by the Finally.
        ''' </summary>
        FinallyPart                        ' FinallyPartSyntax
        ''' <summary>
        ''' Represents the Try part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a TryPart.
        ''' </summary>
        TryStatement                       ' TryStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the Catch part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a CatchPart.
        ''' </summary>
        CatchStatement                     ' CatchStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the When/Filter clause of a Catch statement
        ''' </summary>
        CatchFilterClause                  ' CatchFilterClauseSyntax
        ''' <summary>
        ''' Represents the Finally part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a FinallyPart.
        ''' </summary>
        FinallyStatement                   ' FinallyStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the "Error" statement.
        ''' </summary>
        ErrorStatement                     ' ErrorStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        OnErrorGoToZeroStatement           ' OnErrorGoToStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        OnErrorGoToMinusOneStatement       ' OnErrorGoToStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        OnErrorGoToLabelStatement          ' OnErrorGoToStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an OnError Resume Next statement.
        ''' </summary>
        OnErrorResumeNextStatement         ' OnErrorResumeNextStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ResumeStatement                    ' ResumeStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ResumeLabelStatement               ' ResumeStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ResumeNextStatement                ' ResumeStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Select Case block, including the Select Case that begins it, the
        ''' contains Case blocks and the End Select.
        ''' </summary>
        SelectBlock                        ' SelectBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Select Case statement. This statement always occurs as the Begin
        ''' of a SelectBlock.
        ''' </summary>
        SelectStatement                    ' SelectStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        CaseBlock                          ' CaseBlockSyntax
        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        CaseElseBlock                      ' CaseBlockSyntax
        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        CaseStatement                      ' CaseStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        CaseElseStatement                  ' CaseStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The "Else" part in a Case Else statement.
        ''' </summary>
        CaseElseClause                     ' CaseElseClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a single value in a Case.
        ''' </summary>
        CaseValueClause                    ' CaseValueClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a range "expression To expression" in a Case.
        ''' </summary>
        CaseRangeClause                    ' CaseRangeClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseEqualsClause                   ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseNotEqualsClause                ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseLessThanClause                 ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseLessThanOrEqualClause          ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseGreaterThanOrEqualClause       ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        CaseGreaterThanClause              ' CaseRelationalClauseSyntax : CaseClauseSyntax
        ''' <summary>
        ''' Represents the "SyncLock" statement. This statement always occurs as the Begin
        ''' of a SyncLockBlock.
        ''' </summary>
        SyncLockStatement                  ' SyncLockStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        DoLoopTopTestBlock                 ' DoLoopBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        DoLoopBottomTestBlock              ' DoLoopBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        DoLoopForeverBlock                 ' DoLoopBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The Do statement that begins a Do-Loop block. This statement always occurs as
        ''' the Begin of a DoLoopBlock.
        ''' </summary>
        DoStatement                        ' DoStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The Loop statement that ends a Do-Loop block. This statement always occurs as
        ''' the End of a DoLoopBlock.
        ''' </summary>
        LoopStatement                      ' LoopStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        WhileClause                        ' WhileUntilClauseSyntax
        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        UntilClause                        ' WhileUntilClauseSyntax
        ''' <summary>
        ''' The While statement that begins a While...End While block. This statement
        ''' always occurs as the Begin of a WhileBlock.
        ''' </summary>
        WhileStatement                     ' WhileStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ForBlock                           ' ForBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ForEachBlock                       ' ForBlockSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The For statement that begins a For-Next block. This statement always occurs as
        ''' the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ForStatement                       ' ForStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The Step clause in a For Statement.
        ''' </summary>
        ForStepClause                      ' ForStepClauseSyntax
        ''' <summary>
        ''' The For Each statement that begins a For Each-Next block. This statement always
        ''' occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
        ''' Body of that ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ForEachStatement                   ' ForEachStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The Next statement that ends a For-Next or For Each-Next block. This statement
        ''' always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
        ''' and the body of the For-Next is the Body of that ForBlock. The Begin of that
        ''' ForBlock has the corresponding For or For Each statement.
        ''' </summary>
        NextStatement                      ' NextStatementSyntax : StatementSyntax
        ''' <summary>
        ''' The Using statement that begins a Using block. This statement always occurs as
        ''' the Begin of a UsingBlock, and the body of the Using is the Body of that
        ''' UsingBlock.
        ''' </summary>
        UsingStatement                     ' UsingStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a Throw statement.
        ''' </summary>
        ThrowStatement                     ' ThrowStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        AssignmentStatement                ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        MidAssignment                      ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        AddAssignment                      ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        SubtractAssignment                 ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        MultiplyAssignment                 ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        DivideAssignment                   ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        IntegerDivideAssignment            ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        PowerAssignment                    ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        LeftShiftAssignment                ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        RightShiftAssignment               ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ConcatenateAssignment              ' AssignmentStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represent an call statement (also known as a invocation statement).
        ''' </summary>
        CallStatement                      ' CallStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        AddHandlerStatement                ' AddRemoveHandlerStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        RemoveHandlerStatement             ' AddRemoveHandlerStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represent a RaiseEvent statement.
        ''' </summary>
        RaiseEventStatement                ' RaiseEventStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a "With" statement. This statement always occurs as the
        ''' BeginStatement of a WithBlock, and the body of the With is the Body of that
        ''' WithBlock.
        ''' </summary>
        WithStatement                      ' WithStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ReDimStatement                     ' ReDimStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ReDimPreserveStatement             ' ReDimStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an "Erase" statement.
        ''' </summary>
        EraseStatement                     ' EraseStatementSyntax : ExecutableStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        CharacterLiteralExpression         ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        TrueLiteralExpression              ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        FalseLiteralExpression             ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        NumericLiteralExpression           ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        DateLiteralExpression              ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        StringLiteralExpression            ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        NothingLiteralExpression           ' LiteralExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a parenthesized expression.
        ''' </summary>
        ParenthesizedExpression            ' ParenthesizedExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Identifies the special instance "Me"
        ''' </summary>
        MeExpression                       ' MeExpressionSyntax : InstanceExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Identifies the special instance "MyBase"
        ''' </summary>
        MyBaseExpression                   ' MyBaseExpressionSyntax : InstanceExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Identifies the special instance "MyClass"
        ''' </summary>
        MyClassExpression                  ' MyClassExpressionSyntax : InstanceExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a GetType expression.
        ''' </summary>
        GetTypeExpression                  ' GetTypeExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        TypeOfIsExpression                 ' TypeOfExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        TypeOfIsNotExpression              ' TypeOfExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a GetXmlNamespace expression.
        ''' </summary>
        GetXmlNamespaceExpression          ' GetXmlNamespaceExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        MemberAccessExpression             ' MemberAccessExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        DictionaryAccess                   ' MemberAccessExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        XmlElementAccessExpression         ' XmlMemberAccessExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        XmlDescendantAccessExpression      ' XmlMemberAccessExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        XmlAttributeAccessExpression       ' XmlMemberAccessExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an invocation expression consisting of an invocation target and an
        ''' optional argument list or an array, parameterized property or object default
        ''' property index.
        ''' </summary>
        InvocationExpression               ' InvocationExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a New expression that creates a new non-array object, possibly with
        ''' a "With" or "From" clause.
        ''' </summary>
        ObjectCreationExpression           ' ObjectCreationExpressionSyntax : NewExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a New expression that create an object of anonymous type.
        ''' </summary>
        AnonymousObjectCreationExpression  ' AnonymousObjectCreationExpressionSyntax : NewExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an expression that creates a new array.
        ''' </summary>
        ArrayCreationExpression            ' ArrayCreationExpressionSyntax : NewExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an expression that creates a new array wihout naming the element
        ''' type.
        ''' </summary>
        CollectionInitializer              ' CollectionInitializerSyntax : ExpressionSyntax
        CTypeExpression                    ' CTypeExpressionSyntax : CastExpressionSyntax : ExpressionSyntax
        DirectCastExpression               ' DirectCastExpressionSyntax : CastExpressionSyntax : ExpressionSyntax
        TryCastExpression                  ' TryCastExpressionSyntax : CastExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a cast to a pre-defined type using a pre-defined cast expression,
        ''' such as CInt or CLng.
        ''' </summary>
        PredefinedCastExpression           ' PredefinedCastExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        AddExpression                      ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        SubtractExpression                 ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        MultiplyExpression                 ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        DivideExpression                   ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        IntegerDivideExpression            ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        PowerExpression                    ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        LeftShiftExpression                ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        RightShiftExpression               ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ConcatenateExpression              ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ModuloExpression                   ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        EqualsExpression                   ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        NotEqualsExpression                ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        LessThanExpression                 ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        LessThanOrEqualExpression          ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        GreaterThanOrEqualExpression       ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        GreaterThanExpression              ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        IsExpression                       ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        IsNotExpression                    ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        LikeExpression                     ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        OrExpression                       ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        XorExpression                      ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        AndExpression                      ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        OrElseExpression                   ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        AndAlsoExpression                  ' BinaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        PlusExpression                     ' UnaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        NegateExpression                   ' UnaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        NotExpression                      ' UnaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        AddressOfExpression                ' UnaryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        BinaryConditionalExpression        ' BinaryConditionalExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        TernaryConditionalExpression       ' TernaryConditionalExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        SingleLineFunctionLambdaExpression ' SingleLineLambdaExpressionSyntax : LambdaExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        SingleLineSubLambdaExpression      ' SingleLineLambdaExpressionSyntax : LambdaExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        MultiLineFunctionLambdaExpression  ' MultiLineLambdaExpressionSyntax : LambdaExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        MultiLineSubLambdaExpression       ' MultiLineLambdaExpressionSyntax : LambdaExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        SubLambdaHeader                    ' LambdaHeaderSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        FunctionLambdaHeader               ' LambdaHeaderSyntax : MethodBaseSyntax : DeclarationStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents a parenthesized argument list.
        ''' </summary>
        ArgumentList                       ' ArgumentListSyntax
        ''' <summary>
        ''' Represents an omitted argument in an argument list. An omitted argument is not
        ''' considered a syntax error but a valid case when no argument is required.
        ''' </summary>
        OmittedArgument                    ' OmittedArgumentSyntax : ArgumentSyntax
        ''' <summary>
        ''' Represents a simple argument that is just an expression.
        ''' </summary>
        SimpleArgument                     ' SimpleArgumentSyntax : ArgumentSyntax
        ''' <summary>
        ''' Represents a named argument, such as "Value:=7".
        ''' </summary>
        NamedArgument                      ' NamedArgumentSyntax : ArgumentSyntax
        ''' <summary>
        ''' Represents a range argument, such as "0 to 5", used in array bounds. The
        ''' "Value" property represents the upper bound of the range.
        ''' </summary>
        RangeArgument                      ' RangeArgumentSyntax : ArgumentSyntax
        ''' <summary>
        ''' This class represents a query expression. A query expression is composed of one
        ''' or more query operators in a row. The first query operator must be a From or
        ''' Aggregate.
        ''' </summary>
        QueryExpression                    ' QueryExpressionSyntax : ExpressionSyntax
        ''' <summary>
        ''' Describes a single variable of the form "x [As Type] In expression" for use in
        ''' query expressions.
        ''' </summary>
        CollectionRangeVariable            ' CollectionRangeVariableSyntax
        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] expression" for use in
        ''' query expressions.
        ''' </summary>
        ExpressionRangeVariable            ' ExpressionRangeVariableSyntax
        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] aggregation-function"
        ''' for use in the Into clause of Aggregate or Group By or Group Join query
        ''' operators.
        ''' </summary>
        AggregationRangeVariable           ' AggregationRangeVariableSyntax
        ''' <summary>
        ''' Represents the name and optional type of an expression range variable.
        ''' </summary>
        VariableNameEquals                 ' VariableNameEqualsSyntax
        ''' <summary>
        ''' Represents an invocation of an Aggregation function in the aggregation range
        ''' variable declaration of a Group By, Group Join or Aggregate query operator.
        ''' </summary>
        FunctionAggregation                ' FunctionAggregationSyntax : AggregationSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents the use of "Group" as the aggregation function in the in the
        ''' aggregation range variable declaration of a Group By or Group Join query
        ''' operator.
        ''' </summary>
        GroupAggregation                   ' GroupAggregationSyntax : AggregationSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a "From" query operator. If this is the beginning of a query, the
        ''' Source will be Nothing. Otherwise, the Source will be the part of the query to
        ''' the left of the From.
        ''' </summary>
        FromClause                         ' FromClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Let" query operator.
        ''' </summary>
        LetClause                          ' LetClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents an Aggregate query operator.
        ''' </summary>
        AggregateClause                    ' AggregateClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents the "Distinct" query operator.
        ''' </summary>
        DistinctClause                     ' DistinctClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Where" query operator.
        ''' </summary>
        WhereClause                        ' WhereClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        SkipWhileClause                    ' PartitionWhileClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        TakeWhileClause                    ' PartitionWhileClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        SkipClause                         ' PartitionClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        TakeClause                         ' PartitionClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents the "Group By" query operator.
        ''' </summary>
        GroupByClause                      ' GroupByClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents a Join query operator.
        ''' </summary>
        JoinClause                         ' JoinClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents the "expression Equals expression" condition in a Join.
        ''' </summary>
        JoinCondition                      ' JoinConditionSyntax
        ''' <summary>
        ''' Represents the "Group Join" query operator.
        ''' </summary>
        GroupJoinClause                    ' GroupJoinClauseSyntax : JoinClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents the "Order By" query operator.
        ''' </summary>
        OrderByClause                      ' OrderByClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        AscendingOrdering                  ' OrderingSyntax
        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        DescendingOrdering                 ' OrderingSyntax
        ''' <summary>
        ''' Represents the "Select" query operator.
        ''' </summary>
        SelectClause                       ' SelectClauseSyntax : QueryClauseSyntax
        ''' <summary>
        ''' Represents and XML Document literal expression.
        ''' </summary>
        XmlDocument                        ' XmlDocumentSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents the XML declaration prologue in an XML literal expression.
        ''' </summary>
        XmlDeclaration                     ' XmlDeclarationSyntax
        ''' <summary>
        ''' Represents an XML document prologue option - version, encoding, standalone or
        ''' whitespace in an XML literal expression.
        ''' </summary>
        XmlDeclarationOption               ' XmlDeclarationOptionSyntax
        ''' <summary>
        ''' Represents an XML element with content in an XML literal expression.
        ''' </summary>
        XmlElement                         ' XmlElementSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents Xml text.
        ''' </summary>
        XmlText                            ' XmlTextSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents the start tag of an XML element of the form &lt;element&gt;.
        ''' </summary>
        XmlElementStartTag                 ' XmlElementStartTagSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents the end tag of an XML element of the form &lt;/element&gt;.
        ''' </summary>
        XmlElementEndTag                   ' XmlElementEndTagSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an empty XML element of the form &lt;element /&gt;
        ''' </summary>
        XmlEmptyElement                    ' XmlEmptyElementSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML attribute in an XML literal expression.
        ''' </summary>
        XmlAttribute                       ' XmlAttributeSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a string of XML characters embedded as the content of an XML
        ''' element.
        ''' </summary>
        XmlString                          ' XmlStringSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML name of the form 'name' or 'namespace:name' appearing in
        ''' source as part of an XML literal or member access expression or an XML
        ''' namespace import clause.
        ''' </summary>
        XmlName                            ' XmlNameSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
        ''' of an XML literal or member access expression or an XML namespace import
        ''' clause.
        ''' </summary>
        XmlBracketedName                   ' XmlBracketedNameSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents and XML namespace prefix of the form 'prefix:' as in xml:ns="".
        ''' </summary>
        XmlPrefix                          ' XmlPrefixSyntax
        ''' <summary>
        ''' Represents an XML comment of the form &lt;-- Comment --&gt; appearing in an XML
        ''' literal expression.
        ''' </summary>
        XmlComment                         ' XmlCommentSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
        ''' XMLProcessingValue ?&gt;'.
        ''' </summary>
        XmlProcessingInstruction           ' XmlProcessingInstructionSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an XML CDATA section in an XML literal expression.
        ''' </summary>
        XmlCDataSection                    ' XmlCDataSectionSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
        ''' obj.Name =%&gt;&lt;/name&gt;'.
        ''' </summary>
        XmlEmbeddedExpression              ' XmlEmbeddedExpressionSyntax : XmlNodeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an array type, such as "A() or "A(,)", without bounds specified for
        ''' the array.
        ''' </summary>
        ArrayType                          ' ArrayTypeSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' A type name that represents a nullable type, such as "Integer?".
        ''' </summary>
        NullableType                       ' NullableTypeSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents an occurrence of a Visual Basic built-in type such as Integer or
        ''' String in source code.
        ''' </summary>
        PredefinedType                     ' PredefinedTypeSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a type name consisting of a single identifier (which might include
        ''' brackets or a type character).
        ''' </summary>
        IdentifierName                     ' IdentifierNameSyntax : SimpleNameSyntax : NameSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a simple type name with one or more generic arguments, such as "X(Of
        ''' Y, Z).
        ''' </summary>
        GenericName                        ' GenericNameSyntax : SimpleNameSyntax : NameSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a qualified type name, for example X.Y or X(Of Z).Y.
        ''' </summary>
        QualifiedName                      ' QualifiedNameSyntax : NameSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a name in the global namespace.
        ''' </summary>
        GlobalName                         ' GlobalNameSyntax : NameSyntax : TypeSyntax : ExpressionSyntax
        ''' <summary>
        ''' Represents a parenthesized list of generic type arguments.
        ''' </summary>
        TypeArgumentList                   ' TypeArgumentListSyntax
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AddHandlerKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AddressOfKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AliasKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AndKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AndAlsoKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AsKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        BooleanKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ByRefKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ByteKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ByValKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CallKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CaseKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CatchKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CBoolKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CByteKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CCharKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CDateKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CDecKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CDblKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CharKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CIntKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ClassKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CLngKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CObjKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ConstKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ReferenceKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ContinueKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CSByteKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CShortKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CSngKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CStrKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CTypeKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CUIntKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CULngKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CUShortKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DateKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DecimalKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DeclareKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DefaultKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DelegateKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DimKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DirectCastKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DoKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DoubleKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EachKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ElseKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ElseIfKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EndKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EnumKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EraseKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ErrorKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EventKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ExitKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        FalseKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        FinallyKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ForKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        FriendKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        FunctionKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GetKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GetTypeKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GetXmlNamespaceKeyword             ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GlobalKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GoToKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        HandlesKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IfKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ImplementsKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ImportsKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        InKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        InheritsKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IntegerKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        InterfaceKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IsKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IsNotKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        LetKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        LibKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        LikeKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        LongKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        LoopKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MeKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ModKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ModuleKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MustInheritKeyword                 ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MustOverrideKeyword                ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MyBaseKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MyClassKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NamespaceKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NarrowingKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NextKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NewKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NotKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NothingKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NotInheritableKeyword              ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        NotOverridableKeyword              ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ObjectKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OfKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OnKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OperatorKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OptionKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OptionalKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OrKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OrElseKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OverloadsKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OverridableKeyword                 ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OverridesKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ParamArrayKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        PartialKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        PrivateKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        PropertyKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ProtectedKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        PublicKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        RaiseEventKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ReadOnlyKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ReDimKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        REMKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        RemoveHandlerKeyword               ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ResumeKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ReturnKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SByteKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SelectKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SetKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ShadowsKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SharedKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ShortKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SingleKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StaticKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StepKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StopKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StringKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StructureKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SubKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SyncLockKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ThenKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ThrowKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ToKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TrueKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TryKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TryCastKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TypeOfKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        UIntegerKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ULongKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        UShortKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        UsingKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WhenKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WhileKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WideningKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WithKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WithEventsKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WriteOnlyKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        XorKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EndIfKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GosubKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        VariantKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WendKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AggregateKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AllKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AnsiKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AscendingKeyword                   ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AssemblyKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        AutoKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        BinaryKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ByKeyword                          ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CompareKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        CustomKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DescendingKeyword                  ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        DistinctKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        EqualsKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ExplicitKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ExternalSourceKeyword              ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        ExternalChecksumKeyword            ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        FromKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        GroupKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        InferKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IntoKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IsFalseKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        IsTrueKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        JoinKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        KeyKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        MidKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OffKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OrderKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        OutKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        PreserveKeyword                    ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        RegionKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        SkipKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        StrictKeyword                      ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TakeKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TextKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        UnicodeKeyword                     ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        UntilKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        WhereKeyword                       ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        TypeKeyword                        ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single keyword in a VB program. Which keyword can be determined
        ''' from the Kind property.
        ''' </summary>
        XmlKeyword                         ' KeywordSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        ExclamationToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        AtToken                            ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        CommaToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        HashToken                          ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        AmpersandToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        SingleQuoteToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        OpenParenToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        CloseParenToken                    ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        OpenBraceToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        CloseBraceToken                    ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        SemicolonToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        AsteriskToken                      ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        PlusToken                          ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        MinusToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        DotToken                           ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        SlashToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        ColonToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanToken                      ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanEqualsToken                ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanGreaterThanToken           ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        EqualsToken                        ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        GreaterThanToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        GreaterThanEqualsToken             ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        BackslashToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        CaretToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        ColonEqualsToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        AmpersandEqualsToken               ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        AsteriskEqualsToken                ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        PlusEqualsToken                    ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        MinusEqualsToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        SlashEqualsToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        BackslashEqualsToken               ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        CaretEqualsToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanLessThanToken              ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        GreaterThanGreaterThanToken        ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanLessThanEqualsToken        ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        GreaterThanGreaterThanEqualsToken  ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        QuestionToken                      ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        DoubleQuoteToken                   ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        StatementTerminatorToken           ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        EndOfFileToken                     ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        EmptyToken                         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        SlashGreaterThanToken              ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanSlashToken                 ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanMinusMinusToken            ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        MinusMinusGreaterThanToken         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanQuestionToken              ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        QuestionGreaterThanToken           ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        LessThanPercentEqualsToken         ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        PercentGreaterThanToken            ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        BeginCDataToken                    ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        EndCDataToken                      ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a single punctuation mark or operator in a VB program. Which one can
        ''' be determined from the Kind property.
        ''' </summary>
        EndOfXmlToken                      ' PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a sequence of characters appearing in source with no possible
        ''' meaning in the Visual Basic language (e.g. the semicolon ';'). This token
        ''' should only appear in SkippedTokenTrivia as an artifact of parsing error
        ''' recovery.
        ''' </summary>
        BadToken                           ' BadTokenSyntax : PunctuationSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an Xml NCName per Namespaces in XML 1.0
        ''' </summary>
        XmlNameToken                       ' XmlNameTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        XmlTextLiteralToken                ' XmlTextTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        XmlEntityLiteralToken              ' XmlTextTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        DocCommentLineBreakToken           ' XmlTextTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an identifier token. This might include brackets around the name and
        ''' a type character.
        ''' </summary>
        IdentifierToken                    ' IdentifierTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an integer literal token.
        ''' </summary>
        IntegerLiteralToken                ' IntegerLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an floating literal token.
        ''' </summary>
        FloatingLiteralToken               ' FloatingLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents a Decimal literal token.
        ''' </summary>
        DecimalLiteralToken                ' DecimalLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an Date literal token.
        ''' </summary>
        DateLiteralToken                   ' DateLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an string literal token.
        ''' </summary>
        StringLiteralToken                 ' StringLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents an string literal token.
        ''' </summary>
        CharacterLiteralToken              ' CharacterLiteralTokenSyntax : SyntaxToken
        ''' <summary>
        ''' Represents tokens that were skipped by the parser as part of error recovery,
        ''' and thus are not part of any syntactic structure.
        ''' </summary>
        SkippedTokens                      ' SkippedTokensSyntax : StructuredTriviaSyntax
        ''' <summary>
        ''' Represents a documentation comment e.g. ''' &lt;Summary&gt; apearing in source.
        ''' </summary>
        DocumentationComment               ' DocumentationCommentSyntax : StructuredTriviaSyntax
        ''' <summary>
        ''' Represents a preprocessor directive
        ''' </summary>
        Directive                          ' DirectiveSyntax : StructuredTriviaSyntax
        ''' <summary>
        ''' Represents true whitespace: spaces, tabs, newlines and the like.
        ''' </summary>
        WhitespaceTrivia                   ' SyntaxTrivia
        ''' <summary>
        ''' Represents line breaks that are syntactically insignificant.
        ''' </summary>
        EndOfLineTrivia                    ' SyntaxTrivia
        ''' <summary>
        ''' Represents colons that are syntactically insignificant.
        ''' </summary>
        ColonTrivia                        ' SyntaxTrivia
        ''' <summary>
        ''' Represents a comment.
        ''' </summary>
        CommentTrivia                      ' SyntaxTrivia
        ''' <summary>
        ''' Represents an explicit line continuation character at the end of a line, i.e.,
        ''' _
        ''' </summary>
        LineContinuationTrivia             ' SyntaxTrivia
        ''' <summary>
        ''' Represents an implicit line continuation.
        ''' </summary>
        ImplicitLineContinuationTrivia     ' SyntaxTrivia
        ''' <summary>
        ''' Represents a ''' prefix for a DocComment.
        ''' </summary>
        DocumentationCommentExteriorTrivia ' SyntaxTrivia
        ''' <summary>
        ''' Represents text in a false preprocessor block
        ''' </summary>
        DisabledTextTrivia                 ' SyntaxTrivia
        ''' <summary>
        ''' Represents a #Const pre-processing constant declaration appearing in source.
        ''' </summary>
        ConstDirective                     ' ConstDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        IfDirective                        ' IfDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        ElseIfDirective                    ' IfDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #Else pre-processing directive appearing in source.
        ''' </summary>
        ElseDirective                      ' ElseDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #End If pre-processing directive appearing in source.
        ''' </summary>
        EndIfDirective                     ' EndIfDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning of a #Region directive appearing in source.
        ''' </summary>
        RegionDirective                    ' RegionDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #End Region directive appearing in source.
        ''' </summary>
        EndRegionDirective                 ' EndRegionDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents the beginning of a #ExternalSource pre-processing directive
        ''' appearing in source.
        ''' </summary>
        ExternalSourceDirective            ' ExternalSourceDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #End ExternalSource pre-processing directive appearing in source.
        ''' </summary>
        EndExternalSourceDirective         ' EndExternalSourceDirective : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #ExternalChecksum pre-processing directive appearing in source.
        ''' </summary>
        ExternalChecksumDirective          ' ExternalChecksumDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an #r directive appearing in scripts.
        ''' </summary>
        ReferenceDirective                 ' ReferenceDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
        ''' <summary>
        ''' Represents an unrecognized pre-processing directive. This occurs when the
        ''' parser encounters a hash '#' token at the beginning of a physical line but does
        ''' recognize the text that follows as a valid Visual Basic pre-processing
        ''' directive.
        ''' </summary>
        BadDirective                       ' BadDirectiveSyntax : DirectiveStatementSyntax : StatementSyntax
    End Enum

    ''' <summary>
    ''' Represents one of the type characters or literal suffixes of VB. Used to
    ''' describe a) the type character suffixes that can be placed on identifers, and
    ''' b) the suffixes that can be placed on integer literals.
    ''' </summary>
    Public Enum TypeCharacter

        None

        ''' <summary>
        ''' The "%" type character."
        ''' </summary>
        [Integer]

        ''' <summary>
        ''' The "&amp;" type character."
        ''' </summary>
        [Long]

        ''' <summary>
        ''' The "@" type character."
        ''' </summary>
        [Decimal]

        ''' <summary>
        ''' The "!" type character."
        ''' </summary>
        [Single]

        ''' <summary>
        ''' The "#" type character."
        ''' </summary>
        [Double]

        ''' <summary>
        ''' The "$" type character."
        ''' </summary>
        [String]

        ''' <summary>
        ''' The "S" literal suffix denoting "Short"
        ''' </summary>
        ShortLiteral

        ''' <summary>
        ''' The "US" literal suffix denoting "UShort"
        ''' </summary>
        UShortLiteral

        ''' <summary>
        ''' The "I" literal suffix denoting "Integer"
        ''' </summary>
        IntegerLiteral

        ''' <summary>
        ''' The "UI" literal suffix denoting "UInteger"
        ''' </summary>
        UIntegerLiteral

        ''' <summary>
        ''' The "L" literal suffix denoting "Long"
        ''' </summary>
        LongLiteral

        ''' <summary>
        ''' The "UL" literal suffix denoting "ULong"
        ''' </summary>
        ULongLiteral

        ''' <summary>
        ''' The "F" literal suffix denoting "Single"
        ''' </summary>
        SingleLiteral

        ''' <summary>
        ''' The "R" literal suffix denoting "Double"
        ''' </summary>
        DoubleLiteral

        ''' <summary>
        ''' The "D" literal suffix denoting "Decimal"
        ''' </summary>
        DecimalLiteral
    End Enum

    ''' <summary>
    ''' The three possible number bases that a literal can be written in.
    ''' </summary>
    Public Enum LiteralBase

        [Decimal]

        Hexadecimal

        Octal
    End Enum



    ''' <summary>
    ''' The base class for all nodes in the VB syntax tree.
    ''' </summary>
    Partial Public MustInherit Class SyntaxNode



    End Class

    ''' <summary>
    ''' The base class for all nodes that represent statements. This includes both
    ''' declaration statements, such as class declarations as well as executable
    ''' statements.
    ''' </summary>
    Public MustInherit Class StatementSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' The base class for all nodes that represent executable statements.
    ''' </summary>
    Public MustInherit Class ExecutableStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' The base class for all nodes that represent statements that declare options,
    ''' imports, members, etc.
    ''' </summary>
    Public MustInherit Class DeclarationStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' A class to represent an empty statement. This can occur when a colon is on a
    ''' line without anything else.
    ''' </summary>
    Public NotInheritable Class EmptyStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), empty As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.EmptyStatementSyntax(kind, errors, annotations, empty), Nothing, 0)
        End Sub

        ''' <summary>
        ''' An empty token because all non terminals must have a token.
        ''' </summary>
        Public  ReadOnly Property Empty As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EmptyStatementSyntax)._empty, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Empty property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEmpty(empty as SyntaxToken) As EmptyStatementSyntax
            return Update(empty)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEmptyStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEmptyStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EmptyStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="empty">
        ''' The new Empty to update this EmptyStatementSyntaxSyntax node with. If not
        ''' specified the current Empty will be used in the new EmptyStatementSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(empty As SyntaxToken) As EmptyStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EmptyStatementSyntax)
            If empty.Node IsNot green._empty Then
                Dim newNode = Syntax.EmptyStatement(empty)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an "End XXX" statement, where XXX is a single keyword.
    ''' </summary>
    Public NotInheritable Class EndBlockStatementSyntax
        Inherits DeclarationStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), endKeyword As InternalSyntax.KeywordSyntax, blockKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.EndBlockStatementSyntax(kind, errors, annotations, endKeyword, blockKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "End" keyword
        ''' </summary>
        Public  ReadOnly Property EndKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndBlockStatementSyntax)._endKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndKeyword(endKeyword as SyntaxToken) As EndBlockStatementSyntax
            return Update(endKeyword, Me.BlockKeyword)
        End Function

        ''' <summary>
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </summary>
        Public  ReadOnly Property BlockKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndBlockStatementSyntax)._blockKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BlockKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBlockKeyword(blockKeyword as SyntaxToken) As EndBlockStatementSyntax
            return Update(Me.EndKeyword, blockKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEndBlockStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEndBlockStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EndBlockStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The new EndKeyword to update this EndBlockStatementSyntaxSyntax node with. If
        ''' not specified the current EndKeyword will be used in the new
        ''' EndBlockStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The new BlockKeyword to update this EndBlockStatementSyntaxSyntax node with. If
        ''' not specified the current BlockKeyword will be used in the new
        ''' EndBlockStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EndBlockStatementSyntax)
            If endKeyword.Node IsNot green._endKeyword OrElse blockKeyword.Node IsNot green._blockKeyword Then
                Dim newNode = Syntax.EndBlockStatement(Me.Kind, endKeyword, blockKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an entire source file of VB code.
    ''' </summary>
    Partial Public NotInheritable Class CompilationUnitSyntax
        Inherits SyntaxNode

        Friend _options as SyntaxNode
        Friend _imports as SyntaxNode
        Friend _attributes as SyntaxNode
        Friend _members as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), options As SyntaxNode, [imports] As SyntaxNode, attributes As SyntaxNode, members As SyntaxNode, endOfFileToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.CompilationUnitSyntax(kind, errors, annotations, if(options IsNot Nothing, options.Green, Nothing), if([imports] IsNot Nothing, [imports].Green, Nothing), if(attributes IsNot Nothing, attributes.Green, Nothing), if(members IsNot Nothing, members.Green, Nothing), endOfFileToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' Represents the list of Option statements at the beginning of a source file.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Options As SeparatedSyntaxList(Of OptionStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_options, 0)
                Return new SeparatedSyntaxList(Of OptionStatementSyntax)(listNode, GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Options property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOptions(options as SeparatedSyntaxList(Of OptionStatementSyntax)) As CompilationUnitSyntax
            return Update(options, Me.Imports, Me.Attributes, Me.Members, Me.EndOfFileToken)
        End Function

        Public Shadows Function AddOptions(ParamArray items As OptionStatementSyntax()) As CompilationUnitSyntax
            Return Me.WithOptions(Me.Options.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' Represents the list of Imports statements at the beginning of a source file.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property [Imports] As SeparatedSyntaxList(Of ImportsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_imports, 1)
                Return new SeparatedSyntaxList(Of ImportsStatementSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Imports] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImports([imports] as SeparatedSyntaxList(Of ImportsStatementSyntax)) As CompilationUnitSyntax
            return Update(Me.Options, [imports], Me.Attributes, Me.Members, Me.EndOfFileToken)
        End Function

        Public Shadows Function AddImports(ParamArray items As ImportsStatementSyntax()) As CompilationUnitSyntax
            Return Me.WithImports(Me.Imports.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' Represents the list of AttributeStatements at the beginning of a source file
        ''' that contain the Assembly and Module attributes.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SeparatedSyntaxList(Of AttributesStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 2)
                Return new SeparatedSyntaxList(Of AttributesStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SeparatedSyntaxList(Of AttributesStatementSyntax)) As CompilationUnitSyntax
            return Update(Me.Options, Me.Imports, attributes, Me.Members, Me.EndOfFileToken)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributesStatementSyntax()) As CompilationUnitSyntax
            Return Me.WithAttributes(Me.Attributes.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' Represents the members of the default namespace for this source file: all the
        ''' top-level type and namespace declarations in the file. May also contain
        ''' Statements that are not valid
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 3)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As CompilationUnitSyntax
            return Update(Me.Options, Me.Imports, Me.Attributes, members, Me.EndOfFileToken)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As CompilationUnitSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' Represents the end of the source file. This token may have trivia (whitespace,
        ''' comments, ...) attached to it.
        ''' </summary>
        Public  ReadOnly Property EndOfFileToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CompilationUnitSyntax)._endOfFileToken, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndOfFileToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndOfFileToken(endOfFileToken as SyntaxToken) As CompilationUnitSyntax
            return Update(Me.Options, Me.Imports, Me.Attributes, Me.Members, endOfFileToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._options
                Case 1
                    Return Me._imports
                Case 2
                    Return Me._attributes
                Case 3
                    Return Me._members
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_options, 0)
                Case 1
                    Return GetRed(Of SyntaxNode)(_imports, 1)
                Case 2
                    Return GetRed(Of SyntaxNode)(_attributes, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_members, 3)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCompilationUnit(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCompilationUnit(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CompilationUnitSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="options">
        ''' The new Options to update this CompilationUnitSyntaxSyntax node with. If not
        ''' specified the current Options will be used in the new
        ''' CompilationUnitSyntaxSyntax node.
        ''' </param>
        ''' <param name="imports">
        ''' The new Imports to update this CompilationUnitSyntaxSyntax node with. If not
        ''' specified the current Imports will be used in the new
        ''' CompilationUnitSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this CompilationUnitSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' CompilationUnitSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this CompilationUnitSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new
        ''' CompilationUnitSyntaxSyntax node.
        ''' </param>
        ''' <param name="endOfFileToken">
        ''' The new EndOfFileToken to update this CompilationUnitSyntaxSyntax node with. If
        ''' not specified the current EndOfFileToken will be used in the new
        ''' CompilationUnitSyntaxSyntax node.
        ''' </param>
        Public Function Update(options As SeparatedSyntaxList(Of OptionStatementSyntax), [imports] As SeparatedSyntaxList(Of ImportsStatementSyntax), attributes As SeparatedSyntaxList(Of AttributesStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), endOfFileToken As SyntaxToken) As CompilationUnitSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CompilationUnitSyntax)
            If options <> Me.Options OrElse [imports] <> Me.[Imports] OrElse attributes <> Me.Attributes OrElse members <> Me.Members OrElse endOfFileToken.Node IsNot green._endOfFileToken Then
                Dim newNode = Syntax.CompilationUnit(options, [imports], attributes, members, endOfFileToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an Option statement, such as "Option Strict On".
    ''' </summary>
    Public NotInheritable Class OptionStatementSyntax
        Inherits DeclarationStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), optionKeyword As InternalSyntax.KeywordSyntax, nameKeyword As InternalSyntax.KeywordSyntax, valueKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.OptionStatementSyntax(kind, errors, annotations, optionKeyword, nameKeyword, valueKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Option" keyword.
        ''' </summary>
        Public  ReadOnly Property OptionKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OptionStatementSyntax)._optionKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OptionKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOptionKeyword(optionKeyword as SyntaxToken) As OptionStatementSyntax
            return Update(optionKeyword, Me.NameKeyword, Me.ValueKeyword)
        End Function

        ''' <summary>
        ''' The keyword that identifies the option being set: Explicit, Strict, Compare or
        ''' Infer.
        ''' </summary>
        Public  ReadOnly Property NameKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OptionStatementSyntax)._nameKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NameKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNameKeyword(nameKeyword as SyntaxToken) As OptionStatementSyntax
            return Update(Me.OptionKeyword, nameKeyword, Me.ValueKeyword)
        End Function

        ''' <summary>
        ''' The keyword that identifiers the value being set for the opition: On, Off, Text
        ''' or Binary.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ValueKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OptionStatementSyntax)._valueKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ValueKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValueKeyword(valueKeyword as SyntaxToken) As OptionStatementSyntax
            return Update(Me.OptionKeyword, Me.NameKeyword, valueKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOptionStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOptionStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OptionStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="optionKeyword">
        ''' The new OptionKeyword to update this OptionStatementSyntaxSyntax node with. If
        ''' not specified the current OptionKeyword will be used in the new
        ''' OptionStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="nameKeyword">
        ''' The new NameKeyword to update this OptionStatementSyntaxSyntax node with. If
        ''' not specified the current NameKeyword will be used in the new
        ''' OptionStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="valueKeyword">
        ''' The new ValueKeyword to update this OptionStatementSyntaxSyntax node with. If
        ''' not specified the current ValueKeyword will be used in the new
        ''' OptionStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(optionKeyword As SyntaxToken, nameKeyword As SyntaxToken, valueKeyword As SyntaxToken) As OptionStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OptionStatementSyntax)
            If optionKeyword.Node IsNot green._optionKeyword OrElse nameKeyword.Node IsNot green._nameKeyword OrElse valueKeyword.Node IsNot green._valueKeyword Then
                Dim newNode = Syntax.OptionStatement(optionKeyword, nameKeyword, valueKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an Imports statement, which has one or more imports clauses.
    ''' </summary>
    Public NotInheritable Class ImportsStatementSyntax
        Inherits DeclarationStatementSyntax

        Friend _importsClauses as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), importsKeyword As InternalSyntax.KeywordSyntax, importsClauses As SyntaxNode)
            Me.New(New InternalSyntax.ImportsStatementSyntax(kind, errors, annotations, importsKeyword, if(importsClauses IsNot Nothing, importsClauses.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Imports" keyword.
        ''' </summary>
        Public  ReadOnly Property ImportsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ImportsStatementSyntax)._importsKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImportsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImportsKeyword(importsKeyword as SyntaxToken) As ImportsStatementSyntax
            return Update(importsKeyword, Me.ImportsClauses)
        End Function

        ''' <summary>
        ''' A list of one or more import clauses. Each clause is either an alias, namespace
        ''' or XML namespace import.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property ImportsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_importsClauses, 1)
                Return new SeparatedSyntaxList(Of ImportsClauseSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImportsClauses property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImportsClauses(importsClauses as SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax
            return Update(Me.ImportsKeyword, importsClauses)
        End Function

        Public Shadows Function AddImportsClauses(ParamArray items As ImportsClauseSyntax()) As ImportsStatementSyntax
            Return Me.WithImportsClauses(Me.ImportsClauses.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._importsClauses
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_importsClauses, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitImportsStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitImportsStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ImportsStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="importsKeyword">
        ''' The new ImportsKeyword to update this ImportsStatementSyntaxSyntax node with.
        ''' If not specified the current ImportsKeyword will be used in the new
        ''' ImportsStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="importsClauses">
        ''' The new ImportsClauses to update this ImportsStatementSyntaxSyntax node with.
        ''' If not specified the current ImportsClauses will be used in the new
        ''' ImportsStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(importsKeyword As SyntaxToken, importsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ImportsStatementSyntax)
            If importsKeyword.Node IsNot green._importsKeyword OrElse importsClauses <> Me.ImportsClauses Then
                Dim newNode = Syntax.ImportsStatement(importsKeyword, importsClauses)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The base class for the possible clauses of an Imports statement.
    ''' </summary>
    Public MustInherit Class ImportsClauseSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents the clause of an Imports statement that defines an alias for a
    ''' namespace or type.
    ''' </summary>
    Public NotInheritable Class AliasImportsClauseSyntax
        Inherits ImportsClauseSyntax

        Friend _name as NameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), [alias] As InternalSyntax.IdentifierTokenSyntax, equalsToken As InternalSyntax.PunctuationSyntax, name As NameSyntax)
            Me.New(New InternalSyntax.AliasImportsClauseSyntax(kind, errors, annotations, [alias], equalsToken, DirectCast(name.Green, InternalSyntax.NameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The identifier that the alias is being defined for.
        ''' </summary>
        Public  ReadOnly Property [Alias] As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AliasImportsClauseSyntax)._alias, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Alias] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAlias([alias] as SyntaxToken) As AliasImportsClauseSyntax
            return Update([alias], Me.EqualsToken, Me.Name)
        End Function

        ''' <summary>
        ''' The equals sign token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AliasImportsClauseSyntax)._equalsToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As AliasImportsClauseSyntax
            return Update(Me.Alias, equalsToken, Me.Name)
        End Function

        ''' <summary>
        ''' The namespace or type the alias refers to.
        ''' </summary>
        Public  ReadOnly Property Name As NameSyntax
            Get
                Return GetRed(Of NameSyntax)(_name, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as NameSyntax) As AliasImportsClauseSyntax
            return Update(Me.Alias, Me.EqualsToken, name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAliasImportsClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAliasImportsClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AliasImportsClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="alias">
        ''' The new Alias to update this AliasImportsClauseSyntaxSyntax node with. If not
        ''' specified the current Alias will be used in the new
        ''' AliasImportsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this AliasImportsClauseSyntaxSyntax node with. If
        ''' not specified the current EqualsToken will be used in the new
        ''' AliasImportsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this AliasImportsClauseSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new
        ''' AliasImportsClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update([alias] As SyntaxToken, equalsToken As SyntaxToken, name As NameSyntax) As AliasImportsClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AliasImportsClauseSyntax)
            If [alias].Node IsNot green._alias OrElse equalsToken.Node IsNot green._equalsToken OrElse name IsNot Me._name Then
                Dim newNode = Syntax.AliasImportsClause([alias], equalsToken, name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the clause of an Imports statement that imports all members of a
    ''' namespace.
    ''' </summary>
    Public NotInheritable Class MembersImportsClauseSyntax
        Inherits ImportsClauseSyntax

        Friend _name as NameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), name As NameSyntax)
            Me.New(New InternalSyntax.MembersImportsClauseSyntax(kind, errors, annotations, DirectCast(name.Green, InternalSyntax.NameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The namespace or type being imported.
        ''' </summary>
        Public  ReadOnly Property Name As NameSyntax
            Get
                Return GetRed(Of NameSyntax)(_name, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as NameSyntax) As MembersImportsClauseSyntax
            return Update(name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._name
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me.Name
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMembersImportsClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMembersImportsClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MembersImportsClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="name">
        ''' The new Name to update this MembersImportsClauseSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new
        ''' MembersImportsClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(name As NameSyntax) As MembersImportsClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MembersImportsClauseSyntax)
            If name IsNot Me._name Then
                Dim newNode = Syntax.MembersImportsClause(name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Defines a XML namespace for XML expressions.
    ''' </summary>
    Public NotInheritable Class XmlNamespaceImportsClauseSyntax
        Inherits ImportsClauseSyntax

        Friend _xmlNamespace as XmlAttributeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanToken As InternalSyntax.PunctuationSyntax, xmlNamespace As XmlAttributeSyntax, greaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlNamespaceImportsClauseSyntax(kind, errors, annotations, lessThanToken, DirectCast(xmlNamespace.Green, InternalSyntax.XmlAttributeSyntax), greaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlNamespaceImportsClauseSyntax)._lessThanToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanToken(lessThanToken as SyntaxToken) As XmlNamespaceImportsClauseSyntax
            return Update(lessThanToken, Me.XmlNamespace, Me.GreaterThanToken)
        End Function

        ''' <summary>
        ''' Identifies the XML namespace alias and URI.
        ''' </summary>
        Public  ReadOnly Property XmlNamespace As XmlAttributeSyntax
            Get
                Return GetRed(Of XmlAttributeSyntax)(_xmlNamespace, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the XmlNamespace property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithXmlNamespace(xmlNamespace as XmlAttributeSyntax) As XmlNamespaceImportsClauseSyntax
            return Update(Me.LessThanToken, xmlNamespace, Me.GreaterThanToken)
        End Function

        Public  ReadOnly Property GreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlNamespaceImportsClauseSyntax)._greaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGreaterThanToken(greaterThanToken as SyntaxToken) As XmlNamespaceImportsClauseSyntax
            return Update(Me.LessThanToken, Me.XmlNamespace, greaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._xmlNamespace
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.XmlNamespace
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlNamespaceImportsClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlNamespaceImportsClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlNamespaceImportsClauseSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The new LessThanToken to update this XmlNamespaceImportsClauseSyntaxSyntax node
        ''' with. If not specified the current LessThanToken will be used in the new
        ''' XmlNamespaceImportsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="xmlNamespace">
        ''' The new XmlNamespace to update this XmlNamespaceImportsClauseSyntaxSyntax node
        ''' with. If not specified the current XmlNamespace will be used in the new
        ''' XmlNamespaceImportsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The new GreaterThanToken to update this XmlNamespaceImportsClauseSyntaxSyntax
        ''' node with. If not specified the current GreaterThanToken will be used in the
        ''' new XmlNamespaceImportsClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanToken As SyntaxToken, xmlNamespace As XmlAttributeSyntax, greaterThanToken As SyntaxToken) As XmlNamespaceImportsClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlNamespaceImportsClauseSyntax)
            If lessThanToken.Node IsNot green._lessThanToken OrElse xmlNamespace IsNot Me._xmlNamespace OrElse greaterThanToken.Node IsNot green._greaterThanToken Then
                Dim newNode = Syntax.XmlNamespaceImportsClause(lessThanToken, xmlNamespace, greaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Namespace statement, its contents and the End Namespace statement.
    ''' </summary>
    Public NotInheritable Class NamespaceBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as NamespaceStatementSyntax
        Friend _members as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As NamespaceStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.NamespaceBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.NamespaceStatementSyntax), beginTerminator, if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the NamespaceBlock.
        ''' </summary>
        Public  ReadOnly Property Begin As NamespaceStatementSyntax
            Get
                Return GetRed(Of NamespaceStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as NamespaceStatementSyntax) As NamespaceBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamespaceBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As NamespaceBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The declarations contained in the namespace statement.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As NamespaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As NamespaceBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End Namespace statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As NamespaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._members
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_members, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNamespaceBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNamespaceBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NamespaceBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this NamespaceBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new NamespaceBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this NamespaceBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' NamespaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this NamespaceBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new
        ''' NamespaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this NamespaceBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new NamespaceBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As NamespaceStatementSyntax, beginTerminator As SyntaxToken, members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As NamespaceBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NamespaceBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.NamespaceBlock(begin, beginTerminator, members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning statement of a namespace declaration. This node always
    ''' appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
    ''' </summary>
    Public NotInheritable Class NamespaceStatementSyntax
        Inherits DeclarationStatementSyntax

        Friend _name as NameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), namespaceKeyword As InternalSyntax.KeywordSyntax, name As NameSyntax)
            Me.New(New InternalSyntax.NamespaceStatementSyntax(kind, errors, annotations, namespaceKeyword, DirectCast(name.Green, InternalSyntax.NameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Namespace" keyword.
        ''' </summary>
        Public  ReadOnly Property NamespaceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamespaceStatementSyntax)._namespaceKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NamespaceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNamespaceKeyword(namespaceKeyword as SyntaxToken) As NamespaceStatementSyntax
            return Update(namespaceKeyword, Me.Name)
        End Function

        ''' <summary>
        ''' A (possibly dotted) name denoting the namespace being declared.
        ''' </summary>
        Public  ReadOnly Property Name As NameSyntax
            Get
                Return GetRed(Of NameSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as NameSyntax) As NamespaceStatementSyntax
            return Update(Me.NamespaceKeyword, name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNamespaceStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNamespaceStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NamespaceStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="namespaceKeyword">
        ''' The new NamespaceKeyword to update this NamespaceStatementSyntaxSyntax node
        ''' with. If not specified the current NamespaceKeyword will be used in the new
        ''' NamespaceStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this NamespaceStatementSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new
        ''' NamespaceStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(namespaceKeyword As SyntaxToken, name As NameSyntax) As NamespaceStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NamespaceStatementSyntax)
            If namespaceKeyword.Node IsNot green._namespaceKeyword OrElse name IsNot Me._name Then
                Dim newNode = Syntax.NamespaceStatement(namespaceKeyword, name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a declaration of a Class, Interface, Structure, Module, its contents
    ''' and the End statement that ends it.
    ''' </summary>
    Public MustInherit Class TypeBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as TypeStatementSyntax
        Friend _inherits as SyntaxNode
        Friend _implements as SyntaxNode
        Friend _members as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public ReadOnly Property Begin As TypeStatementSyntax
            Get
                Return Me.GetBeginCore()
            End Get
        End Property

        Friend Overridable Function GetBeginCore() As TypeStatementSyntax
                Return GetRed(Of TypeStatementSyntax)(_begin, 0)
        End Function


        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public ReadOnly Property BeginTerminator As SyntaxToken
            Get
                Return Me.GetBeginTerminatorCore()
            End Get
        End Property

        Friend Overridable Function GetBeginTerminatorCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
        End Function


        ''' <summary>
        ''' A list of the Inherits declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overridable ReadOnly Property [Inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_inherits, 2)
                Return new SeparatedSyntaxList(Of InheritsStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property


        ''' <summary>
        ''' A list of the Implements declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overridable ReadOnly Property [Implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_implements, 3)
                Return new SeparatedSyntaxList(Of ImplementsStatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property


        ''' <summary>
        ''' The declarations contained in the type or module.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overridable ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 4)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property


        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return Me.GetEndCore()
            End Get
        End Property

        Friend Overridable Function GetEndCore() As EndBlockStatementSyntax
                Return GetRed(Of EndBlockStatementSyntax)(_end, 5)
        End Function


    End Class

    ''' <summary>
    ''' Represents a declaration of Module, its contents and the End statement that
    ''' ends it.
    ''' </summary>
    Public NotInheritable Class ModuleBlockSyntax
        Inherits TypeBlockSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As TypeStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, [inherits] As SyntaxNode, [implements] As SyntaxNode, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.ModuleBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.TypeStatementSyntax), beginTerminator, if([inherits] IsNot Nothing, [inherits].Green, Nothing), if([implements] IsNot Nothing, [implements].Green, Nothing), if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As ModuleStatementSyntax
            Get
                Return DirectCast(GetRed(Of TypeStatementSyntax)(_begin, 0), ModuleStatementSyntax)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As TypeStatementSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as ModuleStatementSyntax) As ModuleBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ModuleBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As ModuleBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' A list of the Inherits declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_inherits, 2)
                Return new SeparatedSyntaxList(Of InheritsStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Inherits] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInherits([inherits] as SeparatedSyntaxList(Of InheritsStatementSyntax)) As ModuleBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, [inherits], Me.Implements, Me.Members, Me.End)
        End Function

        Public Shadows Function AddInherits(ParamArray items As InheritsStatementSyntax()) As ModuleBlockSyntax
            Return Me.WithInherits(Me.Inherits.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' A list of the Implements declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_implements, 3)
                Return new SeparatedSyntaxList(Of ImplementsStatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Implements] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplements([implements] as SeparatedSyntaxList(Of ImplementsStatementSyntax)) As ModuleBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, [implements], Me.Members, Me.End)
        End Function

        Public Shadows Function AddImplements(ParamArray items As ImplementsStatementSyntax()) As ModuleBlockSyntax
            Return Me.WithImplements(Me.Implements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The declarations contained in the type or module.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 4)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As ModuleBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As ModuleBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public Shadows ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 5)
            End Get
        End Property

        Friend Overrides Function GetEndCore() As EndBlockStatementSyntax
            Return Me.[End]
        End Function

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As ModuleBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._inherits
                Case 3
                    Return Me._implements
                Case 4
                    Return Me._members
                Case 5
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_inherits, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_implements, 3)
                Case 4
                    Return GetRed(Of SyntaxNode)(_members, 4)
                Case 5
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitModuleBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitModuleBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ModuleBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this ModuleBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new ModuleBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this ModuleBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' ModuleBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="inherits">
        ''' The new Inherits to update this ModuleBlockSyntaxSyntax node with. If not
        ''' specified the current Inherits will be used in the new ModuleBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="implements">
        ''' The new Implements to update this ModuleBlockSyntaxSyntax node with. If not
        ''' specified the current Implements will be used in the new
        ''' ModuleBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this ModuleBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new ModuleBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this ModuleBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new ModuleBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As ModuleStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As ModuleBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ModuleBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse [inherits] <> Me.[Inherits] OrElse [implements] <> Me.[Implements] OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.ModuleBlock(begin, beginTerminator, [inherits], [implements], members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a declaration of a Structure, its contents and the End statement
    ''' that ends it.
    ''' </summary>
    Public NotInheritable Class StructureBlockSyntax
        Inherits TypeBlockSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As TypeStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, [inherits] As SyntaxNode, [implements] As SyntaxNode, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.StructureBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.TypeStatementSyntax), beginTerminator, if([inherits] IsNot Nothing, [inherits].Green, Nothing), if([implements] IsNot Nothing, [implements].Green, Nothing), if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As StructureStatementSyntax
            Get
                Return DirectCast(GetRed(Of TypeStatementSyntax)(_begin, 0), StructureStatementSyntax)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As TypeStatementSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as StructureStatementSyntax) As StructureBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.StructureBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As StructureBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' A list of the Inherits declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_inherits, 2)
                Return new SeparatedSyntaxList(Of InheritsStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Inherits] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInherits([inherits] as SeparatedSyntaxList(Of InheritsStatementSyntax)) As StructureBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, [inherits], Me.Implements, Me.Members, Me.End)
        End Function

        Public Shadows Function AddInherits(ParamArray items As InheritsStatementSyntax()) As StructureBlockSyntax
            Return Me.WithInherits(Me.Inherits.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' A list of the Implements declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_implements, 3)
                Return new SeparatedSyntaxList(Of ImplementsStatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Implements] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplements([implements] as SeparatedSyntaxList(Of ImplementsStatementSyntax)) As StructureBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, [implements], Me.Members, Me.End)
        End Function

        Public Shadows Function AddImplements(ParamArray items As ImplementsStatementSyntax()) As StructureBlockSyntax
            Return Me.WithImplements(Me.Implements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The declarations contained in the type or module.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 4)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As StructureBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As StructureBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public Shadows ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 5)
            End Get
        End Property

        Friend Overrides Function GetEndCore() As EndBlockStatementSyntax
            Return Me.[End]
        End Function

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As StructureBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._inherits
                Case 3
                    Return Me._implements
                Case 4
                    Return Me._members
                Case 5
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_inherits, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_implements, 3)
                Case 4
                    Return GetRed(Of SyntaxNode)(_members, 4)
                Case 5
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitStructureBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitStructureBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new StructureBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this StructureBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new StructureBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this StructureBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' StructureBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="inherits">
        ''' The new Inherits to update this StructureBlockSyntaxSyntax node with. If not
        ''' specified the current Inherits will be used in the new
        ''' StructureBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="implements">
        ''' The new Implements to update this StructureBlockSyntaxSyntax node with. If not
        ''' specified the current Implements will be used in the new
        ''' StructureBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this StructureBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new
        ''' StructureBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this StructureBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new StructureBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As StructureStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As StructureBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.StructureBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse [inherits] <> Me.[Inherits] OrElse [implements] <> Me.[Implements] OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.StructureBlock(begin, beginTerminator, [inherits], [implements], members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a declaration of a Interface, its contents and the End statement
    ''' that ends it.
    ''' </summary>
    Public NotInheritable Class InterfaceBlockSyntax
        Inherits TypeBlockSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As TypeStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, [inherits] As SyntaxNode, [implements] As SyntaxNode, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.InterfaceBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.TypeStatementSyntax), beginTerminator, if([inherits] IsNot Nothing, [inherits].Green, Nothing), if([implements] IsNot Nothing, [implements].Green, Nothing), if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As InterfaceStatementSyntax
            Get
                Return DirectCast(GetRed(Of TypeStatementSyntax)(_begin, 0), InterfaceStatementSyntax)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As TypeStatementSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as InterfaceStatementSyntax) As InterfaceBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InterfaceBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As InterfaceBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' A list of the Inherits declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_inherits, 2)
                Return new SeparatedSyntaxList(Of InheritsStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Inherits] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInherits([inherits] as SeparatedSyntaxList(Of InheritsStatementSyntax)) As InterfaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, [inherits], Me.Implements, Me.Members, Me.End)
        End Function

        Public Shadows Function AddInherits(ParamArray items As InheritsStatementSyntax()) As InterfaceBlockSyntax
            Return Me.WithInherits(Me.Inherits.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' A list of the Implements declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_implements, 3)
                Return new SeparatedSyntaxList(Of ImplementsStatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Implements] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplements([implements] as SeparatedSyntaxList(Of ImplementsStatementSyntax)) As InterfaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, [implements], Me.Members, Me.End)
        End Function

        Public Shadows Function AddImplements(ParamArray items As ImplementsStatementSyntax()) As InterfaceBlockSyntax
            Return Me.WithImplements(Me.Implements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The declarations contained in the type or module.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 4)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As InterfaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As InterfaceBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public Shadows ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 5)
            End Get
        End Property

        Friend Overrides Function GetEndCore() As EndBlockStatementSyntax
            Return Me.[End]
        End Function

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As InterfaceBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._inherits
                Case 3
                    Return Me._implements
                Case 4
                    Return Me._members
                Case 5
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_inherits, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_implements, 3)
                Case 4
                    Return GetRed(Of SyntaxNode)(_members, 4)
                Case 5
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitInterfaceBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitInterfaceBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new InterfaceBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this InterfaceBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new InterfaceBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this InterfaceBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' InterfaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="inherits">
        ''' The new Inherits to update this InterfaceBlockSyntaxSyntax node with. If not
        ''' specified the current Inherits will be used in the new
        ''' InterfaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="implements">
        ''' The new Implements to update this InterfaceBlockSyntaxSyntax node with. If not
        ''' specified the current Implements will be used in the new
        ''' InterfaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this InterfaceBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new
        ''' InterfaceBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this InterfaceBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new InterfaceBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As InterfaceStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As InterfaceBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.InterfaceBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse [inherits] <> Me.[Inherits] OrElse [implements] <> Me.[Implements] OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.InterfaceBlock(begin, beginTerminator, [inherits], [implements], members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a declaration of a Class its contents and the End statement that
    ''' ends it.
    ''' </summary>
    Public NotInheritable Class ClassBlockSyntax
        Inherits TypeBlockSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As TypeStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, [inherits] As SyntaxNode, [implements] As SyntaxNode, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.ClassBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.TypeStatementSyntax), beginTerminator, if([inherits] IsNot Nothing, [inherits].Green, Nothing), if([implements] IsNot Nothing, [implements].Green, Nothing), if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As ClassStatementSyntax
            Get
                Return DirectCast(GetRed(Of TypeStatementSyntax)(_begin, 0), ClassStatementSyntax)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As TypeStatementSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as ClassStatementSyntax) As ClassBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ClassBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As ClassBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Inherits, Me.Implements, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' A list of the Inherits declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_inherits, 2)
                Return new SeparatedSyntaxList(Of InheritsStatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Inherits] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInherits([inherits] as SeparatedSyntaxList(Of InheritsStatementSyntax)) As ClassBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, [inherits], Me.Implements, Me.Members, Me.End)
        End Function

        Public Shadows Function AddInherits(ParamArray items As InheritsStatementSyntax()) As ClassBlockSyntax
            Return Me.WithInherits(Me.Inherits.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' A list of the Implements declarations for the type.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property [Implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_implements, 3)
                Return new SeparatedSyntaxList(Of ImplementsStatementSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Implements] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplements([implements] as SeparatedSyntaxList(Of ImplementsStatementSyntax)) As ClassBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, [implements], Me.Members, Me.End)
        End Function

        Public Shadows Function AddImplements(ParamArray items As ImplementsStatementSyntax()) As ClassBlockSyntax
            Return Me.WithImplements(Me.Implements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The declarations contained in the type or module.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Overrides ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 4)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As ClassBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As ClassBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public Shadows ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 5)
            End Get
        End Property

        Friend Overrides Function GetEndCore() As EndBlockStatementSyntax
            Return Me.[End]
        End Function

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As ClassBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Inherits, Me.Implements, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._inherits
                Case 3
                    Return Me._implements
                Case 4
                    Return Me._members
                Case 5
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_inherits, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_implements, 3)
                Case 4
                    Return GetRed(Of SyntaxNode)(_members, 4)
                Case 5
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitClassBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitClassBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ClassBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this ClassBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new ClassBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this ClassBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' ClassBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="inherits">
        ''' The new Inherits to update this ClassBlockSyntaxSyntax node with. If not
        ''' specified the current Inherits will be used in the new ClassBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="implements">
        ''' The new Implements to update this ClassBlockSyntaxSyntax node with. If not
        ''' specified the current Implements will be used in the new ClassBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this ClassBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new ClassBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this ClassBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new ClassBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As ClassStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As ClassBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ClassBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse [inherits] <> Me.[Inherits] OrElse [implements] <> Me.[Implements] OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.ClassBlock(begin, beginTerminator, [inherits], [implements], members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a declaration of an Enum, its contents and the End Enum statement
    ''' that ends it.
    ''' </summary>
    Public NotInheritable Class EnumBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as EnumStatementSyntax
        Friend _members as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As EnumStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, members As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.EnumBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.EnumStatementSyntax), beginTerminator, if(members IsNot Nothing, members.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the type or module.
        ''' </summary>
        Public  ReadOnly Property Begin As EnumStatementSyntax
            Get
                Return GetRed(Of EnumStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as EnumStatementSyntax) As EnumBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EnumBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As EnumBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Members, Me.End)
        End Function

        ''' <summary>
        ''' The declarations contained in the enumeration.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Members As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_members, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Members property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMembers(members as SeparatedSyntaxList(Of StatementSyntax)) As EnumBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, members, Me.End)
        End Function

        Public Shadows Function AddMembers(ParamArray items As StatementSyntax()) As EnumBlockSyntax
            Return Me.WithMembers(Me.Members.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As EnumBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Members, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._members
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_members, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEnumBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEnumBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EnumBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this EnumBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new EnumBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this EnumBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' EnumBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="members">
        ''' The new Members to update this EnumBlockSyntaxSyntax node with. If not
        ''' specified the current Members will be used in the new EnumBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this EnumBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new EnumBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As EnumStatementSyntax, beginTerminator As SyntaxToken, members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As EnumBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EnumBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse members <> Me.Members OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.EnumBlock(begin, beginTerminator, members, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an Inherits or Implements statement in a Class, Structure or
    ''' Interface.
    ''' </summary>
    Public MustInherit Class InheritsOrImplementsStatementSyntax
        Inherits DeclarationStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents an Inherits statement in a Class, Structure or Interface.
    ''' </summary>
    Public NotInheritable Class InheritsStatementSyntax
        Inherits InheritsOrImplementsStatementSyntax

        Friend _types as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), inheritsKeyword As InternalSyntax.KeywordSyntax, types As SyntaxNode)
            Me.New(New InternalSyntax.InheritsStatementSyntax(kind, errors, annotations, inheritsKeyword, if(types IsNot Nothing, types.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Inherits" keyword.
        ''' </summary>
        Public  ReadOnly Property InheritsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InheritsStatementSyntax)._inheritsKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the InheritsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInheritsKeyword(inheritsKeyword as SyntaxToken) As InheritsStatementSyntax
            return Update(inheritsKeyword, Me.Types)
        End Function

        ''' <summary>
        ''' A list of the types being inherited.
        ''' </summary>
        Public  ReadOnly Property Types As SeparatedSyntaxList(Of TypeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_types, 1)
                Return new SeparatedSyntaxList(Of TypeSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Types property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypes(types as SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax
            return Update(Me.InheritsKeyword, types)
        End Function

        Public Shadows Function AddTypes(ParamArray items As TypeSyntax()) As InheritsStatementSyntax
            Return Me.WithTypes(Me.Types.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._types
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_types, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitInheritsStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitInheritsStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new InheritsStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="inheritsKeyword">
        ''' The new InheritsKeyword to update this InheritsStatementSyntaxSyntax node with.
        ''' If not specified the current InheritsKeyword will be used in the new
        ''' InheritsStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="types">
        ''' The new Types to update this InheritsStatementSyntaxSyntax node with. If not
        ''' specified the current Types will be used in the new
        ''' InheritsStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(inheritsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.InheritsStatementSyntax)
            If inheritsKeyword.Node IsNot green._inheritsKeyword OrElse types <> Me.Types Then
                Dim newNode = Syntax.InheritsStatement(inheritsKeyword, types)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an Implements statement in a Class or Structure.
    ''' </summary>
    Public NotInheritable Class ImplementsStatementSyntax
        Inherits InheritsOrImplementsStatementSyntax

        Friend _types as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), implementsKeyword As InternalSyntax.KeywordSyntax, types As SyntaxNode)
            Me.New(New InternalSyntax.ImplementsStatementSyntax(kind, errors, annotations, implementsKeyword, if(types IsNot Nothing, types.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Implements" keyword.
        ''' </summary>
        Public  ReadOnly Property ImplementsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ImplementsStatementSyntax)._implementsKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImplementsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplementsKeyword(implementsKeyword as SyntaxToken) As ImplementsStatementSyntax
            return Update(implementsKeyword, Me.Types)
        End Function

        ''' <summary>
        ''' A list of the types being implemented.
        ''' </summary>
        Public  ReadOnly Property Types As SeparatedSyntaxList(Of TypeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_types, 1)
                Return new SeparatedSyntaxList(Of TypeSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Types property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypes(types as SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax
            return Update(Me.ImplementsKeyword, types)
        End Function

        Public Shadows Function AddTypes(ParamArray items As TypeSyntax()) As ImplementsStatementSyntax
            Return Me.WithTypes(Me.Types.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._types
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_types, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitImplementsStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitImplementsStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ImplementsStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="implementsKeyword">
        ''' The new ImplementsKeyword to update this ImplementsStatementSyntaxSyntax node
        ''' with. If not specified the current ImplementsKeyword will be used in the new
        ''' ImplementsStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="types">
        ''' The new Types to update this ImplementsStatementSyntaxSyntax node with. If not
        ''' specified the current Types will be used in the new
        ''' ImplementsStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(implementsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ImplementsStatementSyntax)
            If implementsKeyword.Node IsNot green._implementsKeyword OrElse types <> Me.Types Then
                Dim newNode = Syntax.ImplementsStatement(implementsKeyword, types)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract class for the beginning statement of a Module, Class, Interface or
    ''' Structure declaration. This node always appears as the Begin of a TypeBlock
    ''' with Kind=ModuleDeclarationBlock, ClassDeclarationBlock,
    ''' InterfaceDeclarationBlock or StructureDeclarationBlock.
    ''' </summary>
    Public MustInherit Class TypeStatementSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode
        Friend _typeParameterList as TypeParameterListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Return Me.GetAttributesCore()
            End Get
        End Property

        Friend Overridable Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
        End Function


        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property Modifiers As SyntaxTokenList
            Get
                Return Me.GetModifiersCore()
            End Get
        End Property

        Friend Overridable Function GetModifiersCore() As SyntaxTokenList
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.TypeStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
        End Function


        ''' <summary>
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </summary>
        Public ReadOnly Property Keyword As SyntaxToken
            Get
                Return Me.GetKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
        End Function


        ''' <summary>
        ''' The name of the type being declared.
        ''' </summary>
        Public ReadOnly Property Identifier As SyntaxToken
            Get
                Return Me.GetIdentifierCore()
            End Get
        End Property

        Friend Overridable Function GetIdentifierCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
        End Function


        ''' <summary>
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return Me.GetTypeParameterListCore()
            End Get
        End Property

        Friend Overridable Function GetTypeParameterListCore() As TypeParameterListSyntax
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
        End Function


    End Class

    ''' <summary>
    ''' Represents the beginning statement of a Module declaration. This node always
    ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class ModuleStatementSyntax
        Inherits TypeStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax)
            Me.New(New InternalSyntax.ModuleStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ModuleStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ModuleStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.ModuleStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As ModuleStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As ModuleStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ModuleStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As ModuleStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' The name of the type being declared.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ModuleStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As ModuleStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeParameterListCore() As TypeParameterListSyntax
            Return Me.TypeParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As ModuleStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, typeParameterList)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As ModuleStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._typeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.TypeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitModuleStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitModuleStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ModuleStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this ModuleStatementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' ModuleStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this ModuleStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' ModuleStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this ModuleStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' ModuleStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this ModuleStatementSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' ModuleStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this ModuleStatementSyntaxSyntax node with.
        ''' If not specified the current TypeParameterList will be used in the new
        ''' ModuleStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ModuleStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ModuleStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList Then
                Dim newNode = Syntax.ModuleStatement(attributes, modifiers, keyword, identifier, typeParameterList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning statement of a Structure declaration. This node always
    ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class StructureStatementSyntax
        Inherits TypeStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax)
            Me.New(New InternalSyntax.StructureStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As StructureStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As StructureStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.StructureStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As StructureStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As StructureStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.StructureStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As StructureStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' The name of the type being declared.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.StructureStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As StructureStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeParameterListCore() As TypeParameterListSyntax
            Return Me.TypeParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As StructureStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, typeParameterList)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As StructureStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._typeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.TypeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitStructureStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitStructureStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new StructureStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this StructureStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' StructureStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this StructureStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' StructureStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this StructureStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' StructureStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this StructureStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' StructureStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this StructureStatementSyntaxSyntax node
        ''' with. If not specified the current TypeParameterList will be used in the new
        ''' StructureStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As StructureStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.StructureStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList Then
                Dim newNode = Syntax.StructureStatement(attributes, modifiers, keyword, identifier, typeParameterList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning statement of a Interface declaration. This node always
    ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class InterfaceStatementSyntax
        Inherits TypeStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax)
            Me.New(New InternalSyntax.InterfaceStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As InterfaceStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As InterfaceStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.InterfaceStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As InterfaceStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As InterfaceStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InterfaceStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As InterfaceStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' The name of the type being declared.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InterfaceStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As InterfaceStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeParameterListCore() As TypeParameterListSyntax
            Return Me.TypeParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As InterfaceStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, typeParameterList)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As InterfaceStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._typeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.TypeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitInterfaceStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitInterfaceStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new InterfaceStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this InterfaceStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' InterfaceStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this InterfaceStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' InterfaceStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this InterfaceStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' InterfaceStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this InterfaceStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' InterfaceStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this InterfaceStatementSyntaxSyntax node
        ''' with. If not specified the current TypeParameterList will be used in the new
        ''' InterfaceStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As InterfaceStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.InterfaceStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList Then
                Dim newNode = Syntax.InterfaceStatement(attributes, modifiers, keyword, identifier, typeParameterList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning statement of a Class declaration. This node always
    ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class ClassStatementSyntax
        Inherits TypeStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax)
            Me.New(New InternalSyntax.ClassStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ClassStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ClassStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.ClassStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As ClassStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As ClassStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ClassStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As ClassStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' The name of the type being declared.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ClassStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As ClassStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.TypeParameterList)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeParameterListCore() As TypeParameterListSyntax
            Return Me.TypeParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As ClassStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, typeParameterList)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As ClassStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._typeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.TypeParameterList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitClassStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitClassStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ClassStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this ClassStatementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' ClassStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this ClassStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' ClassStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this ClassStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' ClassStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this ClassStatementSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' ClassStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this ClassStatementSyntaxSyntax node with.
        ''' If not specified the current TypeParameterList will be used in the new
        ''' ClassStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ClassStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ClassStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList Then
                Dim newNode = Syntax.ClassStatement(attributes, modifiers, keyword, identifier, typeParameterList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning statement of an Enum declaration. This node always
    ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class EnumStatementSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode
        Friend _underlyingType as AsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, enumKeyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, underlyingType As AsClauseSyntax)
            Me.New(New InternalSyntax.EnumStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, enumKeyword, identifier, if(underlyingType IsNot Nothing , DirectCast(underlyingType.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As EnumStatementSyntax
            return Update(attributes, Me.Modifiers, Me.EnumKeyword, Me.Identifier, Me.UnderlyingType)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As EnumStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.EnumStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As EnumStatementSyntax
            return Update(Me.Attributes, modifiers, Me.EnumKeyword, Me.Identifier, Me.UnderlyingType)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As EnumStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Enum" keyword.
        ''' </summary>
        Public  ReadOnly Property EnumKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EnumStatementSyntax)._enumKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EnumKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnumKeyword(enumKeyword as SyntaxToken) As EnumStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, enumKeyword, Me.Identifier, Me.UnderlyingType)
        End Function

        ''' <summary>
        ''' The name of the enum being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EnumStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As EnumStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.EnumKeyword, identifier, Me.UnderlyingType)
        End Function

        ''' <summary>
        ''' Optional "As XXX" clause describing the underlying type of the enumeration. If
        ''' no As clause was specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property UnderlyingType As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_underlyingType, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the UnderlyingType property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithUnderlyingType(underlyingType as AsClauseSyntax) As EnumStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.EnumKeyword, Me.Identifier, underlyingType)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._underlyingType
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.UnderlyingType
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEnumStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEnumStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EnumStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this EnumStatementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' EnumStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this EnumStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' EnumStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="enumKeyword">
        ''' The new EnumKeyword to update this EnumStatementSyntaxSyntax node with. If not
        ''' specified the current EnumKeyword will be used in the new
        ''' EnumStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this EnumStatementSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' EnumStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="underlyingType">
        ''' The new UnderlyingType to update this EnumStatementSyntaxSyntax node with. If
        ''' not specified the current UnderlyingType will be used in the new
        ''' EnumStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, enumKeyword As SyntaxToken, identifier As SyntaxToken, underlyingType As AsClauseSyntax) As EnumStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EnumStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse enumKeyword.Node IsNot green._enumKeyword OrElse identifier.Node IsNot green._identifier OrElse underlyingType IsNot Me._underlyingType Then
                Dim newNode = Syntax.EnumStatement(attributes, modifiers, enumKeyword, identifier, underlyingType)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the type parameter list in a declaration.
    ''' </summary>
    Public NotInheritable Class TypeParameterListSyntax
        Inherits SyntaxNode

        Friend _parameters as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, ofKeyword As InternalSyntax.KeywordSyntax, parameters As SyntaxNode, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.TypeParameterListSyntax(kind, errors, annotations, openParenToken, ofKeyword, if(parameters IsNot Nothing, parameters.Green, Nothing), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterListSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As TypeParameterListSyntax
            return Update(openParenToken, Me.OfKeyword, Me.Parameters, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "Of" keyword.
        ''' </summary>
        Public  ReadOnly Property OfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterListSyntax)._ofKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOfKeyword(ofKeyword as SyntaxToken) As TypeParameterListSyntax
            return Update(Me.OpenParenToken, ofKeyword, Me.Parameters, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' A list of the type parameters. There must be at least one type parameter in the
        ''' list.
        ''' </summary>
        Public  ReadOnly Property Parameters As SeparatedSyntaxList(Of TypeParameterSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_parameters, 2)
                Return new SeparatedSyntaxList(Of TypeParameterSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Parameters property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameters(parameters as SeparatedSyntaxList(Of TypeParameterSyntax)) As TypeParameterListSyntax
            return Update(Me.OpenParenToken, Me.OfKeyword, parameters, Me.CloseParenToken)
        End Function

        Public Shadows Function AddParameters(ParamArray items As TypeParameterSyntax()) As TypeParameterListSyntax
            Return Me.WithParameters(Me.Parameters.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterListSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As TypeParameterListSyntax
            return Update(Me.OpenParenToken, Me.OfKeyword, Me.Parameters, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._parameters
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_parameters, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeParameterList(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeParameterList(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeParameterListSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this TypeParameterListSyntaxSyntax node with.
        ''' If not specified the current OpenParenToken will be used in the new
        ''' TypeParameterListSyntaxSyntax node.
        ''' </param>
        ''' <param name="ofKeyword">
        ''' The new OfKeyword to update this TypeParameterListSyntaxSyntax node with. If
        ''' not specified the current OfKeyword will be used in the new
        ''' TypeParameterListSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameters">
        ''' The new Parameters to update this TypeParameterListSyntaxSyntax node with. If
        ''' not specified the current Parameters will be used in the new
        ''' TypeParameterListSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this TypeParameterListSyntaxSyntax node with.
        ''' If not specified the current CloseParenToken will be used in the new
        ''' TypeParameterListSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, ofKeyword As SyntaxToken, parameters As SeparatedSyntaxList(Of TypeParameterSyntax), closeParenToken As SyntaxToken) As TypeParameterListSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeParameterListSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse ofKeyword.Node IsNot green._ofKeyword OrElse parameters <> Me.Parameters OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.TypeParameterList(openParenToken, ofKeyword, parameters, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a type parameter on a generic type declaration.
    ''' </summary>
    Public NotInheritable Class TypeParameterSyntax
        Inherits SyntaxNode

        Friend _typeParameterConstraintClause as TypeParameterConstraintClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), varianceKeyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterConstraintClause As TypeParameterConstraintClauseSyntax)
            Me.New(New InternalSyntax.TypeParameterSyntax(kind, errors, annotations, varianceKeyword, identifier, if(typeParameterConstraintClause IsNot Nothing , DirectCast(typeParameterConstraintClause.Green, InternalSyntax.TypeParameterConstraintClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' Represents the "In" or "Out" variance keyword on a type parameter, if present.
        ''' If no variance modifier was present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property VarianceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterSyntax)._varianceKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the VarianceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVarianceKeyword(varianceKeyword as SyntaxToken) As TypeParameterSyntax
            return Update(varianceKeyword, Me.Identifier, Me.TypeParameterConstraintClause)
        End Function

        ''' <summary>
        ''' The name of the type parameter
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterSyntax)._identifier, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As TypeParameterSyntax
            return Update(Me.VarianceKeyword, identifier, Me.TypeParameterConstraintClause)
        End Function

        ''' <summary>
        ''' The "As" keyword, if any type constraints were supplied. If no type constraints
        ''' were supplied, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property TypeParameterConstraintClause As TypeParameterConstraintClauseSyntax
            Get
                Return GetRed(Of TypeParameterConstraintClauseSyntax)(_typeParameterConstraintClause, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterConstraintClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterConstraintClause(typeParameterConstraintClause as TypeParameterConstraintClauseSyntax) As TypeParameterSyntax
            return Update(Me.VarianceKeyword, Me.Identifier, typeParameterConstraintClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._typeParameterConstraintClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.TypeParameterConstraintClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeParameter(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeParameter(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeParameterSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="varianceKeyword">
        ''' The new VarianceKeyword to update this TypeParameterSyntaxSyntax node with. If
        ''' not specified the current VarianceKeyword will be used in the new
        ''' TypeParameterSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this TypeParameterSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' TypeParameterSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterConstraintClause">
        ''' The new TypeParameterConstraintClause to update this TypeParameterSyntaxSyntax
        ''' node with. If not specified the current TypeParameterConstraintClause will be
        ''' used in the new TypeParameterSyntaxSyntax node.
        ''' </param>
        Public Function Update(varianceKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterConstraintClause As TypeParameterConstraintClauseSyntax) As TypeParameterSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeParameterSyntax)
            If varianceKeyword.Node IsNot green._varianceKeyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterConstraintClause IsNot Me._typeParameterConstraintClause Then
                Dim newNode = Syntax.TypeParameter(varianceKeyword, identifier, typeParameterConstraintClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An abstract node class that is the parent of classes that describe type
    ''' parameter constraint clauses.
    ''' </summary>
    Public MustInherit Class TypeParameterConstraintClauseSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' One of the type parameter constraints clauses. This represents a constraint
    ''' clause in the form of "As Constraint".
    ''' </summary>
    Public NotInheritable Class TypeParameterSingleConstraintClauseSyntax
        Inherits TypeParameterConstraintClauseSyntax

        Friend _constraint as ConstraintSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), asKeyword As InternalSyntax.KeywordSyntax, constraint As ConstraintSyntax)
            Me.New(New InternalSyntax.TypeParameterSingleConstraintClauseSyntax(kind, errors, annotations, asKeyword, DirectCast(constraint.Green, InternalSyntax.ConstraintSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "As" keyword, if any type constraints were supplied. If no type constraints
        ''' were supplied, Nothing is returned.
        ''' </summary>
        Public  ReadOnly Property AsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterSingleConstraintClauseSyntax)._asKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsKeyword(asKeyword as SyntaxToken) As TypeParameterSingleConstraintClauseSyntax
            return Update(asKeyword, Me.Constraint)
        End Function

        ''' <summary>
        ''' A list of the supplied constraints. If no constraints were supplied, Nothing is
        ''' returned.
        ''' </summary>
        Public  ReadOnly Property Constraint As ConstraintSyntax
            Get
                Return GetRed(Of ConstraintSyntax)(_constraint, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Constraint property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithConstraint(constraint as ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax
            return Update(Me.AsKeyword, constraint)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._constraint
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Constraint
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeParameterSingleConstraintClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeParameterSingleConstraintClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeParameterSingleConstraintClauseSyntaxSyntax node with the
        ''' specified changes.
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The new AsKeyword to update this
        ''' TypeParameterSingleConstraintClauseSyntaxSyntax node with. If not specified the
        ''' current AsKeyword will be used in the new
        ''' TypeParameterSingleConstraintClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="constraint">
        ''' The new Constraint to update this
        ''' TypeParameterSingleConstraintClauseSyntaxSyntax node with. If not specified the
        ''' current Constraint will be used in the new
        ''' TypeParameterSingleConstraintClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(asKeyword As SyntaxToken, constraint As ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeParameterSingleConstraintClauseSyntax)
            If asKeyword.Node IsNot green._asKeyword OrElse constraint IsNot Me._constraint Then
                Dim newNode = Syntax.TypeParameterSingleConstraintClause(asKeyword, constraint)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' One of the type parameter constraints clauses. This represents a constraint
    ''' clause in the form of "As { Constraints }".
    ''' </summary>
    Public NotInheritable Class TypeParameterMultipleConstraintClauseSyntax
        Inherits TypeParameterConstraintClauseSyntax

        Friend _constraints as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), asKeyword As InternalSyntax.KeywordSyntax, openBraceToken As InternalSyntax.PunctuationSyntax, constraints As SyntaxNode, closeBraceToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.TypeParameterMultipleConstraintClauseSyntax(kind, errors, annotations, asKeyword, openBraceToken, if(constraints IsNot Nothing, constraints.Green, Nothing), closeBraceToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "As" keyword.
        ''' </summary>
        Public  ReadOnly Property AsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterMultipleConstraintClauseSyntax)._asKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsKeyword(asKeyword as SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax
            return Update(asKeyword, Me.OpenBraceToken, Me.Constraints, Me.CloseBraceToken)
        End Function

        ''' <summary>
        ''' The "{" token.
        ''' </summary>
        Public  ReadOnly Property OpenBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterMultipleConstraintClauseSyntax)._openBraceToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenBraceToken(openBraceToken as SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax
            return Update(Me.AsKeyword, openBraceToken, Me.Constraints, Me.CloseBraceToken)
        End Function

        ''' <summary>
        ''' A list of the supplied constraints. If no constraints were supplied, an empty
        ''' list is returned.
        ''' </summary>
        Public  ReadOnly Property Constraints As SeparatedSyntaxList(Of ConstraintSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_constraints, 2)
                Return new SeparatedSyntaxList(Of ConstraintSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Constraints property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithConstraints(constraints as SeparatedSyntaxList(Of ConstraintSyntax)) As TypeParameterMultipleConstraintClauseSyntax
            return Update(Me.AsKeyword, Me.OpenBraceToken, constraints, Me.CloseBraceToken)
        End Function

        Public Shadows Function AddConstraints(ParamArray items As ConstraintSyntax()) As TypeParameterMultipleConstraintClauseSyntax
            Return Me.WithConstraints(Me.Constraints.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "}" token.
        ''' </summary>
        Public  ReadOnly Property CloseBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeParameterMultipleConstraintClauseSyntax)._closeBraceToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseBraceToken(closeBraceToken as SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax
            return Update(Me.AsKeyword, Me.OpenBraceToken, Me.Constraints, closeBraceToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._constraints
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_constraints, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeParameterMultipleConstraintClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeParameterMultipleConstraintClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeParameterMultipleConstraintClauseSyntaxSyntax node with the
        ''' specified changes.
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The new AsKeyword to update this
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node with. If not specified
        ''' the current AsKeyword will be used in the new
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="openBraceToken">
        ''' The new OpenBraceToken to update this
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node with. If not specified
        ''' the current OpenBraceToken will be used in the new
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="constraints">
        ''' The new Constraints to update this
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node with. If not specified
        ''' the current Constraints will be used in the new
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The new CloseBraceToken to update this
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node with. If not specified
        ''' the current CloseBraceToken will be used in the new
        ''' TypeParameterMultipleConstraintClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(asKeyword As SyntaxToken, openBraceToken As SyntaxToken, constraints As SeparatedSyntaxList(Of ConstraintSyntax), closeBraceToken As SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeParameterMultipleConstraintClauseSyntax)
            If asKeyword.Node IsNot green._asKeyword OrElse openBraceToken.Node IsNot green._openBraceToken OrElse constraints <> Me.Constraints OrElse closeBraceToken.Node IsNot green._closeBraceToken Then
                Dim newNode = Syntax.TypeParameterMultipleConstraintClause(asKeyword, openBraceToken, constraints, closeBraceToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An abstract node class that is the parent of classes that describe type
    ''' parameter constraints.
    ''' </summary>
    Public MustInherit Class ConstraintSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' One of the special type parameter constraints: New, Class or Structure. Which
    ''' kind of special constraint it is can be obtained from the Kind property and is
    ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
    ''' </summary>
    Public NotInheritable Class SpecialConstraintSyntax
        Inherits ConstraintSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), constraintKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.SpecialConstraintSyntax(kind, errors, annotations, constraintKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "New", "Class" or "Structure" keyword that denotes the kind of special
        ''' constraint.
        ''' </summary>
        Public  ReadOnly Property ConstraintKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SpecialConstraintSyntax)._constraintKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ConstraintKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithConstraintKeyword(constraintKeyword as SyntaxToken) As SpecialConstraintSyntax
            return Update(constraintKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSpecialConstraint(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSpecialConstraint(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SpecialConstraintSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="constraintKeyword">
        ''' The new ConstraintKeyword to update this SpecialConstraintSyntaxSyntax node
        ''' with. If not specified the current ConstraintKeyword will be used in the new
        ''' SpecialConstraintSyntaxSyntax node.
        ''' </param>
        Public Function Update(constraintKeyword As SyntaxToken) As SpecialConstraintSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SpecialConstraintSyntax)
            If constraintKeyword.Node IsNot green._constraintKeyword Then
                Dim newNode = Syntax.SpecialConstraint(Me.Kind, constraintKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a type parameter constraint that is a type.
    ''' </summary>
    Public NotInheritable Class TypeConstraintSyntax
        Inherits ConstraintSyntax

        Friend _type as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), type As TypeSyntax)
            Me.New(New InternalSyntax.TypeConstraintSyntax(kind, errors, annotations, DirectCast(type.Green, InternalSyntax.TypeSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The type describing the constraint.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As TypeConstraintSyntax
            return Update(type)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._type
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me.Type
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeConstraint(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeConstraint(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeConstraintSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="type">
        ''' The new Type to update this TypeConstraintSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new TypeConstraintSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(type As TypeSyntax) As TypeConstraintSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeConstraintSyntax)
            If type IsNot Me._type Then
                Dim newNode = Syntax.TypeConstraint(type)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a name and value in an EnumDeclarationBlock.
    ''' </summary>
    Public NotInheritable Class EnumMemberDeclarationSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode
        Friend _initializer as EqualsValueSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, identifier As InternalSyntax.IdentifierTokenSyntax, initializer As EqualsValueSyntax)
            Me.New(New InternalSyntax.EnumMemberDeclarationSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), identifier, if(initializer IsNot Nothing , DirectCast(initializer.Green, InternalSyntax.EqualsValueSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As EnumMemberDeclarationSyntax
            return Update(attributes, Me.Identifier, Me.Initializer)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As EnumMemberDeclarationSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EnumMemberDeclarationSyntax)._identifier, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As EnumMemberDeclarationSyntax
            return Update(Me.Attributes, identifier, Me.Initializer)
        End Function

        ''' <summary>
        ''' An optional value for the enum member.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Initializer As EqualsValueSyntax
            Get
                Return GetRed(Of EqualsValueSyntax)(_initializer, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as EqualsValueSyntax) As EnumMemberDeclarationSyntax
            return Update(Me.Attributes, Me.Identifier, initializer)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 2
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 2
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEnumMemberDeclaration(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEnumMemberDeclaration(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EnumMemberDeclarationSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this EnumMemberDeclarationSyntaxSyntax node with.
        ''' If not specified the current Attributes will be used in the new
        ''' EnumMemberDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this EnumMemberDeclarationSyntaxSyntax node with.
        ''' If not specified the current Identifier will be used in the new
        ''' EnumMemberDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this EnumMemberDeclarationSyntaxSyntax node with.
        ''' If not specified the current Initializer will be used in the new
        ''' EnumMemberDeclarationSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), identifier As SyntaxToken, initializer As EqualsValueSyntax) As EnumMemberDeclarationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EnumMemberDeclarationSyntax)
            If attributes <> Me.Attributes OrElse identifier.Node IsNot green._identifier OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.EnumMemberDeclaration(attributes, identifier, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a block member declaration: A declaration that has a beginning
    ''' declaration, a body of executable statements and an end statement. Examples
    ''' include methods, constructors, operators, property accessors and custom event
    ''' accessors.
    ''' </summary>
    Public NotInheritable Class MethodBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as MethodBaseSyntax
        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As MethodBaseSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.MethodBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.MethodBaseSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The declaration that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As MethodBaseSyntax
            Get
                Return GetRed(Of MethodBaseSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as MethodBaseSyntax) As MethodBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MethodBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As MethodBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As MethodBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As MethodBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End XXX statement that ends the block declaration.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As MethodBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMethodBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMethodBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MethodBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this MethodBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new MethodBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this MethodBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' MethodBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this MethodBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new
        ''' MethodBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this MethodBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new MethodBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MethodBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.MethodBlock(Me.Kind, begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a block property declaration: A declaration that has a beginning
    ''' declaration, some get or set accessor blocks and an end statement.
    ''' </summary>
    Public NotInheritable Class PropertyBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as PropertyStatementSyntax
        Friend _accessors as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As PropertyStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, accessors As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.PropertyBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.PropertyStatementSyntax), beginTerminator, if(accessors IsNot Nothing, accessors.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The property declaration that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As PropertyStatementSyntax
            Get
                Return GetRed(Of PropertyStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as PropertyStatementSyntax) As PropertyBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Accessors, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PropertyBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As PropertyBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Accessors, Me.End)
        End Function

        ''' <summary>
        ''' The accessor blocks contained in the property, between the Property and the End
        ''' Property statements.
        ''' </summary>
        Public  ReadOnly Property Accessors As SeparatedSyntaxList(Of MethodBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_accessors, 2)
                Return new SeparatedSyntaxList(Of MethodBlockSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Accessors property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAccessors(accessors as SeparatedSyntaxList(Of MethodBlockSyntax)) As PropertyBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, accessors, Me.End)
        End Function

        Public Shadows Function AddAccessors(ParamArray items As MethodBlockSyntax()) As PropertyBlockSyntax
            Return Me.WithAccessors(Me.Accessors.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End Property statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As PropertyBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Accessors, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._accessors
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_accessors, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPropertyBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPropertyBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PropertyBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this PropertyBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new PropertyBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this PropertyBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' PropertyBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="accessors">
        ''' The new Accessors to update this PropertyBlockSyntaxSyntax node with. If not
        ''' specified the current Accessors will be used in the new
        ''' PropertyBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this PropertyBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new PropertyBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As PropertyStatementSyntax, beginTerminator As SyntaxToken, accessors As SeparatedSyntaxList(Of MethodBlockSyntax), [end] As EndBlockStatementSyntax) As PropertyBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PropertyBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse accessors <> Me.Accessors OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.PropertyBlock(begin, beginTerminator, accessors, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a custom event declaration: A declaration that has a beginning event
    ''' declaration, some accessor blocks and an end statement.
    ''' </summary>
    Public NotInheritable Class EventBlockSyntax
        Inherits DeclarationStatementSyntax

        Friend _begin as EventStatementSyntax
        Friend _accessors as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As EventStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, accessors As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.EventBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.EventStatementSyntax), beginTerminator, if(accessors IsNot Nothing, accessors.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The event declaration that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As EventStatementSyntax
            Get
                Return GetRed(Of EventStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as EventStatementSyntax) As EventBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Accessors, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EventBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As EventBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Accessors, Me.End)
        End Function

        ''' <summary>
        ''' The accessor blocks contained in the custom event declaration, between the
        ''' Event statement and the End Event statement.
        ''' </summary>
        Public  ReadOnly Property Accessors As SeparatedSyntaxList(Of MethodBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_accessors, 2)
                Return new SeparatedSyntaxList(Of MethodBlockSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Accessors property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAccessors(accessors as SeparatedSyntaxList(Of MethodBlockSyntax)) As EventBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, accessors, Me.End)
        End Function

        Public Shadows Function AddAccessors(ParamArray items As MethodBlockSyntax()) As EventBlockSyntax
            Return Me.WithAccessors(Me.Accessors.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End Event statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As EventBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Accessors, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._accessors
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_accessors, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEventBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEventBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EventBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this EventBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new EventBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this EventBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' EventBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="accessors">
        ''' The new Accessors to update this EventBlockSyntaxSyntax node with. If not
        ''' specified the current Accessors will be used in the new EventBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this EventBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new EventBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As EventStatementSyntax, beginTerminator As SyntaxToken, accessors As SeparatedSyntaxList(Of MethodBlockSyntax), [end] As EndBlockStatementSyntax) As EventBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EventBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse accessors <> Me.Accessors OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.EventBlock(begin, beginTerminator, accessors, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An abstract node class that is the parent for declarations that are
    ''' "method-like"; i.e., that have a parameter list and return type. This includes
    ''' methods, constructors, properties, events, operators, declares, delegates,
    ''' property accessors and custom event accessors.
    ''' </summary>
    Public MustInherit Class MethodBaseSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode
        Friend _parameterList as ParameterListSyntax
        Friend _asClause as AsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Return Me.GetAttributesCore()
            End Get
        End Property

        Friend Overridable Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
        End Function


        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property Modifiers As SyntaxTokenList
            Get
                Return Me.GetModifiersCore()
            End Get
        End Property

        Friend Overridable Function GetModifiersCore() As SyntaxTokenList
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.MethodBaseSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
        End Function


        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public ReadOnly Property Keyword As SyntaxToken
            Get
                Return Me.GetKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MethodBaseSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
        End Function


        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return Me.GetParameterListCore()
            End Get
        End Property

        Friend Overridable Function GetParameterListCore() As ParameterListSyntax
                Return GetRed(Of ParameterListSyntax)(_parameterList, 3)
        End Function


        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return Me.GetAsClauseCore()
            End Get
        End Property

        Friend Overridable Function GetAsClauseCore() As AsClauseSyntax
                Return GetRed(Of AsClauseSyntax)(_asClause, 4)
        End Function


    End Class

    ''' <summary>
    ''' Represents the parameter list in a method declaration.
    ''' </summary>
    Public NotInheritable Class ParameterListSyntax
        Inherits SyntaxNode

        Friend _parameters as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, parameters As SyntaxNode, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ParameterListSyntax(kind, errors, annotations, openParenToken, if(parameters IsNot Nothing, parameters.Green, Nothing), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token that introduces the parameter list. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ParameterListSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ParameterListSyntax
            return Update(openParenToken, Me.Parameters, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The list of parameters. If no parameter list was present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Parameters As SeparatedSyntaxList(Of ParameterSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_parameters, 1)
                Return new SeparatedSyntaxList(Of ParameterSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Parameters property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameters(parameters as SeparatedSyntaxList(Of ParameterSyntax)) As ParameterListSyntax
            return Update(Me.OpenParenToken, parameters, Me.CloseParenToken)
        End Function

        Public Shadows Function AddParameters(ParamArray items As ParameterSyntax()) As ParameterListSyntax
            Return Me.WithParameters(Me.Parameters.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The ")" token that concludes the parameter list. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ParameterListSyntax)._closeParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ParameterListSyntax
            return Update(Me.OpenParenToken, Me.Parameters, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._parameters
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_parameters, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitParameterList(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitParameterList(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ParameterListSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ParameterListSyntaxSyntax node with. If
        ''' not specified the current OpenParenToken will be used in the new
        ''' ParameterListSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameters">
        ''' The new Parameters to update this ParameterListSyntaxSyntax node with. If not
        ''' specified the current Parameters will be used in the new
        ''' ParameterListSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ParameterListSyntaxSyntax node with. If
        ''' not specified the current CloseParenToken will be used in the new
        ''' ParameterListSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, parameters As SeparatedSyntaxList(Of ParameterSyntax), closeParenToken As SyntaxToken) As ParameterListSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ParameterListSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse parameters <> Me.Parameters OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ParameterList(openParenToken, parameters, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The statement that declares a Sub or Function. If this method has a body, this
    ''' statement will be the Begin of a BlockStatement with
    ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
    ''' that BlockStatement.
    ''' </summary>
    Public NotInheritable Class MethodStatementSyntax
        Inherits MethodBaseSyntax

        Friend _typeParameterList as TypeParameterListSyntax
        Friend _handlesClause as HandlesClauseSyntax
        Friend _implementsClause as ImplementsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax)
            Me.New(New InternalSyntax.MethodStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) , if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) , if(handlesClause IsNot Nothing , DirectCast(handlesClause.Green, InternalSyntax.HandlesClauseSyntax), Nothing) , if(implementsClause IsNot Nothing , DirectCast(implementsClause.Green, InternalSyntax.ImplementsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As MethodStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As MethodStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.MethodStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As MethodStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As MethodStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MethodStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The name of the method being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MethodStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, typeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As MethodStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 5)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, parameterList, Me.AsClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As MethodStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 6)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, asClause, Me.HandlesClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property HandlesClause As HandlesClauseSyntax
            Get
                Return GetRed(Of HandlesClauseSyntax)(_handlesClause, 7)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the HandlesClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHandlesClause(handlesClause as HandlesClauseSyntax) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, handlesClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddHandlesClauseEvents(ParamArray items As HandlesClauseItemSyntax()) As MethodStatementSyntax
            Dim _child = If (Me.HandlesClause IsNot Nothing, Me.HandlesClause, Syntax.HandlesClause())
            Return Me.WithHandlesClause(_child.AddEvents(items))
        End Function

        ''' <summary>
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ImplementsClause As ImplementsClauseSyntax
            Get
                Return GetRed(Of ImplementsClauseSyntax)(_implementsClause, 8)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImplementsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplementsClause(implementsClause as ImplementsClauseSyntax) As MethodStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause, Me.HandlesClause, implementsClause)
        End Function

        Public Shadows Function AddImplementsClauseInterfaceMembers(ParamArray items As QualifiedNameSyntax()) As MethodStatementSyntax
            Dim _child = If (Me.ImplementsClause IsNot Nothing, Me.ImplementsClause, Syntax.ImplementsClause())
            Return Me.WithImplementsClause(_child.AddInterfaceMembers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._typeParameterList
                Case 5
                    Return Me._parameterList
                Case 6
                    Return Me._asClause
                Case 7
                    Return Me._handlesClause
                Case 8
                    Return Me._implementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.TypeParameterList
                Case 5
                    Return Me.ParameterList
                Case 6
                    Return Me.AsClause
                Case 7
                    Return Me.HandlesClause
                Case 8
                    Return Me.ImplementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 9
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMethodStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMethodStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MethodStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this MethodStatementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this MethodStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this MethodStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this MethodStatementSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this MethodStatementSyntaxSyntax node with.
        ''' If not specified the current TypeParameterList will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this MethodStatementSyntaxSyntax node with. If
        ''' not specified the current ParameterList will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this MethodStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="handlesClause">
        ''' The new HandlesClause to update this MethodStatementSyntaxSyntax node with. If
        ''' not specified the current HandlesClause will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="implementsClause">
        ''' The new ImplementsClause to update this MethodStatementSyntaxSyntax node with.
        ''' If not specified the current ImplementsClause will be used in the new
        ''' MethodStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MethodStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause OrElse handlesClause IsNot Me._handlesClause OrElse implementsClause IsNot Me._implementsClause Then
                Dim newNode = Syntax.MethodStatement(Me.Kind, attributes, modifiers, keyword, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A statement that declares a constructor. This statement will be the Begin of a
    ''' BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
    ''' will be the Body of that BlockStatement.
    ''' </summary>
    Public NotInheritable Class ConstructorStatementSyntax
        Inherits MethodBaseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, newKeyword As InternalSyntax.KeywordSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.ConstructorStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, newKeyword, if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ConstructorStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.NewKeyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ConstructorStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.ConstructorStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As ConstructorStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.NewKeyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As ConstructorStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstructorStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As ConstructorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.NewKeyword, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The "New" keyword in the constructor declaration.
        ''' </summary>
        Public  ReadOnly Property NewKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstructorStatementSyntax)._newKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NewKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNewKeyword(newKeyword as SyntaxToken) As ConstructorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, newKeyword, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As ConstructorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.NewKeyword, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As ConstructorStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 5)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As ConstructorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.NewKeyword, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._parameterList
                Case 5
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.ParameterList
                Case 5
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitConstructorStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitConstructorStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ConstructorStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this ConstructorStatementSyntaxSyntax node with.
        ''' If not specified the current Attributes will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this ConstructorStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this ConstructorStatementSyntaxSyntax node with. If
        ''' not specified the current Keyword will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="newKeyword">
        ''' The new NewKeyword to update this ConstructorStatementSyntaxSyntax node with.
        ''' If not specified the current NewKeyword will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this ConstructorStatementSyntaxSyntax node
        ''' with. If not specified the current ParameterList will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this ConstructorStatementSyntaxSyntax node with. If
        ''' not specified the current AsClause will be used in the new
        ''' ConstructorStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, newKeyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As ConstructorStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ConstructorStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse newKeyword.Node IsNot green._newKeyword OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.ConstructorStatement(attributes, modifiers, keyword, newKeyword, parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A Declare statement that declares an external DLL method.
    ''' </summary>
    Public NotInheritable Class DeclareStatementSyntax
        Inherits MethodBaseSyntax

        Friend _libraryName as LiteralExpressionSyntax
        Friend _aliasName as LiteralExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, declareKeyword As InternalSyntax.KeywordSyntax, charsetKeyword As InternalSyntax.KeywordSyntax, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, libKeyword As InternalSyntax.KeywordSyntax, libraryName As LiteralExpressionSyntax, aliasKeyword As InternalSyntax.KeywordSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.DeclareStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, declareKeyword, charsetKeyword, keyword, identifier, libKeyword, DirectCast(libraryName.Green, InternalSyntax.LiteralExpressionSyntax), aliasKeyword, if(aliasName IsNot Nothing , DirectCast(aliasName.Green, InternalSyntax.LiteralExpressionSyntax), Nothing) , if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As DeclareStatementSyntax
            return Update(attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As DeclareStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As DeclareStatementSyntax
            return Update(Me.Attributes, modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As DeclareStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Declare" keyword.
        ''' </summary>
        Public  ReadOnly Property DeclareKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._declareKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DeclareKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDeclareKeyword(declareKeyword as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, declareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property CharsetKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._charsetKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CharsetKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCharsetKeyword(charsetKeyword as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, charsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._keyword, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The name of the method being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._identifier, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The "Lib" keyword.
        ''' </summary>
        Public  ReadOnly Property LibKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._libKeyword, Me.GetChildPosition(6), Me.GetChildIndex(6))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LibKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLibKeyword(libKeyword as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, libKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The string literal with the library name.
        ''' </summary>
        Public  ReadOnly Property LibraryName As LiteralExpressionSyntax
            Get
                Return GetRed(Of LiteralExpressionSyntax)(_libraryName, 7)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LibraryName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLibraryName(libraryName as LiteralExpressionSyntax) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, libraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' If present, the "Alias" keyword. If not present, returns Nothing.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AliasKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)._aliasKeyword, Me.GetChildPosition(8), Me.GetChildIndex(8))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AliasKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAliasKeyword(aliasKeyword as SyntaxToken) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, aliasKeyword, Me.AliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AliasName As LiteralExpressionSyntax
            Get
                Return GetRed(Of LiteralExpressionSyntax)(_aliasName, 9)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AliasName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAliasName(aliasName as LiteralExpressionSyntax) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, aliasName, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 10)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As DeclareStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 11)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As DeclareStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DeclareKeyword, Me.CharsetKeyword, Me.Keyword, Me.Identifier, Me.LibKeyword, Me.LibraryName, Me.AliasKeyword, Me.AliasName, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 7
                    Return Me._libraryName
                Case 9
                    Return Me._aliasName
                Case 10
                    Return Me._parameterList
                Case 11
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 7
                    Return Me.LibraryName
                Case 9
                    Return Me.AliasName
                Case 10
                    Return Me.ParameterList
                Case 11
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 12
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDeclareStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDeclareStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DeclareStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this DeclareStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="declareKeyword">
        ''' The new DeclareKeyword to update this DeclareStatementSyntaxSyntax node with.
        ''' If not specified the current DeclareKeyword will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' The new CharsetKeyword to update this DeclareStatementSyntaxSyntax node with.
        ''' If not specified the current CharsetKeyword will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this DeclareStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="libKeyword">
        ''' The new LibKeyword to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current LibKeyword will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="libraryName">
        ''' The new LibraryName to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current LibraryName will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="aliasKeyword">
        ''' The new AliasKeyword to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current AliasKeyword will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="aliasName">
        ''' The new AliasName to update this DeclareStatementSyntaxSyntax node with. If not
        ''' specified the current AliasName will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this DeclareStatementSyntaxSyntax node with. If
        ''' not specified the current ParameterList will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this DeclareStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' DeclareStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DeclareStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse declareKeyword.Node IsNot green._declareKeyword OrElse charsetKeyword.Node IsNot green._charsetKeyword OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse libKeyword.Node IsNot green._libKeyword OrElse libraryName IsNot Me._libraryName OrElse aliasKeyword.Node IsNot green._aliasKeyword OrElse aliasName IsNot Me._aliasName OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.DeclareStatement(Me.Kind, attributes, modifiers, declareKeyword, charsetKeyword, keyword, identifier, libKeyword, libraryName, aliasKeyword, aliasName, parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A statement that declares a delegate type.
    ''' </summary>
    Public NotInheritable Class DelegateStatementSyntax
        Inherits MethodBaseSyntax

        Friend _typeParameterList as TypeParameterListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, delegateKeyword As InternalSyntax.KeywordSyntax, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.DelegateStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, delegateKeyword, keyword, identifier, if(typeParameterList IsNot Nothing , DirectCast(typeParameterList.Green, InternalSyntax.TypeParameterListSyntax), Nothing) , if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As DelegateStatementSyntax
            return Update(attributes, Me.Modifiers, Me.DelegateKeyword, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As DelegateStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.DelegateStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As DelegateStatementSyntax
            return Update(Me.Attributes, modifiers, Me.DelegateKeyword, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As DelegateStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The "Delegate" keyword.
        ''' </summary>
        Public  ReadOnly Property DelegateKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DelegateStatementSyntax)._delegateKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DelegateKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDelegateKeyword(delegateKeyword as SyntaxToken) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, delegateKeyword, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DelegateStatementSyntax)._keyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DelegateKeyword, keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The name of the delegate being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DelegateStatementSyntax)._identifier, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DelegateKeyword, Me.Keyword, identifier, Me.TypeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property TypeParameterList As TypeParameterListSyntax
            Get
                Return GetRed(Of TypeParameterListSyntax)(_typeParameterList, 5)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TypeParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeParameterList(typeParameterList as TypeParameterListSyntax) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DelegateKeyword, Me.Keyword, Me.Identifier, typeParameterList, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddTypeParameterListParameters(ParamArray items As TypeParameterSyntax()) As DelegateStatementSyntax
            Dim _child = If (Me.TypeParameterList IsNot Nothing, Me.TypeParameterList, Syntax.TypeParameterList())
            Return Me.WithTypeParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 6)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DelegateKeyword, Me.Keyword, Me.Identifier, Me.TypeParameterList, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As DelegateStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 7)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As DelegateStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.DelegateKeyword, Me.Keyword, Me.Identifier, Me.TypeParameterList, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 5
                    Return Me._typeParameterList
                Case 6
                    Return Me._parameterList
                Case 7
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 5
                    Return Me.TypeParameterList
                Case 6
                    Return Me.ParameterList
                Case 7
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 8
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDelegateStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDelegateStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DelegateStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this DelegateStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this DelegateStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="delegateKeyword">
        ''' The new DelegateKeyword to update this DelegateStatementSyntaxSyntax node with.
        ''' If not specified the current DelegateKeyword will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this DelegateStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this DelegateStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' The new TypeParameterList to update this DelegateStatementSyntaxSyntax node
        ''' with. If not specified the current TypeParameterList will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this DelegateStatementSyntaxSyntax node with.
        ''' If not specified the current ParameterList will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this DelegateStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' DelegateStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DelegateStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse delegateKeyword.Node IsNot green._delegateKeyword OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse typeParameterList IsNot Me._typeParameterList OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.DelegateStatement(Me.Kind, attributes, modifiers, delegateKeyword, keyword, identifier, typeParameterList, parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A statement that declares an event. If the event being declared is a custom
    ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
    ''' accessors will be part of the Accessors of that node.
    ''' </summary>
    Public NotInheritable Class EventStatementSyntax
        Inherits MethodBaseSyntax

        Friend _implementsClause as ImplementsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, customKeyword As InternalSyntax.KeywordSyntax, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, implementsClause As ImplementsClauseSyntax)
            Me.New(New InternalSyntax.EventStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, customKeyword, keyword, identifier, if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) , if(implementsClause IsNot Nothing , DirectCast(implementsClause.Green, InternalSyntax.ImplementsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As EventStatementSyntax
            return Update(attributes, Me.Modifiers, Me.CustomKeyword, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As EventStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.EventStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As EventStatementSyntax
            return Update(Me.Attributes, modifiers, Me.CustomKeyword, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As EventStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The optional Custom keyword for custom event declarations.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property CustomKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EventStatementSyntax)._customKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CustomKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCustomKeyword(customKeyword as SyntaxToken) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, customKeyword, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EventStatementSyntax)._keyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.CustomKeyword, keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The name of the event being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EventStatementSyntax)._identifier, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.CustomKeyword, Me.Keyword, identifier, Me.ParameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 5)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.CustomKeyword, Me.Keyword, Me.Identifier, parameterList, Me.AsClause, Me.ImplementsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As EventStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 6)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.CustomKeyword, Me.Keyword, Me.Identifier, Me.ParameterList, asClause, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' If present, an Implements clause indicates the interface methods that this
        ''' method implements.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ImplementsClause As ImplementsClauseSyntax
            Get
                Return GetRed(Of ImplementsClauseSyntax)(_implementsClause, 7)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImplementsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplementsClause(implementsClause as ImplementsClauseSyntax) As EventStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.CustomKeyword, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, implementsClause)
        End Function

        Public Shadows Function AddImplementsClauseInterfaceMembers(ParamArray items As QualifiedNameSyntax()) As EventStatementSyntax
            Dim _child = If (Me.ImplementsClause IsNot Nothing, Me.ImplementsClause, Syntax.ImplementsClause())
            Return Me.WithImplementsClause(_child.AddInterfaceMembers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 5
                    Return Me._parameterList
                Case 6
                    Return Me._asClause
                Case 7
                    Return Me._implementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 5
                    Return Me.ParameterList
                Case 6
                    Return Me.AsClause
                Case 7
                    Return Me.ImplementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 8
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEventStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEventStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EventStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this EventStatementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this EventStatementSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="customKeyword">
        ''' The new CustomKeyword to update this EventStatementSyntaxSyntax node with. If
        ''' not specified the current CustomKeyword will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this EventStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this EventStatementSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this EventStatementSyntaxSyntax node with. If
        ''' not specified the current ParameterList will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this EventStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="implementsClause">
        ''' The new ImplementsClause to update this EventStatementSyntaxSyntax node with.
        ''' If not specified the current ImplementsClause will be used in the new
        ''' EventStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, customKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, implementsClause As ImplementsClauseSyntax) As EventStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EventStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse customKeyword.Node IsNot green._customKeyword OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause OrElse implementsClause IsNot Me._implementsClause Then
                Dim newNode = Syntax.EventStatement(attributes, modifiers, customKeyword, keyword, identifier, parameterList, asClause, implementsClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A statement that declares an operator. If this operator has a body, this
    ''' statement will be the Begin of a BlockStatement with
    ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
    ''' that BlockStatement.
    ''' </summary>
    Public NotInheritable Class OperatorStatementSyntax
        Inherits MethodBaseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, [operator] As InternalSyntax.SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.OperatorStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, [operator], if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As OperatorStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Operator, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As OperatorStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.OperatorStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As OperatorStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Operator, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As OperatorStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OperatorStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As OperatorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Operator, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The operator being defined.
        ''' </summary>
        Public  ReadOnly Property [Operator] As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OperatorStatementSyntax)._operator, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Operator] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperator([operator] as SyntaxToken) As OperatorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, [operator], Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As OperatorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Operator, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As OperatorStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 5)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As OperatorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Operator, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._parameterList
                Case 5
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.ParameterList
                Case 5
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOperatorStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOperatorStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OperatorStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this OperatorStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this OperatorStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this OperatorStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="operator">
        ''' The new Operator to update this OperatorStatementSyntaxSyntax node with. If not
        ''' specified the current Operator will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this OperatorStatementSyntaxSyntax node with.
        ''' If not specified the current ParameterList will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this OperatorStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' OperatorStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, [operator] As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As OperatorStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OperatorStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse [operator].Node IsNot green._operator OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.OperatorStatement(attributes, modifiers, keyword, [operator], parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Statement that declares a property. If this property has accessors declared,
    ''' this statement will be the Begin of a BlockNode, and the accessors will be the
    ''' Body of that node. Auto properties are property declarations without a
    ''' PropertyBlock.
    ''' </summary>
    Public NotInheritable Class PropertyStatementSyntax
        Inherits MethodBaseSyntax

        Friend _initializer as EqualsValueSyntax
        Friend _implementsClause as ImplementsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, identifier As InternalSyntax.IdentifierTokenSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax)
            Me.New(New InternalSyntax.PropertyStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, identifier, if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) , if(initializer IsNot Nothing , DirectCast(initializer.Green, InternalSyntax.EqualsValueSyntax), Nothing) , if(implementsClause IsNot Nothing , DirectCast(implementsClause.Green, InternalSyntax.ImplementsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As PropertyStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.Initializer, Me.ImplementsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As PropertyStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.PropertyStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As PropertyStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.Initializer, Me.ImplementsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As PropertyStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PropertyStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.Initializer, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The name of the property being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PropertyStatementSyntax)._identifier, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, identifier, Me.ParameterList, Me.AsClause, Me.Initializer, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 4)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, parameterList, Me.AsClause, Me.Initializer, Me.ImplementsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As PropertyStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 5)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.ParameterList, asClause, Me.Initializer, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' If present, an "= initial-value" clause describing the initial value of the
        ''' property.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Initializer As EqualsValueSyntax
            Get
                Return GetRed(Of EqualsValueSyntax)(_initializer, 6)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as EqualsValueSyntax) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, initializer, Me.ImplementsClause)
        End Function

        ''' <summary>
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ImplementsClause As ImplementsClauseSyntax
            Get
                Return GetRed(Of ImplementsClauseSyntax)(_implementsClause, 7)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImplementsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplementsClause(implementsClause as ImplementsClauseSyntax) As PropertyStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.Identifier, Me.ParameterList, Me.AsClause, Me.Initializer, implementsClause)
        End Function

        Public Shadows Function AddImplementsClauseInterfaceMembers(ParamArray items As QualifiedNameSyntax()) As PropertyStatementSyntax
            Dim _child = If (Me.ImplementsClause IsNot Nothing, Me.ImplementsClause, Syntax.ImplementsClause())
            Return Me.WithImplementsClause(_child.AddInterfaceMembers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 4
                    Return Me._parameterList
                Case 5
                    Return Me._asClause
                Case 6
                    Return Me._initializer
                Case 7
                    Return Me._implementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 4
                    Return Me.ParameterList
                Case 5
                    Return Me.AsClause
                Case 6
                    Return Me.Initializer
                Case 7
                    Return Me.ImplementsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 8
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPropertyStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPropertyStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PropertyStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this PropertyStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this PropertyStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this PropertyStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this PropertyStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this PropertyStatementSyntaxSyntax node with.
        ''' If not specified the current ParameterList will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this PropertyStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this PropertyStatementSyntaxSyntax node with. If
        ''' not specified the current Initializer will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="implementsClause">
        ''' The new ImplementsClause to update this PropertyStatementSyntaxSyntax node
        ''' with. If not specified the current ImplementsClause will be used in the new
        ''' PropertyStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PropertyStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse identifier.Node IsNot green._identifier OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause OrElse initializer IsNot Me._initializer OrElse implementsClause IsNot Me._implementsClause Then
                Dim newNode = Syntax.PropertyStatement(attributes, modifiers, keyword, identifier, parameterList, asClause, initializer, implementsClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
    ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
    ''' the node determines what kind of accessor this is. This statement is always the
    ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
    ''' </summary>
    Public NotInheritable Class AccessorStatementSyntax
        Inherits MethodBaseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.AccessorStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As AccessorStatementSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As AccessorStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.AccessorStatementSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As AccessorStatementSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As AccessorStatementSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AccessorStatementSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As AccessorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 3)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As AccessorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As AccessorStatementSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 4)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As AccessorStatementSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 3
                    Return Me._parameterList
                Case 4
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 3
                    Return Me.ParameterList
                Case 4
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAccessorStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAccessorStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AccessorStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this AccessorStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' AccessorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this AccessorStatementSyntaxSyntax node with. If
        ''' not specified the current Modifiers will be used in the new
        ''' AccessorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this AccessorStatementSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' AccessorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this AccessorStatementSyntaxSyntax node with.
        ''' If not specified the current ParameterList will be used in the new
        ''' AccessorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this AccessorStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' AccessorStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AccessorStatementSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.AccessorStatement(Me.Kind, attributes, modifiers, keyword, parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Implements ..." clause on a type member, which describes which
    ''' interface members this member implements.
    ''' </summary>
    Public NotInheritable Class ImplementsClauseSyntax
        Inherits SyntaxNode

        Friend _interfaceMembers as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), implementsKeyword As InternalSyntax.KeywordSyntax, interfaceMembers As SyntaxNode)
            Me.New(New InternalSyntax.ImplementsClauseSyntax(kind, errors, annotations, implementsKeyword, if(interfaceMembers IsNot Nothing, interfaceMembers.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Implements" keyword.
        ''' </summary>
        Public  ReadOnly Property ImplementsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ImplementsClauseSyntax)._implementsKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ImplementsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithImplementsKeyword(implementsKeyword as SyntaxToken) As ImplementsClauseSyntax
            return Update(implementsKeyword, Me.InterfaceMembers)
        End Function

        ''' <summary>
        ''' The list of interface members being implemented.
        ''' </summary>
        Public  ReadOnly Property InterfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_interfaceMembers, 1)
                Return new SeparatedSyntaxList(Of QualifiedNameSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the InterfaceMembers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInterfaceMembers(interfaceMembers as SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax
            return Update(Me.ImplementsKeyword, interfaceMembers)
        End Function

        Public Shadows Function AddInterfaceMembers(ParamArray items As QualifiedNameSyntax()) As ImplementsClauseSyntax
            Return Me.WithInterfaceMembers(Me.InterfaceMembers.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._interfaceMembers
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_interfaceMembers, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitImplementsClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitImplementsClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ImplementsClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="implementsKeyword">
        ''' The new ImplementsKeyword to update this ImplementsClauseSyntaxSyntax node
        ''' with. If not specified the current ImplementsKeyword will be used in the new
        ''' ImplementsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="interfaceMembers">
        ''' The new InterfaceMembers to update this ImplementsClauseSyntaxSyntax node with.
        ''' If not specified the current InterfaceMembers will be used in the new
        ''' ImplementsClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(implementsKeyword As SyntaxToken, interfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ImplementsClauseSyntax)
            If implementsKeyword.Node IsNot green._implementsKeyword OrElse interfaceMembers <> Me.InterfaceMembers Then
                Dim newNode = Syntax.ImplementsClause(implementsKeyword, interfaceMembers)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Handles ..." clause on a method declaration that describes
    ''' which events this method handles.
    ''' </summary>
    Public NotInheritable Class HandlesClauseSyntax
        Inherits SyntaxNode

        Friend _events as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), handlesKeyword As InternalSyntax.KeywordSyntax, events As SyntaxNode)
            Me.New(New InternalSyntax.HandlesClauseSyntax(kind, errors, annotations, handlesKeyword, if(events IsNot Nothing, events.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Handles" keyword.
        ''' </summary>
        Public  ReadOnly Property HandlesKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.HandlesClauseSyntax)._handlesKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the HandlesKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHandlesKeyword(handlesKeyword as SyntaxToken) As HandlesClauseSyntax
            return Update(handlesKeyword, Me.Events)
        End Function

        ''' <summary>
        ''' The list of event members being handled.
        ''' </summary>
        Public  ReadOnly Property Events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_events, 1)
                Return new SeparatedSyntaxList(Of HandlesClauseItemSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Events property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function [WithEvents](events as SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax
            return Update(Me.HandlesKeyword, events)
        End Function

        Public Shadows Function AddEvents(ParamArray items As HandlesClauseItemSyntax()) As HandlesClauseSyntax
            Return Me.WithEvents(Me.Events.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._events
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_events, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitHandlesClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitHandlesClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new HandlesClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="handlesKeyword">
        ''' The new HandlesKeyword to update this HandlesClauseSyntaxSyntax node with. If
        ''' not specified the current HandlesKeyword will be used in the new
        ''' HandlesClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="events">
        ''' The new Events to update this HandlesClauseSyntaxSyntax node with. If not
        ''' specified the current Events will be used in the new HandlesClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(handlesKeyword As SyntaxToken, events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.HandlesClauseSyntax)
            If handlesKeyword.Node IsNot green._handlesKeyword OrElse events <> Me.Events Then
                Dim newNode = Syntax.HandlesClause(handlesKeyword, events)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a single handled event in a "Handles ..." clause.
    ''' </summary>
    Public NotInheritable Class HandlesClauseItemSyntax
        Inherits SyntaxNode

        Friend _eventMember as IdentifierNameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), eventContainer As InternalSyntax.SyntaxToken, dotToken As InternalSyntax.PunctuationSyntax, eventMember As IdentifierNameSyntax)
            Me.New(New InternalSyntax.HandlesClauseItemSyntax(kind, errors, annotations, eventContainer, dotToken, DirectCast(eventMember.Green, InternalSyntax.IdentifierNameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The container of the event. This can either be an simple identifier
        ''' (identifying a members of the containing type) or one of the special keywords
        ''' "Me", "MyBase" or "MyClass".
        ''' </summary>
        Public  ReadOnly Property EventContainer As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.HandlesClauseItemSyntax)._eventContainer, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EventContainer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEventContainer(eventContainer as SyntaxToken) As HandlesClauseItemSyntax
            return Update(eventContainer, Me.DotToken, Me.EventMember)
        End Function

        ''' <summary>
        ''' The "." token.
        ''' </summary>
        Public  ReadOnly Property DotToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.HandlesClauseItemSyntax)._dotToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DotToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDotToken(dotToken as SyntaxToken) As HandlesClauseItemSyntax
            return Update(Me.EventContainer, dotToken, Me.EventMember)
        End Function

        ''' <summary>
        ''' The event being handled. This must be a simple identifier.
        ''' </summary>
        Public  ReadOnly Property EventMember As IdentifierNameSyntax
            Get
                Return GetRed(Of IdentifierNameSyntax)(_eventMember, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EventMember property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEventMember(eventMember as IdentifierNameSyntax) As HandlesClauseItemSyntax
            return Update(Me.EventContainer, Me.DotToken, eventMember)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._eventMember
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.EventMember
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitHandlesClauseItem(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitHandlesClauseItem(Me)
        End Sub


        ''' <summary>
        ''' Creates a new HandlesClauseItemSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="eventContainer">
        ''' The new EventContainer to update this HandlesClauseItemSyntaxSyntax node with.
        ''' If not specified the current EventContainer will be used in the new
        ''' HandlesClauseItemSyntaxSyntax node.
        ''' </param>
        ''' <param name="dotToken">
        ''' The new DotToken to update this HandlesClauseItemSyntaxSyntax node with. If not
        ''' specified the current DotToken will be used in the new
        ''' HandlesClauseItemSyntaxSyntax node.
        ''' </param>
        ''' <param name="eventMember">
        ''' The new EventMember to update this HandlesClauseItemSyntaxSyntax node with. If
        ''' not specified the current EventMember will be used in the new
        ''' HandlesClauseItemSyntaxSyntax node.
        ''' </param>
        Public Function Update(eventContainer As SyntaxToken, dotToken As SyntaxToken, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.HandlesClauseItemSyntax)
            If eventContainer.Node IsNot green._eventContainer OrElse dotToken.Node IsNot green._dotToken OrElse eventMember IsNot Me._eventMember Then
                Dim newNode = Syntax.HandlesClauseItem(eventContainer, dotToken, eventMember)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning of a declaration. However, not enough syntax is
    ''' detected to classify this as a field, method, property or event. This is node
    ''' always represents a syntax error.
    ''' </summary>
    Public NotInheritable Class IncompleteMemberSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, missingIdentifier As InternalSyntax.IdentifierTokenSyntax)
            Me.New(New InternalSyntax.IncompleteMemberSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, missingIdentifier), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As IncompleteMemberSyntax
            return Update(attributes, Me.Modifiers, Me.MissingIdentifier)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As IncompleteMemberSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.IncompleteMemberSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As IncompleteMemberSyntax
            return Update(Me.Attributes, modifiers, Me.MissingIdentifier)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As IncompleteMemberSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The missing identifier token for this incomplete member. Should only be used to
        ''' have a location for error reporting.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property MissingIdentifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IncompleteMemberSyntax)._missingIdentifier, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the MissingIdentifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMissingIdentifier(missingIdentifier as SyntaxToken) As IncompleteMemberSyntax
            return Update(Me.Attributes, Me.Modifiers, missingIdentifier)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitIncompleteMember(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitIncompleteMember(Me)
        End Sub


        ''' <summary>
        ''' Creates a new IncompleteMemberSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this IncompleteMemberSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' IncompleteMemberSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this IncompleteMemberSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' IncompleteMemberSyntaxSyntax node.
        ''' </param>
        ''' <param name="missingIdentifier">
        ''' The new MissingIdentifier to update this IncompleteMemberSyntaxSyntax node
        ''' with. If not specified the current MissingIdentifier will be used in the new
        ''' IncompleteMemberSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, missingIdentifier As SyntaxToken) As IncompleteMemberSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.IncompleteMemberSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse missingIdentifier.Node IsNot green._missingIdentifier Then
                Dim newNode = Syntax.IncompleteMember(attributes, modifiers, missingIdentifier)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the declaration of one or more variables or constants, either as
    ''' local variables or as class/structure members. In the case of a constant, it is
    ''' represented by having "Const" in the Modifiers (although technically "Const" is
    ''' not a modifier, it is represented as one in the parse trees.)
    ''' </summary>
    Public NotInheritable Class FieldDeclarationSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode
        Friend _declarators as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, declarators As SyntaxNode)
            Me.New(New InternalSyntax.FieldDeclarationSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, if(declarators IsNot Nothing, declarators.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As FieldDeclarationSyntax
            return Update(attributes, Me.Modifiers, Me.Declarators)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As FieldDeclarationSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.FieldDeclarationSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As FieldDeclarationSyntax
            return Update(Me.Attributes, modifiers, Me.Declarators)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As FieldDeclarationSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </summary>
        Public  ReadOnly Property Declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_declarators, 2)
                Return new SeparatedSyntaxList(Of VariableDeclaratorSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Declarators property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDeclarators(declarators as SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax
            return Update(Me.Attributes, Me.Modifiers, declarators)
        End Function

        Public Shadows Function AddDeclarators(ParamArray items As VariableDeclaratorSyntax()) As FieldDeclarationSyntax
            Return Me.WithDeclarators(Me.Declarators.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 2
                    Return Me._declarators
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 2
                    Return GetRed(Of SyntaxNode)(_declarators, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitFieldDeclaration(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitFieldDeclaration(Me)
        End Sub


        ''' <summary>
        ''' Creates a new FieldDeclarationSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this FieldDeclarationSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' FieldDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this FieldDeclarationSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' FieldDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="declarators">
        ''' The new Declarators to update this FieldDeclarationSyntaxSyntax node with. If
        ''' not specified the current Declarators will be used in the new
        ''' FieldDeclarationSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.FieldDeclarationSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse declarators <> Me.Declarators Then
                Dim newNode = Syntax.FieldDeclaration(attributes, modifiers, declarators)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the part of a variable or constant declaration statement that
    ''' associated one or more variable names with a type.
    ''' </summary>
    Public NotInheritable Class VariableDeclaratorSyntax
        Inherits SyntaxNode

        Friend _names as SyntaxNode
        Friend _asClause as AsClauseSyntax
        Friend _initializer as EqualsValueSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), names As SyntaxNode, asClause As AsClauseSyntax, initializer As EqualsValueSyntax)
            Me.New(New InternalSyntax.VariableDeclaratorSyntax(kind, errors, annotations, if(names IsNot Nothing, names.Green, Nothing), if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) , if(initializer IsNot Nothing , DirectCast(initializer.Green, InternalSyntax.EqualsValueSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The names of the variables being declared. Each name might have a "?" or "()"
        ''' modifier(s) attached.
        ''' </summary>
        Public  ReadOnly Property Names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_names, 0)
                Return new SeparatedSyntaxList(Of ModifiedIdentifierSyntax)(listNode, GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Names property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNames(names as SeparatedSyntaxList(Of ModifiedIdentifierSyntax)) As VariableDeclaratorSyntax
            return Update(names, Me.AsClause, Me.Initializer)
        End Function

        Public Shadows Function AddNames(ParamArray items As ModifiedIdentifierSyntax()) As VariableDeclaratorSyntax
            Return Me.WithNames(Me.Names.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type, and possibly includes "New",
        ''' "With" or "From". If no As clause was present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As VariableDeclaratorSyntax
            return Update(Me.Names, asClause, Me.Initializer)
        End Function

        ''' <summary>
        ''' If present, an "= initial-value" clause describing the initial value of the
        ''' variable or the value of the constant.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Initializer As EqualsValueSyntax
            Get
                Return GetRed(Of EqualsValueSyntax)(_initializer, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as EqualsValueSyntax) As VariableDeclaratorSyntax
            return Update(Me.Names, Me.AsClause, initializer)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._names
                Case 1
                    Return Me._asClause
                Case 2
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_names, 0)
                Case 1
                    Return Me.AsClause
                Case 2
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitVariableDeclarator(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitVariableDeclarator(Me)
        End Sub


        ''' <summary>
        ''' Creates a new VariableDeclaratorSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="names">
        ''' The new Names to update this VariableDeclaratorSyntaxSyntax node with. If not
        ''' specified the current Names will be used in the new
        ''' VariableDeclaratorSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this VariableDeclaratorSyntaxSyntax node with. If
        ''' not specified the current AsClause will be used in the new
        ''' VariableDeclaratorSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this VariableDeclaratorSyntaxSyntax node with. If
        ''' not specified the current Initializer will be used in the new
        ''' VariableDeclaratorSyntaxSyntax node.
        ''' </param>
        Public Function Update(names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax), asClause As AsClauseSyntax, initializer As EqualsValueSyntax) As VariableDeclaratorSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.VariableDeclaratorSyntax)
            If names <> Me.Names OrElse asClause IsNot Me._asClause OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.VariableDeclarator(names, asClause, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract node class that represents the different kinds of "As {type-name}"
    ''' clauses in a declaration: simple "As" clauses and "As New" clauses. The type
    ''' has optional attributes associated with it, although attributes are not
    ''' permitted in all possible places where this node occurs.
    ''' </summary>
    Public MustInherit Class AsClauseSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The "As" keyword.
        ''' </summary>
        Public ReadOnly Property AsKeyword As SyntaxToken
            Get
                Return Me.GetAsKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetAsKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AsClauseSyntax)._asKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


    End Class

    ''' <summary>
    ''' Represents an "As {type-name}" clause that does not have an initializer or
    ''' "New". The type has optional attributes associated with it, although attributes
    ''' are not permitted in all possible places where this node occurs.
    ''' </summary>
    Public NotInheritable Class SimpleAsClauseSyntax
        Inherits AsClauseSyntax

        Friend _attributes as SyntaxNode
        Friend _type as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), asKeyword As InternalSyntax.KeywordSyntax, attributes As SyntaxNode, type As TypeSyntax)
            Me.New(New InternalSyntax.SimpleAsClauseSyntax(kind, errors, annotations, asKeyword, if(attributes IsNot Nothing, attributes.Green, Nothing), DirectCast(type.Green, InternalSyntax.TypeSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "As" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property AsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SimpleAsClauseSyntax)._asKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetAsKeywordCore() As SyntaxToken
            Return Me.AsKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsKeyword(asKeyword as SyntaxToken) As SimpleAsClauseSyntax
            return Update(asKeyword, Me.Attributes, Me.Type)
        End Function

        ''' <summary>
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As SimpleAsClauseSyntax
            return Update(Me.AsKeyword, attributes, Me.Type)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As SimpleAsClauseSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' The type-name part of the As clause.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As SimpleAsClauseSyntax
            return Update(Me.AsKeyword, Me.Attributes, type)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._attributes
                Case 2
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_attributes, 1)
                Case 2
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSimpleAsClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSimpleAsClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SimpleAsClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The new AsKeyword to update this SimpleAsClauseSyntaxSyntax node with. If not
        ''' specified the current AsKeyword will be used in the new
        ''' SimpleAsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this SimpleAsClauseSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' SimpleAsClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this SimpleAsClauseSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new SimpleAsClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(asKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax) As SimpleAsClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SimpleAsClauseSyntax)
            If asKeyword.Node IsNot green._asKeyword OrElse attributes <> Me.Attributes OrElse type IsNot Me._type Then
                Dim newNode = Syntax.SimpleAsClause(asKeyword, attributes, type)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an "As New {type-name} [arguments] [initializers]" clause in a
    ''' declaration. The type has optional attributes associated with it, although
    ''' attributes are not permitted in many places where this node occurs (they are
    ''' permitted, for example, on automatically implemented properties.)
    ''' </summary>
    Public NotInheritable Class AsNewClauseSyntax
        Inherits AsClauseSyntax

        Friend _newExpression as NewExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), asKeyword As InternalSyntax.KeywordSyntax, newExpression As NewExpressionSyntax)
            Me.New(New InternalSyntax.AsNewClauseSyntax(kind, errors, annotations, asKeyword, DirectCast(newExpression.Green, InternalSyntax.NewExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "As" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property AsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AsNewClauseSyntax)._asKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetAsKeywordCore() As SyntaxToken
            Return Me.AsKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsKeyword(asKeyword as SyntaxToken) As AsNewClauseSyntax
            return Update(asKeyword, Me.NewExpression)
        End Function

        ''' <summary>
        ''' The New expression
        ''' </summary>
        Public  ReadOnly Property NewExpression As NewExpressionSyntax
            Get
                Return GetRed(Of NewExpressionSyntax)(_newExpression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NewExpression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNewExpression(newExpression as NewExpressionSyntax) As AsNewClauseSyntax
            return Update(Me.AsKeyword, newExpression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._newExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.NewExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAsNewClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAsNewClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AsNewClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The new AsKeyword to update this AsNewClauseSyntaxSyntax node with. If not
        ''' specified the current AsKeyword will be used in the new AsNewClauseSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="newExpression">
        ''' The new NewExpression to update this AsNewClauseSyntaxSyntax node with. If not
        ''' specified the current NewExpression will be used in the new
        ''' AsNewClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(asKeyword As SyntaxToken, newExpression As NewExpressionSyntax) As AsNewClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AsNewClauseSyntax)
            If asKeyword.Node IsNot green._asKeyword OrElse newExpression IsNot Me._newExpression Then
                Dim newNode = Syntax.AsNewClause(asKeyword, newExpression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An abstract node class that represents a "With" or "From" clause used to
    ''' initializer an new object.
    ''' </summary>
    Public MustInherit Class ObjectCreationInitializerSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents a "With {...} clause used to initialize a new object's members.
    ''' </summary>
    Public NotInheritable Class ObjectMemberInitializerSyntax
        Inherits ObjectCreationInitializerSyntax

        Friend _initializers as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), withKeyword As InternalSyntax.KeywordSyntax, openBraceToken As InternalSyntax.PunctuationSyntax, initializers As SyntaxNode, closeBraceToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ObjectMemberInitializerSyntax(kind, errors, annotations, withKeyword, openBraceToken, if(initializers IsNot Nothing, initializers.Green, Nothing), closeBraceToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "With" keyword.
        ''' </summary>
        Public  ReadOnly Property WithKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ObjectMemberInitializerSyntax)._withKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WithKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWithKeyword(withKeyword as SyntaxToken) As ObjectMemberInitializerSyntax
            return Update(withKeyword, Me.OpenBraceToken, Me.Initializers, Me.CloseBraceToken)
        End Function

        ''' <summary>
        ''' The "{" token.
        ''' </summary>
        Public  ReadOnly Property OpenBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ObjectMemberInitializerSyntax)._openBraceToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenBraceToken(openBraceToken as SyntaxToken) As ObjectMemberInitializerSyntax
            return Update(Me.WithKeyword, openBraceToken, Me.Initializers, Me.CloseBraceToken)
        End Function

        ''' <summary>
        ''' The comma-separated list of field initializers.
        ''' </summary>
        Public  ReadOnly Property Initializers As SeparatedSyntaxList(Of FieldInitializerSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_initializers, 2)
                Return new SeparatedSyntaxList(Of FieldInitializerSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializers(initializers as SeparatedSyntaxList(Of FieldInitializerSyntax)) As ObjectMemberInitializerSyntax
            return Update(Me.WithKeyword, Me.OpenBraceToken, initializers, Me.CloseBraceToken)
        End Function

        Public Shadows Function AddInitializers(ParamArray items As FieldInitializerSyntax()) As ObjectMemberInitializerSyntax
            Return Me.WithInitializers(Me.Initializers.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "}" token.
        ''' </summary>
        Public  ReadOnly Property CloseBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ObjectMemberInitializerSyntax)._closeBraceToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseBraceToken(closeBraceToken as SyntaxToken) As ObjectMemberInitializerSyntax
            return Update(Me.WithKeyword, Me.OpenBraceToken, Me.Initializers, closeBraceToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._initializers
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_initializers, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitObjectMemberInitializer(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitObjectMemberInitializer(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ObjectMemberInitializerSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="withKeyword">
        ''' The new WithKeyword to update this ObjectMemberInitializerSyntaxSyntax node
        ''' with. If not specified the current WithKeyword will be used in the new
        ''' ObjectMemberInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="openBraceToken">
        ''' The new OpenBraceToken to update this ObjectMemberInitializerSyntaxSyntax node
        ''' with. If not specified the current OpenBraceToken will be used in the new
        ''' ObjectMemberInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializers">
        ''' The new Initializers to update this ObjectMemberInitializerSyntaxSyntax node
        ''' with. If not specified the current Initializers will be used in the new
        ''' ObjectMemberInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The new CloseBraceToken to update this ObjectMemberInitializerSyntaxSyntax node
        ''' with. If not specified the current CloseBraceToken will be used in the new
        ''' ObjectMemberInitializerSyntaxSyntax node.
        ''' </param>
        Public Function Update(withKeyword As SyntaxToken, openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of FieldInitializerSyntax), closeBraceToken As SyntaxToken) As ObjectMemberInitializerSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ObjectMemberInitializerSyntax)
            If withKeyword.Node IsNot green._withKeyword OrElse openBraceToken.Node IsNot green._openBraceToken OrElse initializers <> Me.Initializers OrElse closeBraceToken.Node IsNot green._closeBraceToken Then
                Dim newNode = Syntax.ObjectMemberInitializer(withKeyword, openBraceToken, initializers, closeBraceToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "From {...} clause used to initialize a new collection object's
    ''' elements.
    ''' </summary>
    Public NotInheritable Class ObjectCollectionInitializerSyntax
        Inherits ObjectCreationInitializerSyntax

        Friend _initializer as CollectionInitializerSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), fromKeyword As InternalSyntax.KeywordSyntax, initializer As CollectionInitializerSyntax)
            Me.New(New InternalSyntax.ObjectCollectionInitializerSyntax(kind, errors, annotations, fromKeyword, DirectCast(initializer.Green, InternalSyntax.CollectionInitializerSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "From" keyword.
        ''' </summary>
        Public  ReadOnly Property FromKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ObjectCollectionInitializerSyntax)._fromKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FromKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFromKeyword(fromKeyword as SyntaxToken) As ObjectCollectionInitializerSyntax
            return Update(fromKeyword, Me.Initializer)
        End Function

        ''' <summary>
        ''' The initializer including the braces.
        ''' </summary>
        Public  ReadOnly Property Initializer As CollectionInitializerSyntax
            Get
                Return GetRed(Of CollectionInitializerSyntax)(_initializer, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax
            return Update(Me.FromKeyword, initializer)
        End Function

        Public Shadows Function AddInitializerInitializers(ParamArray items As ExpressionSyntax()) As ObjectCollectionInitializerSyntax
            Dim _child = If (Me.Initializer IsNot Nothing, Me.Initializer, Syntax.CollectionInitializer())
            Return Me.WithInitializer(_child.AddInitializers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitObjectCollectionInitializer(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitObjectCollectionInitializer(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ObjectCollectionInitializerSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="fromKeyword">
        ''' The new FromKeyword to update this ObjectCollectionInitializerSyntaxSyntax node
        ''' with. If not specified the current FromKeyword will be used in the new
        ''' ObjectCollectionInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this ObjectCollectionInitializerSyntaxSyntax node
        ''' with. If not specified the current Initializer will be used in the new
        ''' ObjectCollectionInitializerSyntaxSyntax node.
        ''' </param>
        Public Function Update(fromKeyword As SyntaxToken, initializer As CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ObjectCollectionInitializerSyntax)
            If fromKeyword.Node IsNot green._fromKeyword OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.ObjectCollectionInitializer(fromKeyword, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract class that represent a single field initializer used in a "With {...}"
    ''' field initializer list.
    ''' </summary>
    Public MustInherit Class FieldInitializerSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The optional "Key" keyword.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public ReadOnly Property KeyKeyword As SyntaxToken
            Get
                Return Me.GetKeyKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetKeyKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FieldInitializerSyntax)._keyKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


    End Class

    ''' <summary>
    ''' Represent a field initializer in a With {...} initializer where the field name
    ''' is inferred from the initializer expression.
    ''' </summary>
    Public NotInheritable Class InferredFieldInitializerSyntax
        Inherits FieldInitializerSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.InferredFieldInitializerSyntax(kind, errors, annotations, keyKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The optional "Key" keyword.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property KeyKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InferredFieldInitializerSyntax)._keyKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeyKeywordCore() As SyntaxToken
            Return Me.KeyKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the KeyKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyKeyword(keyKeyword as SyntaxToken) As InferredFieldInitializerSyntax
            return Update(keyKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The value being assigned.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As InferredFieldInitializerSyntax
            return Update(Me.KeyKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitInferredFieldInitializer(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitInferredFieldInitializer(Me)
        End Sub


        ''' <summary>
        ''' Creates a new InferredFieldInitializerSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="keyKeyword">
        ''' The new KeyKeyword to update this InferredFieldInitializerSyntaxSyntax node
        ''' with. If not specified the current KeyKeyword will be used in the new
        ''' InferredFieldInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this InferredFieldInitializerSyntaxSyntax node
        ''' with. If not specified the current Expression will be used in the new
        ''' InferredFieldInitializerSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyKeyword As SyntaxToken, expression As ExpressionSyntax) As InferredFieldInitializerSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.InferredFieldInitializerSyntax)
            If keyKeyword.Node IsNot green._keyKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.InferredFieldInitializer(keyKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represent a named field initializer in a With {...} initializer, such as ".x =
    ''' expr".
    ''' </summary>
    Public NotInheritable Class NamedFieldInitializerSyntax
        Inherits FieldInitializerSyntax

        Friend _identifier as IdentifierNameSyntax
        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyKeyword As InternalSyntax.KeywordSyntax, dotToken As InternalSyntax.PunctuationSyntax, identifier As IdentifierNameSyntax, equalsToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.NamedFieldInitializerSyntax(kind, errors, annotations, keyKeyword, dotToken, DirectCast(identifier.Green, InternalSyntax.IdentifierNameSyntax), equalsToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The optional "Key" keyword.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property KeyKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamedFieldInitializerSyntax)._keyKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeyKeywordCore() As SyntaxToken
            Return Me.KeyKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the KeyKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyKeyword(keyKeyword as SyntaxToken) As NamedFieldInitializerSyntax
            return Update(keyKeyword, Me.DotToken, Me.Identifier, Me.EqualsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The "." token.
        ''' </summary>
        Public  ReadOnly Property DotToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamedFieldInitializerSyntax)._dotToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DotToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDotToken(dotToken as SyntaxToken) As NamedFieldInitializerSyntax
            return Update(Me.KeyKeyword, dotToken, Me.Identifier, Me.EqualsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The name of the field being initialized.
        ''' </summary>
        Public  ReadOnly Property Identifier As IdentifierNameSyntax
            Get
                Return GetRed(Of IdentifierNameSyntax)(_identifier, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as IdentifierNameSyntax) As NamedFieldInitializerSyntax
            return Update(Me.KeyKeyword, Me.DotToken, identifier, Me.EqualsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The "=" token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamedFieldInitializerSyntax)._equalsToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As NamedFieldInitializerSyntax
            return Update(Me.KeyKeyword, Me.DotToken, Me.Identifier, equalsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The value being assigned to the field.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As NamedFieldInitializerSyntax
            return Update(Me.KeyKeyword, Me.DotToken, Me.Identifier, Me.EqualsToken, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._identifier
                Case 4
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Identifier
                Case 4
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNamedFieldInitializer(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNamedFieldInitializer(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NamedFieldInitializerSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="keyKeyword">
        ''' The new KeyKeyword to update this NamedFieldInitializerSyntaxSyntax node with.
        ''' If not specified the current KeyKeyword will be used in the new
        ''' NamedFieldInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="dotToken">
        ''' The new DotToken to update this NamedFieldInitializerSyntaxSyntax node with. If
        ''' not specified the current DotToken will be used in the new
        ''' NamedFieldInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this NamedFieldInitializerSyntaxSyntax node with.
        ''' If not specified the current Identifier will be used in the new
        ''' NamedFieldInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this NamedFieldInitializerSyntaxSyntax node with.
        ''' If not specified the current EqualsToken will be used in the new
        ''' NamedFieldInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this NamedFieldInitializerSyntaxSyntax node with.
        ''' If not specified the current Expression will be used in the new
        ''' NamedFieldInitializerSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyKeyword As SyntaxToken, dotToken As SyntaxToken, identifier As IdentifierNameSyntax, equalsToken As SyntaxToken, expression As ExpressionSyntax) As NamedFieldInitializerSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NamedFieldInitializerSyntax)
            If keyKeyword.Node IsNot green._keyKeyword OrElse dotToken.Node IsNot green._dotToken OrElse identifier IsNot Me._identifier OrElse equalsToken.Node IsNot green._equalsToken OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.NamedFieldInitializer(keyKeyword, dotToken, identifier, equalsToken, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an "= initializer" clause in a declaration for a variable,
    ''' pararameter or automatic property.
    ''' </summary>
    Public NotInheritable Class EqualsValueSyntax
        Inherits SyntaxNode

        Friend _value as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), equalsToken As InternalSyntax.PunctuationSyntax, value As ExpressionSyntax)
            Me.New(New InternalSyntax.EqualsValueSyntax(kind, errors, annotations, equalsToken, DirectCast(value.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "=" token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EqualsValueSyntax)._equalsToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As EqualsValueSyntax
            return Update(equalsToken, Me.Value)
        End Function

        ''' <summary>
        ''' The expression used as the initial value.
        ''' </summary>
        Public  ReadOnly Property Value As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_value, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as ExpressionSyntax) As EqualsValueSyntax
            return Update(Me.EqualsToken, value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEqualsValue(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEqualsValue(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EqualsValueSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this EqualsValueSyntaxSyntax node with. If not
        ''' specified the current EqualsToken will be used in the new
        ''' EqualsValueSyntaxSyntax node.
        ''' </param>
        ''' <param name="value">
        ''' The new Value to update this EqualsValueSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new EqualsValueSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(equalsToken As SyntaxToken, value As ExpressionSyntax) As EqualsValueSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EqualsValueSyntax)
            If equalsToken.Node IsNot green._equalsToken OrElse value IsNot Me._value Then
                Dim newNode = Syntax.EqualsValue(equalsToken, value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represent a parameter to a method, property, constructor, etc.
    ''' </summary>
    Public NotInheritable Class ParameterSyntax
        Inherits SyntaxNode

        Friend _attributes as SyntaxNode
        Friend _identifier as ModifiedIdentifierSyntax
        Friend _asClause as SimpleAsClauseSyntax
        Friend _default as EqualsValueSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, [default] As EqualsValueSyntax)
            Me.New(New InternalSyntax.ParameterSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, DirectCast(identifier.Green, InternalSyntax.ModifiedIdentifierSyntax), if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.SimpleAsClauseSyntax), Nothing) , if([default] IsNot Nothing , DirectCast([default].Green, InternalSyntax.EqualsValueSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this parameter. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ParameterSyntax
            return Update(attributes, Me.Modifiers, Me.Identifier, Me.AsClause, Me.Default)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ParameterSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of the modifier tokens "ByVal", "ByRef", "Optional" or "ParamArray" that
        ''' modify this parameter.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.ParameterSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As ParameterSyntax
            return Update(Me.Attributes, modifiers, Me.Identifier, Me.AsClause, Me.Default)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As ParameterSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The name of the parameter, including any "?" or "()" modifiers.
        ''' </summary>
        Public  ReadOnly Property Identifier As ModifiedIdentifierSyntax
            Get
                Return GetRed(Of ModifiedIdentifierSyntax)(_identifier, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as ModifiedIdentifierSyntax) As ParameterSyntax
            return Update(Me.Attributes, Me.Modifiers, identifier, Me.AsClause, Me.Default)
        End Function

        ''' <summary>
        ''' If present, the "As type-name" clause describing the type of the parameter. If
        ''' no As clause is present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AsClause As SimpleAsClauseSyntax
            Get
                Return GetRed(Of SimpleAsClauseSyntax)(_asClause, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as SimpleAsClauseSyntax) As ParameterSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Identifier, asClause, Me.Default)
        End Function

        ''' <summary>
        ''' If present, an initializer with the default value of the parameter. If no
        ''' default value is present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property [Default] As EqualsValueSyntax
            Get
                Return GetRed(Of EqualsValueSyntax)(_default, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [Default] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDefault([default] as EqualsValueSyntax) As ParameterSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Identifier, Me.AsClause, [default])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 2
                    Return Me._identifier
                Case 3
                    Return Me._asClause
                Case 4
                    Return Me._default
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 2
                    Return Me.Identifier
                Case 3
                    Return Me.AsClause
                Case 4
                    Return Me.[Default]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitParameter(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitParameter(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ParameterSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this ParameterSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new ParameterSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this ParameterSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new ParameterSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this ParameterSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new ParameterSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this ParameterSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new ParameterSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="default">
        ''' The new Default to update this ParameterSyntaxSyntax node with. If not
        ''' specified the current Default will be used in the new ParameterSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, [default] As EqualsValueSyntax) As ParameterSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ParameterSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse identifier IsNot Me._identifier OrElse asClause IsNot Me._asClause OrElse [default] IsNot Me._default Then
                Dim newNode = Syntax.Parameter(attributes, modifiers, identifier, asClause, [default])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
    ''' used in parameter declarations and variable declarations.
    ''' </summary>
    Public NotInheritable Class ModifiedIdentifierSyntax
        Inherits SyntaxNode

        Friend _arrayBounds as ArgumentListSyntax
        Friend _arrayRankSpecifiers as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifier As InternalSyntax.IdentifierTokenSyntax, nullable As InternalSyntax.PunctuationSyntax, arrayBounds As ArgumentListSyntax, arrayRankSpecifiers As SyntaxNode)
            Me.New(New InternalSyntax.ModifiedIdentifierSyntax(kind, errors, annotations, identifier, nullable, if(arrayBounds IsNot Nothing , DirectCast(arrayBounds.Green, InternalSyntax.ArgumentListSyntax), Nothing) , if(arrayRankSpecifiers IsNot Nothing, arrayRankSpecifiers.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The identifier that names the item being declared.
        ''' </summary>
        Public  ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ModifiedIdentifierSyntax)._identifier, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As ModifiedIdentifierSyntax
            return Update(identifier, Me.Nullable, Me.ArrayBounds, Me.ArrayRankSpecifiers)
        End Function

        ''' <summary>
        ''' The "?" token that indicates a nullable type.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Nullable As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ModifiedIdentifierSyntax)._nullable, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Nullable property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNullable(nullable as SyntaxToken) As ModifiedIdentifierSyntax
            return Update(Me.Identifier, nullable, Me.ArrayBounds, Me.ArrayRankSpecifiers)
        End Function

        ''' <summary>
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArrayBounds As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_arrayBounds, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArrayBounds property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArrayBounds(arrayBounds as ArgumentListSyntax) As ModifiedIdentifierSyntax
            return Update(Me.Identifier, Me.Nullable, arrayBounds, Me.ArrayRankSpecifiers)
        End Function

        Public Shadows Function AddArrayBoundsArguments(ParamArray items As ArgumentSyntax()) As ModifiedIdentifierSyntax
            Dim _child = If (Me.ArrayBounds IsNot Nothing, Me.ArrayBounds, Syntax.ArgumentList())
            Return Me.WithArrayBounds(_child.AddArguments(items))
        End Function

        ''' <summary>
        ''' A list of array modifiers for the type. If no array modifiers were present, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property ArrayRankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_arrayRankSpecifiers, 3)
                Return new SyntaxList(Of ArrayRankSpecifierSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArrayRankSpecifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArrayRankSpecifiers(arrayRankSpecifiers as SyntaxList(Of ArrayRankSpecifierSyntax)) As ModifiedIdentifierSyntax
            return Update(Me.Identifier, Me.Nullable, Me.ArrayBounds, arrayRankSpecifiers)
        End Function

        Public Shadows Function AddArrayRankSpecifiers(ParamArray items As ArrayRankSpecifierSyntax()) As ModifiedIdentifierSyntax
            Return Me.WithArrayRankSpecifiers(Me.ArrayRankSpecifiers.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._arrayBounds
                Case 3
                    Return Me._arrayRankSpecifiers
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.ArrayBounds
                Case 3
                    Return GetRed(Of SyntaxNode)(_arrayRankSpecifiers, 3)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitModifiedIdentifier(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitModifiedIdentifier(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ModifiedIdentifierSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="identifier">
        ''' The new Identifier to update this ModifiedIdentifierSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' ModifiedIdentifierSyntaxSyntax node.
        ''' </param>
        ''' <param name="nullable">
        ''' The new Nullable to update this ModifiedIdentifierSyntaxSyntax node with. If
        ''' not specified the current Nullable will be used in the new
        ''' ModifiedIdentifierSyntaxSyntax node.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The new ArrayBounds to update this ModifiedIdentifierSyntaxSyntax node with. If
        ''' not specified the current ArrayBounds will be used in the new
        ''' ModifiedIdentifierSyntaxSyntax node.
        ''' </param>
        ''' <param name="arrayRankSpecifiers">
        ''' The new ArrayRankSpecifiers to update this ModifiedIdentifierSyntaxSyntax node
        ''' with. If not specified the current ArrayRankSpecifiers will be used in the new
        ''' ModifiedIdentifierSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifier As SyntaxToken, nullable As SyntaxToken, arrayBounds As ArgumentListSyntax, arrayRankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax)) As ModifiedIdentifierSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ModifiedIdentifierSyntax)
            If identifier.Node IsNot green._identifier OrElse nullable.Node IsNot green._nullable OrElse arrayBounds IsNot Me._arrayBounds OrElse arrayRankSpecifiers <> Me.ArrayRankSpecifiers Then
                Dim newNode = Syntax.ModifiedIdentifier(identifier, nullable, arrayBounds, arrayRankSpecifiers)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a modifier that describes an array type, without bounds, such as
    ''' "()" or "(,)".
    ''' </summary>
    Public NotInheritable Class ArrayRankSpecifierSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, commaTokens As InternalSyntax.SyntaxNode, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ArrayRankSpecifierSyntax(kind, errors, annotations, openParenToken, commaTokens, closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ArrayRankSpecifierSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ArrayRankSpecifierSyntax
            return Update(openParenToken, Me.CommaTokens, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The comma tokens in the array type. There is one less comma than the rank.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property CommaTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.ArrayRankSpecifierSyntax)._commaTokens, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CommaTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaTokens(commaTokens as SyntaxTokenList) As ArrayRankSpecifierSyntax
            return Update(Me.OpenParenToken, commaTokens, Me.CloseParenToken)
        End Function

        Public Shadows Function AddCommaTokens(ParamArray items As SyntaxToken()) As ArrayRankSpecifierSyntax
            Return Me.WithCommaTokens(Me.CommaTokens.Add(items))
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ArrayRankSpecifierSyntax)._closeParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ArrayRankSpecifierSyntax
            return Update(Me.OpenParenToken, Me.CommaTokens, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitArrayRankSpecifier(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitArrayRankSpecifier(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ArrayRankSpecifierSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ArrayRankSpecifierSyntaxSyntax node with.
        ''' If not specified the current OpenParenToken will be used in the new
        ''' ArrayRankSpecifierSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaTokens">
        ''' The new CommaTokens to update this ArrayRankSpecifierSyntaxSyntax node with. If
        ''' not specified the current CommaTokens will be used in the new
        ''' ArrayRankSpecifierSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ArrayRankSpecifierSyntaxSyntax node
        ''' with. If not specified the current CloseParenToken will be used in the new
        ''' ArrayRankSpecifierSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, commaTokens As SyntaxTokenList, closeParenToken As SyntaxToken) As ArrayRankSpecifierSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ArrayRankSpecifierSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse commaTokens <> Me.CommaTokens OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ArrayRankSpecifier(openParenToken, commaTokens, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a group of attributes within "&lt;" and "&gt;" brackets.
    ''' </summary>
    Public NotInheritable Class AttributeBlockSyntax
        Inherits SyntaxNode

        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanToken As InternalSyntax.PunctuationSyntax, attributes As SyntaxNode, greaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.AttributeBlockSyntax(kind, errors, annotations, lessThanToken, if(attributes IsNot Nothing, attributes.Green, Nothing), greaterThanToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "&lt;" token.
        ''' </summary>
        Public  ReadOnly Property LessThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AttributeBlockSyntax)._lessThanToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanToken(lessThanToken as SyntaxToken) As AttributeBlockSyntax
            return Update(lessThanToken, Me.Attributes, Me.GreaterThanToken)
        End Function

        ''' <summary>
        ''' A comma separated list of attribute declarations in this attribute block.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SeparatedSyntaxList(Of AttributeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SeparatedSyntaxList(Of AttributeSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SeparatedSyntaxList(Of AttributeSyntax)) As AttributeBlockSyntax
            return Update(Me.LessThanToken, attributes, Me.GreaterThanToken)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeSyntax()) As AttributeBlockSyntax
            Return Me.WithAttributes(Me.Attributes.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "&gt;" token.
        ''' </summary>
        Public  ReadOnly Property GreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AttributeBlockSyntax)._greaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGreaterThanToken(greaterThanToken as SyntaxToken) As AttributeBlockSyntax
            return Update(Me.LessThanToken, Me.Attributes, greaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._attributes
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_attributes, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAttributeBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAttributeBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AttributeBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The new LessThanToken to update this AttributeBlockSyntaxSyntax node with. If
        ''' not specified the current LessThanToken will be used in the new
        ''' AttributeBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this AttributeBlockSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' AttributeBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The new GreaterThanToken to update this AttributeBlockSyntaxSyntax node with.
        ''' If not specified the current GreaterThanToken will be used in the new
        ''' AttributeBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanToken As SyntaxToken, attributes As SeparatedSyntaxList(Of AttributeSyntax), greaterThanToken As SyntaxToken) As AttributeBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AttributeBlockSyntax)
            If lessThanToken.Node IsNot green._lessThanToken OrElse attributes <> Me.Attributes OrElse greaterThanToken.Node IsNot green._greaterThanToken Then
                Dim newNode = Syntax.AttributeBlock(lessThanToken, attributes, greaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a single attribute declaration within an attribute block.
    ''' </summary>
    Public NotInheritable Class AttributeSyntax
        Inherits SyntaxNode

        Friend _target as AttributeTargetSyntax
        Friend _name as TypeSyntax
        Friend _argumentList as ArgumentListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), target As AttributeTargetSyntax, name As TypeSyntax, argumentList As ArgumentListSyntax)
            Me.New(New InternalSyntax.AttributeSyntax(kind, errors, annotations, if(target IsNot Nothing , DirectCast(target.Green, InternalSyntax.AttributeTargetSyntax), Nothing) , DirectCast(name.Green, InternalSyntax.TypeSyntax), if(argumentList IsNot Nothing , DirectCast(argumentList.Green, InternalSyntax.ArgumentListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' Optional attribute target. Assembly|Module :
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Target As AttributeTargetSyntax
            Get
                Return GetRed(Of AttributeTargetSyntax)(_target, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Target property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTarget(target as AttributeTargetSyntax) As AttributeSyntax
            return Update(target, Me.Name, Me.ArgumentList)
        End Function

        ''' <summary>
        ''' The name of the attribute.
        ''' </summary>
        Public  ReadOnly Property Name As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as TypeSyntax) As AttributeSyntax
            return Update(Me.Target, name, Me.ArgumentList)
        End Function

        ''' <summary>
        ''' The argument list, if present. If no argument list was supplied, Nothing is
        ''' returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArgumentList As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_argumentList, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArgumentList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArgumentList(argumentList as ArgumentListSyntax) As AttributeSyntax
            return Update(Me.Target, Me.Name, argumentList)
        End Function

        Public Shadows Function AddArgumentListArguments(ParamArray items As ArgumentSyntax()) As AttributeSyntax
            Dim _child = If (Me.ArgumentList IsNot Nothing, Me.ArgumentList, Syntax.ArgumentList())
            Return Me.WithArgumentList(_child.AddArguments(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._target
                Case 1
                    Return Me._name
                Case 2
                    Return Me._argumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Target
                Case 1
                    Return Me.Name
                Case 2
                    Return Me.ArgumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAttribute(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAttribute(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AttributeSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="target">
        ''' The new Target to update this AttributeSyntaxSyntax node with. If not specified
        ''' the current Target will be used in the new AttributeSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this AttributeSyntaxSyntax node with. If not specified
        ''' the current Name will be used in the new AttributeSyntaxSyntax node.
        ''' </param>
        ''' <param name="argumentList">
        ''' The new ArgumentList to update this AttributeSyntaxSyntax node with. If not
        ''' specified the current ArgumentList will be used in the new
        ''' AttributeSyntaxSyntax node.
        ''' </param>
        Public Function Update(target As AttributeTargetSyntax, name As TypeSyntax, argumentList As ArgumentListSyntax) As AttributeSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AttributeSyntax)
            If target IsNot Me._target OrElse name IsNot Me._name OrElse argumentList IsNot Me._argumentList Then
                Dim newNode = Syntax.Attribute(target, name, argumentList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a single attribute declaration within an attribute block.
    ''' </summary>
    Public NotInheritable Class AttributeTargetSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributeModifier As InternalSyntax.KeywordSyntax, colonToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.AttributeTargetSyntax(kind, errors, annotations, attributeModifier, colonToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Assembly" or "Module" attribute modifier, is present. If no attribute
        ''' modifier is present, Nothing is returned.
        ''' </summary>
        Public  ReadOnly Property AttributeModifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AttributeTargetSyntax)._attributeModifier, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AttributeModifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributeModifier(attributeModifier as SyntaxToken) As AttributeTargetSyntax
            return Update(attributeModifier, Me.ColonToken)
        End Function

        ''' <summary>
        ''' The ":" token, if an attribute modifier is present. If no attribute modifier is
        ''' present, Nothing is returned.
        ''' </summary>
        Public  ReadOnly Property ColonToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AttributeTargetSyntax)._colonToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ColonToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithColonToken(colonToken as SyntaxToken) As AttributeTargetSyntax
            return Update(Me.AttributeModifier, colonToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAttributeTarget(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAttributeTarget(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AttributeTargetSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributeModifier">
        ''' The new AttributeModifier to update this AttributeTargetSyntaxSyntax node with.
        ''' If not specified the current AttributeModifier will be used in the new
        ''' AttributeTargetSyntaxSyntax node.
        ''' </param>
        ''' <param name="colonToken">
        ''' The new ColonToken to update this AttributeTargetSyntaxSyntax node with. If not
        ''' specified the current ColonToken will be used in the new
        ''' AttributeTargetSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributeModifier As SyntaxToken, colonToken As SyntaxToken) As AttributeTargetSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AttributeTargetSyntax)
            If attributeModifier.Node IsNot green._attributeModifier OrElse colonToken.Node IsNot green._colonToken Then
                Dim newNode = Syntax.AttributeTarget(attributeModifier, colonToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a file-level attribute, in which the attributes have no other
    ''' syntactic element they are attached to.
    ''' </summary>
    Public NotInheritable Class AttributesStatementSyntax
        Inherits DeclarationStatementSyntax

        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode)
            Me.New(New InternalSyntax.AttributesStatementSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The list of attribute blocks.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As AttributesStatementSyntax
            return Update(attributes)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As AttributesStatementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._attributes
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
               Return GetRed(Of SyntaxNode)(_attributes, 0)
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAttributesStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAttributesStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AttributesStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this AttributesStatementSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' AttributesStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax)) As AttributesStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AttributesStatementSyntax)
            If attributes <> Me.Attributes Then
                Dim newNode = Syntax.AttributesStatement(attributes)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represent an expression in a statement context.
    ''' </summary>
    Public NotInheritable Class ExpressionStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), questionToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.ExpressionStatementSyntax(kind, errors, annotations, questionToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' "?" token, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property QuestionToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExpressionStatementSyntax)._questionToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the QuestionToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithQuestionToken(questionToken as SyntaxToken) As ExpressionStatementSyntax
            return Update(questionToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ExpressionStatementSyntax
            return Update(Me.QuestionToken, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitExpressionStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitExpressionStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ExpressionStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="questionToken">
        ''' The new QuestionToken to update this ExpressionStatementSyntaxSyntax node with.
        ''' If not specified the current QuestionToken will be used in the new
        ''' ExpressionStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ExpressionStatementSyntaxSyntax node with. If
        ''' not specified the current Expression will be used in the new
        ''' ExpressionStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(questionToken As SyntaxToken, expression As ExpressionSyntax) As ExpressionStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ExpressionStatementSyntax)
            If questionToken.Node IsNot green._questionToken OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.ExpressionStatement(questionToken, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a While...End While statement, including the While, body and End
    ''' While.
    ''' </summary>
    Public NotInheritable Class WhileBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as WhileStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As WhileStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.WhileBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.WhileStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The While statement that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As WhileStatementSyntax
            Get
                Return GetRed(Of WhileStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as WhileStatementSyntax) As WhileBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WhileBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As WhileBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the While...End While. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As WhileBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As WhileBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End While statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As WhileBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWhileBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWhileBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WhileBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this WhileBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new WhileBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this WhileBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' WhileBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this WhileBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new WhileBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this WhileBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new WhileBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As WhileStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As WhileBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WhileBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.WhileBlock(begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an entire Using...End Using statement, including the Using, body and
    ''' End Using statements.
    ''' </summary>
    Public NotInheritable Class UsingBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as UsingStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As UsingStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.UsingBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.UsingStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The UsingStatement that begins the Using...End Using block.
        ''' </summary>
        Public  ReadOnly Property Begin As UsingStatementSyntax
            Get
                Return GetRed(Of UsingStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as UsingStatementSyntax) As UsingBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.UsingBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As UsingBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the Using...End Using block. This might be an empty
        ''' list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As UsingBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As UsingBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End Using statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As UsingBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitUsingBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitUsingBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new UsingBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this UsingBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new UsingBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this UsingBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' UsingBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this UsingBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new UsingBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this UsingBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new UsingBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As UsingStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As UsingBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.UsingBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.UsingBlock(begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a entire SyncLock...End SyncLock block, including the SyncLock
    ''' statement, the enclosed statements, and the End SyncLock statment.
    ''' </summary>
    Public NotInheritable Class SyncLockBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as SyncLockStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As SyncLockStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.SyncLockBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.SyncLockStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The SyncLock statement that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As SyncLockStatementSyntax
            Get
                Return GetRed(Of SyncLockStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as SyncLockStatementSyntax) As SyncLockBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SyncLockBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As SyncLockBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the SyncLock...End SyncLock statement. This might
        ''' be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As SyncLockBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As SyncLockBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End SyncLock statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As SyncLockBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSyncLockBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSyncLockBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SyncLockBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this SyncLockBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new SyncLockBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this SyncLockBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' SyncLockBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this SyncLockBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new
        ''' SyncLockBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this SyncLockBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new SyncLockBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As SyncLockStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As SyncLockBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SyncLockBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.SyncLockBlock(begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a With...End With block, include the With statement, the body of the
    ''' block and the End With statement.
    ''' </summary>
    Public NotInheritable Class WithBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as WithStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As WithStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.WithBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.WithStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The WithStatement that begins the With...End With block.
        ''' </summary>
        Public  ReadOnly Property Begin As WithStatementSyntax
            Get
                Return GetRed(Of WithStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as WithStatementSyntax) As WithBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WithBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As WithBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the With...End With block. This might be an empty
        ''' list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As WithBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As WithBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The End With statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As WithBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWithBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWithBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WithBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this WithBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new WithBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this WithBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' WithBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this WithBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new WithBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this WithBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new WithBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As WithStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As WithBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WithBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.WithBlock(begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the declaration of one or more local variables or constants.
    ''' </summary>
    Public NotInheritable Class LocalDeclarationSyntax
        Inherits ExecutableStatementSyntax

        Friend _declarators as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), modifiers As InternalSyntax.SyntaxNode, declarators As SyntaxNode)
            Me.New(New InternalSyntax.LocalDeclarationSyntax(kind, errors, annotations, modifiers, if(declarators IsNot Nothing, declarators.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The modifier token (Static, Dim or Const) that introduces this local variable
        ''' declaration.
        ''' </summary>
        Public  ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.LocalDeclarationSyntax)._modifiers, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As LocalDeclarationSyntax
            return Update(modifiers, Me.Declarators)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As LocalDeclarationSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </summary>
        Public  ReadOnly Property Declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_declarators, 1)
                Return new SeparatedSyntaxList(Of VariableDeclaratorSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Declarators property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDeclarators(declarators as SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As LocalDeclarationSyntax
            return Update(Me.Modifiers, declarators)
        End Function

        Public Shadows Function AddDeclarators(ParamArray items As VariableDeclaratorSyntax()) As LocalDeclarationSyntax
            Return Me.WithDeclarators(Me.Declarators.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._declarators
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_declarators, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLocalDeclaration(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLocalDeclaration(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LocalDeclarationSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this LocalDeclarationSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' LocalDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="declarators">
        ''' The new Declarators to update this LocalDeclarationSyntaxSyntax node with. If
        ''' not specified the current Declarators will be used in the new
        ''' LocalDeclarationSyntaxSyntax node.
        ''' </param>
        Public Function Update(modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As LocalDeclarationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LocalDeclarationSyntax)
            If modifiers <> Me.Modifiers OrElse declarators <> Me.Declarators Then
                Dim newNode = Syntax.LocalDeclaration(modifiers, declarators)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a label statement.
    ''' </summary>
    Public NotInheritable Class LabelStatementSyntax
        Inherits ExecutableStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), labelToken As InternalSyntax.SyntaxToken)
            Me.New(New InternalSyntax.LabelStatementSyntax(kind, errors, annotations, labelToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The name of the label. If the label is a line number, returns an IntegerLiteral
        ''' that is the line number, otherwise, returns an Identifier.
        ''' </summary>
        Public  ReadOnly Property LabelToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LabelStatementSyntax)._labelToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LabelToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLabelToken(labelToken as SyntaxToken) As LabelStatementSyntax
            return Update(labelToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLabelStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLabelStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LabelStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The new LabelToken to update this LabelStatementSyntaxSyntax node with. If not
        ''' specified the current LabelToken will be used in the new
        ''' LabelStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(labelToken As SyntaxToken) As LabelStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LabelStatementSyntax)
            If labelToken.Node IsNot green._labelToken Then
                Dim newNode = Syntax.LabelStatement(labelToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "GoTo" statement.
    ''' </summary>
    Public NotInheritable Class GoToStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _label as LabelSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), goToKeyword As InternalSyntax.KeywordSyntax, label As LabelSyntax)
            Me.New(New InternalSyntax.GoToStatementSyntax(kind, errors, annotations, goToKeyword, DirectCast(label.Green, InternalSyntax.LabelSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "GoTo" keyword.
        ''' </summary>
        Public  ReadOnly Property GoToKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GoToStatementSyntax)._goToKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GoToKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGoToKeyword(goToKeyword as SyntaxToken) As GoToStatementSyntax
            return Update(goToKeyword, Me.Label)
        End Function

        ''' <summary>
        ''' The name of the label. If the label is a line number, wraps an IntegerLiteral
        ''' that is the line number, otherwise, wraps an Identifier.
        ''' </summary>
        Public  ReadOnly Property Label As LabelSyntax
            Get
                Return GetRed(Of LabelSyntax)(_label, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Label property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLabel(label as LabelSyntax) As GoToStatementSyntax
            return Update(Me.GoToKeyword, label)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGoToStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGoToStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GoToStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="goToKeyword">
        ''' The new GoToKeyword to update this GoToStatementSyntaxSyntax node with. If not
        ''' specified the current GoToKeyword will be used in the new
        ''' GoToStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="label">
        ''' The new Label to update this GoToStatementSyntaxSyntax node with. If not
        ''' specified the current Label will be used in the new GoToStatementSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(goToKeyword As SyntaxToken, label As LabelSyntax) As GoToStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GoToStatementSyntax)
            If goToKeyword.Node IsNot green._goToKeyword OrElse label IsNot Me._label Then
                Dim newNode = Syntax.GoToStatement(goToKeyword, label)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
    ''' or next keyword.
    ''' </summary>
    Public NotInheritable Class LabelSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), labelToken As InternalSyntax.SyntaxToken)
            Me.New(New InternalSyntax.LabelSyntax(kind, errors, annotations, labelToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </summary>
        Public  ReadOnly Property LabelToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LabelSyntax)._labelToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LabelToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLabelToken(labelToken as SyntaxToken) As LabelSyntax
            return Update(labelToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLabel(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLabel(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LabelSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The new LabelToken to update this LabelSyntaxSyntax node with. If not specified
        ''' the current LabelToken will be used in the new LabelSyntaxSyntax node.
        ''' </param>
        Public Function Update(labelToken As SyntaxToken) As LabelSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LabelSyntax)
            If labelToken.Node IsNot green._labelToken Then
                Dim newNode = Syntax.Label(Me.Kind, labelToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
    ''' kind of statement this is.
    ''' </summary>
    Public NotInheritable Class StopOrEndStatementSyntax
        Inherits ExecutableStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), stopOrEndKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.StopOrEndStatementSyntax(kind, errors, annotations, stopOrEndKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Stop" or "End" keyword.
        ''' </summary>
        Public  ReadOnly Property StopOrEndKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.StopOrEndStatementSyntax)._stopOrEndKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StopOrEndKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStopOrEndKeyword(stopOrEndKeyword as SyntaxToken) As StopOrEndStatementSyntax
            return Update(stopOrEndKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitStopOrEndStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitStopOrEndStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new StopOrEndStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="stopOrEndKeyword">
        ''' The new StopOrEndKeyword to update this StopOrEndStatementSyntaxSyntax node
        ''' with. If not specified the current StopOrEndKeyword will be used in the new
        ''' StopOrEndStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.StopOrEndStatementSyntax)
            If stopOrEndKeyword.Node IsNot green._stopOrEndKeyword Then
                Dim newNode = Syntax.StopOrEndStatement(Me.Kind, stopOrEndKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An exit statement. The kind of block being exited can be found by examining the
    ''' Kind.
    ''' </summary>
    Public NotInheritable Class ExitStatementSyntax
        Inherits ExecutableStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), exitKeyword As InternalSyntax.KeywordSyntax, blockKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.ExitStatementSyntax(kind, errors, annotations, exitKeyword, blockKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Exit" keyword.
        ''' </summary>
        Public  ReadOnly Property ExitKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExitStatementSyntax)._exitKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExitKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExitKeyword(exitKeyword as SyntaxToken) As ExitStatementSyntax
            return Update(exitKeyword, Me.BlockKeyword)
        End Function

        ''' <summary>
        ''' The keyword describing the block to exit.
        ''' </summary>
        Public  ReadOnly Property BlockKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExitStatementSyntax)._blockKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BlockKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBlockKeyword(blockKeyword as SyntaxToken) As ExitStatementSyntax
            return Update(Me.ExitKeyword, blockKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitExitStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitExitStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ExitStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The new ExitKeyword to update this ExitStatementSyntaxSyntax node with. If not
        ''' specified the current ExitKeyword will be used in the new
        ''' ExitStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The new BlockKeyword to update this ExitStatementSyntaxSyntax node with. If not
        ''' specified the current BlockKeyword will be used in the new
        ''' ExitStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ExitStatementSyntax)
            If exitKeyword.Node IsNot green._exitKeyword OrElse blockKeyword.Node IsNot green._blockKeyword Then
                Dim newNode = Syntax.ExitStatement(Me.Kind, exitKeyword, blockKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
    ''' determined by examining the Kind.
    ''' </summary>
    Public NotInheritable Class ContinueStatementSyntax
        Inherits ExecutableStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), continueKeyword As InternalSyntax.KeywordSyntax, blockKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.ContinueStatementSyntax(kind, errors, annotations, continueKeyword, blockKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Continue" keyword.
        ''' </summary>
        Public  ReadOnly Property ContinueKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ContinueStatementSyntax)._continueKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ContinueKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithContinueKeyword(continueKeyword as SyntaxToken) As ContinueStatementSyntax
            return Update(continueKeyword, Me.BlockKeyword)
        End Function

        ''' <summary>
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </summary>
        Public  ReadOnly Property BlockKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ContinueStatementSyntax)._blockKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BlockKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBlockKeyword(blockKeyword as SyntaxToken) As ContinueStatementSyntax
            return Update(Me.ContinueKeyword, blockKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitContinueStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitContinueStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ContinueStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="continueKeyword">
        ''' The new ContinueKeyword to update this ContinueStatementSyntaxSyntax node with.
        ''' If not specified the current ContinueKeyword will be used in the new
        ''' ContinueStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The new BlockKeyword to update this ContinueStatementSyntaxSyntax node with. If
        ''' not specified the current BlockKeyword will be used in the new
        ''' ContinueStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ContinueStatementSyntax)
            If continueKeyword.Node IsNot green._continueKeyword OrElse blockKeyword.Node IsNot green._blockKeyword Then
                Dim newNode = Syntax.ContinueStatement(Me.Kind, continueKeyword, blockKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Return" statement.
    ''' </summary>
    Public NotInheritable Class ReturnStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), returnKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.ReturnStatementSyntax(kind, errors, annotations, returnKeyword, if(expression IsNot Nothing , DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Return" keyword.
        ''' </summary>
        Public  ReadOnly Property ReturnKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReturnStatementSyntax)._returnKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ReturnKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithReturnKeyword(returnKeyword as SyntaxToken) As ReturnStatementSyntax
            return Update(returnKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression being returned, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ReturnStatementSyntax
            return Update(Me.ReturnKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitReturnStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitReturnStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ReturnStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="returnKeyword">
        ''' The new ReturnKeyword to update this ReturnStatementSyntaxSyntax node with. If
        ''' not specified the current ReturnKeyword will be used in the new
        ''' ReturnStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ReturnStatementSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' ReturnStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(returnKeyword As SyntaxToken, expression As ExpressionSyntax) As ReturnStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ReturnStatementSyntax)
            If returnKeyword.Node IsNot green._returnKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.ReturnStatement(returnKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a line If-Then-Else statement.
    ''' </summary>
    Public NotInheritable Class SingleLineIfStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _ifPart as SingleLineIfPartSyntax
        Friend _elsePart as SingleLineElsePartSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), ifPart As SingleLineIfPartSyntax, elsePart As SingleLineElsePartSyntax)
            Me.New(New InternalSyntax.SingleLineIfStatementSyntax(kind, errors, annotations, DirectCast(ifPart.Green, InternalSyntax.SingleLineIfPartSyntax), if(elsePart IsNot Nothing , DirectCast(elsePart.Green, InternalSyntax.SingleLineElsePartSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The If part of the statement.
        ''' </summary>
        Public  ReadOnly Property IfPart As SingleLineIfPartSyntax
            Get
                Return GetRed(Of SingleLineIfPartSyntax)(_ifPart, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfPart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfPart(ifPart as SingleLineIfPartSyntax) As SingleLineIfStatementSyntax
            return Update(ifPart, Me.ElsePart)
        End Function

        ''' <summary>
        ''' The Else part of the statement. If there is no Else part, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ElsePart As SingleLineElsePartSyntax
            Get
                Return GetRed(Of SingleLineElsePartSyntax)(_elsePart, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElsePart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElsePart(elsePart as SingleLineElsePartSyntax) As SingleLineIfStatementSyntax
            return Update(Me.IfPart, elsePart)
        End Function

        Public Shadows Function AddElsePartStatements(ParamArray items As StatementSyntax()) As SingleLineIfStatementSyntax
            Dim _child = If (Me.ElsePart IsNot Nothing, Me.ElsePart, Syntax.SingleLineElsePart())
            Return Me.WithElsePart(_child.AddStatements(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._ifPart
                Case 1
                    Return Me._elsePart
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.IfPart
                Case 1
                    Return Me.ElsePart
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSingleLineIfStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSingleLineIfStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SingleLineIfStatementSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The new IfPart to update this SingleLineIfStatementSyntaxSyntax node with. If
        ''' not specified the current IfPart will be used in the new
        ''' SingleLineIfStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="elsePart">
        ''' The new ElsePart to update this SingleLineIfStatementSyntaxSyntax node with. If
        ''' not specified the current ElsePart will be used in the new
        ''' SingleLineIfStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(ifPart As SingleLineIfPartSyntax, elsePart As SingleLineElsePartSyntax) As SingleLineIfStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SingleLineIfStatementSyntax)
            If ifPart IsNot Me._ifPart OrElse elsePart IsNot Me._elsePart Then
                Dim newNode = Syntax.SingleLineIfStatement(ifPart, elsePart)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents part of a single line If statement, consisting of a beginning
    ''' if-statement, followed by a body of statement controlled by that beginning
    ''' statement. The Kind property returns if this is an SingleLineIf.
    ''' </summary>
    Public NotInheritable Class SingleLineIfPartSyntax
        Inherits SyntaxNode

        Friend _begin as IfStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As IfStatementSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.SingleLineIfPartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.IfStatementSyntax), if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </summary>
        Public  ReadOnly Property Begin As IfStatementSyntax
            Get
                Return GetRed(Of IfStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as IfStatementSyntax) As SingleLineIfPartSyntax
            return Update(begin, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 1)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As SingleLineIfPartSyntax
            return Update(Me.Begin, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As SingleLineIfPartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 1
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 1
                    Return GetRed(Of SyntaxNode)(_statements, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSingleLineIfPart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSingleLineIfPart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SingleLineIfPartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this SingleLineIfPartSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new
        ''' SingleLineIfPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this SingleLineIfPartSyntaxSyntax node with. If
        ''' not specified the current Statements will be used in the new
        ''' SingleLineIfPartSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As IfStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As SingleLineIfPartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SingleLineIfPartSyntax)
            If begin IsNot Me._begin OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.SingleLineIfPart(begin, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Else part of an If statement, consisting of a Else statement,
    ''' followed by a body of statement controlled by that Else.
    ''' </summary>
    Public NotInheritable Class SingleLineElsePartSyntax
        Inherits SyntaxNode

        Friend _begin as ElseStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As ElseStatementSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.SingleLineElsePartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.ElseStatementSyntax), if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The Else statement that introduces this part.
        ''' </summary>
        Public  ReadOnly Property Begin As ElseStatementSyntax
            Get
                Return GetRed(Of ElseStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as ElseStatementSyntax) As SingleLineElsePartSyntax
            return Update(begin, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements controlled by the Else.This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 1)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As SingleLineElsePartSyntax
            return Update(Me.Begin, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As SingleLineElsePartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 1
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 1
                    Return GetRed(Of SyntaxNode)(_statements, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSingleLineElsePart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSingleLineElsePart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SingleLineElsePartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this SingleLineElsePartSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new
        ''' SingleLineElsePartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this SingleLineElsePartSyntaxSyntax node with. If
        ''' not specified the current Statements will be used in the new
        ''' SingleLineElsePartSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As ElseStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As SingleLineElsePartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SingleLineElsePartSyntax)
            If begin IsNot Me._begin OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.SingleLineElsePart(begin, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a block If...Then...Else...EndIf Statement. The Kind property can be
    ''' used to determine if it is a block or line If.
    ''' </summary>
    Public NotInheritable Class MultiLineIfBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _ifPart as IfPartSyntax
        Friend _elseIfParts as SyntaxNode
        Friend _elsePart as ElsePartSyntax
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), ifPart As IfPartSyntax, elseIfParts As SyntaxNode, elsePart As ElsePartSyntax, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.MultiLineIfBlockSyntax(kind, errors, annotations, DirectCast(ifPart.Green, InternalSyntax.IfPartSyntax), if(elseIfParts IsNot Nothing, elseIfParts.Green, Nothing), if(elsePart IsNot Nothing , DirectCast(elsePart.Green, InternalSyntax.ElsePartSyntax), Nothing) , DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The If part of the statement.
        ''' </summary>
        Public  ReadOnly Property IfPart As IfPartSyntax
            Get
                Return GetRed(Of IfPartSyntax)(_ifPart, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfPart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfPart(ifPart as IfPartSyntax) As MultiLineIfBlockSyntax
            return Update(ifPart, Me.ElseIfParts, Me.ElsePart, Me.End)
        End Function

        ''' <summary>
        ''' A list of the "ElseIf" parts of the statement. If there are no ElseIf parts,
        ''' then an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property ElseIfParts As SyntaxList(Of IfPartSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_elseIfParts, 1)
                Return new SyntaxList(Of IfPartSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseIfParts property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseIfParts(elseIfParts as SyntaxList(Of IfPartSyntax)) As MultiLineIfBlockSyntax
            return Update(Me.IfPart, elseIfParts, Me.ElsePart, Me.End)
        End Function

        Public Shadows Function AddElseIfParts(ParamArray items As IfPartSyntax()) As MultiLineIfBlockSyntax
            Return Me.WithElseIfParts(Me.ElseIfParts.Add(items))
        End Function

        ''' <summary>
        ''' The Else part of the statement. If there is no Else part, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ElsePart As ElsePartSyntax
            Get
                Return GetRed(Of ElsePartSyntax)(_elsePart, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElsePart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElsePart(elsePart as ElsePartSyntax) As MultiLineIfBlockSyntax
            return Update(Me.IfPart, Me.ElseIfParts, elsePart, Me.End)
        End Function

        Public Shadows Function AddElsePartStatements(ParamArray items As StatementSyntax()) As MultiLineIfBlockSyntax
            Dim _child = If (Me.ElsePart IsNot Nothing, Me.ElsePart, Syntax.ElsePart())
            Return Me.WithElsePart(_child.AddStatements(items))
        End Function

        ''' <summary>
        ''' If this is a block if, returns the "End If" statement.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As MultiLineIfBlockSyntax
            return Update(Me.IfPart, Me.ElseIfParts, Me.ElsePart, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._ifPart
                Case 1
                    Return Me._elseIfParts
                Case 2
                    Return Me._elsePart
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.IfPart
                Case 1
                    Return GetRed(Of SyntaxNode)(_elseIfParts, 1)
                Case 2
                    Return Me.ElsePart
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMultiLineIfBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMultiLineIfBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MultiLineIfBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The new IfPart to update this MultiLineIfBlockSyntaxSyntax node with. If not
        ''' specified the current IfPart will be used in the new
        ''' MultiLineIfBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="elseIfParts">
        ''' The new ElseIfParts to update this MultiLineIfBlockSyntaxSyntax node with. If
        ''' not specified the current ElseIfParts will be used in the new
        ''' MultiLineIfBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="elsePart">
        ''' The new ElsePart to update this MultiLineIfBlockSyntaxSyntax node with. If not
        ''' specified the current ElsePart will be used in the new
        ''' MultiLineIfBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this MultiLineIfBlockSyntaxSyntax node with. If not
        ''' specified the current End will be used in the new MultiLineIfBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(ifPart As IfPartSyntax, elseIfParts As SyntaxList(of IfPartSyntax), elsePart As ElsePartSyntax, [end] As EndBlockStatementSyntax) As MultiLineIfBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MultiLineIfBlockSyntax)
            If ifPart IsNot Me._ifPart OrElse elseIfParts <> Me.ElseIfParts OrElse elsePart IsNot Me._elsePart OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.MultiLineIfBlock(ifPart, elseIfParts, elsePart, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents part of an If statement, consisting of a beginning statement (If or
    ''' ElseIf), followed by a body of statement controlled by that beginning
    ''' statement. The Kind property returns if this is an If or ElseIf.
    ''' </summary>
    Public NotInheritable Class IfPartSyntax
        Inherits SyntaxNode

        Friend _begin as IfStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As IfStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.IfPartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.IfStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </summary>
        Public  ReadOnly Property Begin As IfStatementSyntax
            Get
                Return GetRed(Of IfStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as IfStatementSyntax) As IfPartSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfPartSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As IfPartSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As IfPartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitIfPart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitIfPart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new IfPartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this IfPartSyntaxSyntax node with. If not specified the
        ''' current Begin will be used in the new IfPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this IfPartSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' IfPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this IfPartSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new IfPartSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As IfStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.IfPartSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.IfPart(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Else part of an If statement, consisting of a Else statement,
    ''' followed by a body of statement controlled by that Else.
    ''' </summary>
    Public NotInheritable Class ElsePartSyntax
        Inherits SyntaxNode

        Friend _begin as ElseStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As ElseStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.ElsePartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.ElseStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The Else statement that introduces this part.
        ''' </summary>
        Public  ReadOnly Property Begin As ElseStatementSyntax
            Get
                Return GetRed(Of ElseStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as ElseStatementSyntax) As ElsePartSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ElsePartSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As ElsePartSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements controlled by the Else. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As ElsePartSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As ElsePartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitElsePart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitElsePart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ElsePartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this ElsePartSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new ElsePartSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this ElsePartSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' ElsePartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this ElsePartSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new ElsePartSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As ElseStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As ElsePartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ElsePartSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.ElsePart(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
    ''' statement is always the Begin of a IfPart. The Kind can be examined to
    ''' determine if this is an If or an ElseIf statement.
    ''' </summary>
    Public NotInheritable Class IfStatementSyntax
        Inherits StatementSyntax

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), elseKeyword As InternalSyntax.KeywordSyntax, ifOrElseIfKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax, thenKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.IfStatementSyntax(kind, errors, annotations, elseKeyword, ifOrElseIfKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax), thenKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' If this ElseIf was written as "Else If", contains the "Else" keyword. Otherwise
        ''' returns Nothing.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ElseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfStatementSyntax)._elseKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseKeyword(elseKeyword as SyntaxToken) As IfStatementSyntax
            return Update(elseKeyword, Me.IfOrElseIfKeyword, Me.Condition, Me.ThenKeyword)
        End Function

        ''' <summary>
        ''' The "If" or "ElseIf" keyword.
        ''' </summary>
        Public  ReadOnly Property IfOrElseIfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfStatementSyntax)._ifOrElseIfKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfOrElseIfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfOrElseIfKeyword(ifOrElseIfKeyword as SyntaxToken) As IfStatementSyntax
            return Update(Me.ElseKeyword, ifOrElseIfKeyword, Me.Condition, Me.ThenKeyword)
        End Function

        ''' <summary>
        ''' The boolean expression that is being tested.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As IfStatementSyntax
            return Update(Me.ElseKeyword, Me.IfOrElseIfKeyword, condition, Me.ThenKeyword)
        End Function

        ''' <summary>
        ''' The "Then" keyword.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ThenKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfStatementSyntax)._thenKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ThenKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithThenKeyword(thenKeyword as SyntaxToken) As IfStatementSyntax
            return Update(Me.ElseKeyword, Me.IfOrElseIfKeyword, Me.Condition, thenKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitIfStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitIfStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new IfStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' The new ElseKeyword to update this IfStatementSyntaxSyntax node with. If not
        ''' specified the current ElseKeyword will be used in the new
        ''' IfStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="ifOrElseIfKeyword">
        ''' The new IfOrElseIfKeyword to update this IfStatementSyntaxSyntax node with. If
        ''' not specified the current IfOrElseIfKeyword will be used in the new
        ''' IfStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this IfStatementSyntaxSyntax node with. If not
        ''' specified the current Condition will be used in the new IfStatementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="thenKeyword">
        ''' The new ThenKeyword to update this IfStatementSyntaxSyntax node with. If not
        ''' specified the current ThenKeyword will be used in the new
        ''' IfStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.IfStatementSyntax)
            If elseKeyword.Node IsNot green._elseKeyword OrElse ifOrElseIfKeyword.Node IsNot green._ifOrElseIfKeyword OrElse condition IsNot Me._condition OrElse thenKeyword.Node IsNot green._thenKeyword Then
                Dim newNode = Syntax.IfStatement(elseKeyword, ifOrElseIfKeyword, condition, thenKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Else part of a If...End If block (or line If). This statement is
    ''' always the Begin of a ElsePart.
    ''' </summary>
    Public NotInheritable Class ElseStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), elseKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.ElseStatementSyntax(kind, errors, annotations, elseKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Else" keyword
        ''' </summary>
        Public  ReadOnly Property ElseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ElseStatementSyntax)._elseKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseKeyword(elseKeyword as SyntaxToken) As ElseStatementSyntax
            return Update(elseKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitElseStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitElseStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ElseStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' The new ElseKeyword to update this ElseStatementSyntaxSyntax node with. If not
        ''' specified the current ElseKeyword will be used in the new
        ''' ElseStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(elseKeyword As SyntaxToken) As ElseStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ElseStatementSyntax)
            If elseKeyword.Node IsNot green._elseKeyword Then
                Dim newNode = Syntax.ElseStatement(elseKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an entire Try...Catch...Finally...End Try statement.
    ''' </summary>
    Public NotInheritable Class TryBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _tryPart as TryPartSyntax
        Friend _catchParts as SyntaxNode
        Friend _finallyPart as FinallyPartSyntax
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), tryPart As TryPartSyntax, catchParts As SyntaxNode, finallyPart As FinallyPartSyntax, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.TryBlockSyntax(kind, errors, annotations, DirectCast(tryPart.Green, InternalSyntax.TryPartSyntax), if(catchParts IsNot Nothing, catchParts.Green, Nothing), if(finallyPart IsNot Nothing , DirectCast(finallyPart.Green, InternalSyntax.FinallyPartSyntax), Nothing) , DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The Try part of the statement.
        ''' </summary>
        Public  ReadOnly Property TryPart As TryPartSyntax
            Get
                Return GetRed(Of TryPartSyntax)(_tryPart, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TryPart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTryPart(tryPart as TryPartSyntax) As TryBlockSyntax
            return Update(tryPart, Me.CatchParts, Me.FinallyPart, Me.End)
        End Function

        Public Shadows Function AddTryPartStatements(ParamArray items As StatementSyntax()) As TryBlockSyntax
            Dim _child = If (Me.TryPart IsNot Nothing, Me.TryPart, Syntax.TryPart())
            Return Me.WithTryPart(_child.AddStatements(items))
        End Function

        ''' <summary>
        ''' A list of the Catch parts of the statement. If there are no Catch parts, then
        ''' an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property CatchParts As SyntaxList(Of CatchPartSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_catchParts, 1)
                Return new SyntaxList(Of CatchPartSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CatchParts property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCatchParts(catchParts as SyntaxList(Of CatchPartSyntax)) As TryBlockSyntax
            return Update(Me.TryPart, catchParts, Me.FinallyPart, Me.End)
        End Function

        Public Shadows Function AddCatchParts(ParamArray items As CatchPartSyntax()) As TryBlockSyntax
            Return Me.WithCatchParts(Me.CatchParts.Add(items))
        End Function

        ''' <summary>
        ''' The Finally part of the statement, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property FinallyPart As FinallyPartSyntax
            Get
                Return GetRed(Of FinallyPartSyntax)(_finallyPart, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FinallyPart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFinallyPart(finallyPart as FinallyPartSyntax) As TryBlockSyntax
            return Update(Me.TryPart, Me.CatchParts, finallyPart, Me.End)
        End Function

        Public Shadows Function AddFinallyPartStatements(ParamArray items As StatementSyntax()) As TryBlockSyntax
            Dim _child = If (Me.FinallyPart IsNot Nothing, Me.FinallyPart, Syntax.FinallyPart())
            Return Me.WithFinallyPart(_child.AddStatements(items))
        End Function

        ''' <summary>
        ''' The "End Try" statement.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As TryBlockSyntax
            return Update(Me.TryPart, Me.CatchParts, Me.FinallyPart, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._tryPart
                Case 1
                    Return Me._catchParts
                Case 2
                    Return Me._finallyPart
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.TryPart
                Case 1
                    Return GetRed(Of SyntaxNode)(_catchParts, 1)
                Case 2
                    Return Me.FinallyPart
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTryBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTryBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TryBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="tryPart">
        ''' The new TryPart to update this TryBlockSyntaxSyntax node with. If not specified
        ''' the current TryPart will be used in the new TryBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="catchParts">
        ''' The new CatchParts to update this TryBlockSyntaxSyntax node with. If not
        ''' specified the current CatchParts will be used in the new TryBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="finallyPart">
        ''' The new FinallyPart to update this TryBlockSyntaxSyntax node with. If not
        ''' specified the current FinallyPart will be used in the new TryBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this TryBlockSyntaxSyntax node with. If not specified the
        ''' current End will be used in the new TryBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(tryPart As TryPartSyntax, catchParts As SyntaxList(of CatchPartSyntax), finallyPart As FinallyPartSyntax, [end] As EndBlockStatementSyntax) As TryBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TryBlockSyntax)
            If tryPart IsNot Me._tryPart OrElse catchParts <> Me.CatchParts OrElse finallyPart IsNot Me._finallyPart OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.TryBlock(tryPart, catchParts, finallyPart, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents part of an Try...Catch...Finally...End Try statement, consisting of
    ''' a beginning statement (Try, Catch or Finally), followed by a body of statements
    ''' controlled by that beginning statement. The Kind property returns which kind of
    ''' part this is.
    ''' </summary>
    Public NotInheritable Class TryPartSyntax
        Inherits SyntaxNode

        Friend _begin as TryStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As TryStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.TryPartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.TryStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The TryStatement that introduces this part of the Try...Catch...Finally...End
        ''' Try.
        ''' </summary>
        Public  ReadOnly Property Begin As TryStatementSyntax
            Get
                Return GetRed(Of TryStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as TryStatementSyntax) As TryPartSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryPartSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As TryPartSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements inside the Try part of the Try...Catch...Finally...End Try. This
        ''' might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As TryPartSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As TryPartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTryPart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTryPart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TryPartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this TryPartSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new TryPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this TryPartSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' TryPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this TryPartSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new TryPartSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As TryStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As TryPartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TryPartSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.TryPart(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Catch part of an Try...Catch...Finally...End Try statement,
    ''' consisting of a Catch statement, followed by a body of statements controlled by
    ''' that Catch statement. The Kind property returns which kind of part this is.
    ''' </summary>
    Public NotInheritable Class CatchPartSyntax
        Inherits SyntaxNode

        Friend _begin as CatchStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As CatchStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.CatchPartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.CatchStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The CatchStatement that introduces this part.
        ''' </summary>
        Public  ReadOnly Property Begin As CatchStatementSyntax
            Get
                Return GetRed(Of CatchStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as CatchStatementSyntax) As CatchPartSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CatchPartSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As CatchPartSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements controlled by the Catch statement. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As CatchPartSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As CatchPartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCatchPart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCatchPart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CatchPartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this CatchPartSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new CatchPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this CatchPartSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' CatchPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this CatchPartSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new CatchPartSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As CatchStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As CatchPartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CatchPartSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.CatchPart(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Finally part of an Try...Catch...Finally...End Try statement,
    ''' consisting of a Finally statement, followed by a body of statements controlled
    ''' by the Finally.
    ''' </summary>
    Public NotInheritable Class FinallyPartSyntax
        Inherits SyntaxNode

        Friend _begin as FinallyStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As FinallyStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.FinallyPartSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.FinallyStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The FinallyStatement that introduces the Finally part of a Try.
        ''' </summary>
        Public  ReadOnly Property Begin As FinallyStatementSyntax
            Get
                Return GetRed(Of FinallyStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as FinallyStatementSyntax) As FinallyPartSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FinallyPartSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As FinallyPartSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements inside the Finally part of the Try...Catch...Finally...End Try.
        ''' This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As FinallyPartSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As FinallyPartSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitFinallyPart(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitFinallyPart(Me)
        End Sub


        ''' <summary>
        ''' Creates a new FinallyPartSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this FinallyPartSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new FinallyPartSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this FinallyPartSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' FinallyPartSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this FinallyPartSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new
        ''' FinallyPartSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As FinallyStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As FinallyPartSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.FinallyPartSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.FinallyPart(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Try part part of a Try...Catch...Finally...End Try. This
    ''' statement is always the Begin of a TryPart.
    ''' </summary>
    Public NotInheritable Class TryStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), tryKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.TryStatementSyntax(kind, errors, annotations, tryKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Try" keyword
        ''' </summary>
        Public  ReadOnly Property TryKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryStatementSyntax)._tryKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TryKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTryKeyword(tryKeyword as SyntaxToken) As TryStatementSyntax
            return Update(tryKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTryStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTryStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TryStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="tryKeyword">
        ''' The new TryKeyword to update this TryStatementSyntaxSyntax node with. If not
        ''' specified the current TryKeyword will be used in the new
        ''' TryStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(tryKeyword As SyntaxToken) As TryStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TryStatementSyntax)
            If tryKeyword.Node IsNot green._tryKeyword Then
                Dim newNode = Syntax.TryStatement(tryKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Catch part part of a Try...Catch...Finally...End Try. This
    ''' statement is always the Begin of a CatchPart.
    ''' </summary>
    Public NotInheritable Class CatchStatementSyntax
        Inherits StatementSyntax

        Friend _identifierName as IdentifierNameSyntax
        Friend _asClause as SimpleAsClauseSyntax
        Friend _whenClause as CatchFilterClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), catchKeyword As InternalSyntax.KeywordSyntax, identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax)
            Me.New(New InternalSyntax.CatchStatementSyntax(kind, errors, annotations, catchKeyword, if(identifierName IsNot Nothing , DirectCast(identifierName.Green, InternalSyntax.IdentifierNameSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.SimpleAsClauseSyntax), Nothing) , if(whenClause IsNot Nothing , DirectCast(whenClause.Green, InternalSyntax.CatchFilterClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Catch" keyword.
        ''' </summary>
        Public  ReadOnly Property CatchKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CatchStatementSyntax)._catchKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CatchKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCatchKeyword(catchKeyword as SyntaxToken) As CatchStatementSyntax
            return Update(catchKeyword, Me.IdentifierName, Me.AsClause, Me.WhenClause)
        End Function

        ''' <summary>
        ''' The identifier representing the exception that was caught, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property IdentifierName As IdentifierNameSyntax
            Get
                Return GetRed(Of IdentifierNameSyntax)(_identifierName, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IdentifierName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifierName(identifierName as IdentifierNameSyntax) As CatchStatementSyntax
            return Update(Me.CatchKeyword, identifierName, Me.AsClause, Me.WhenClause)
        End Function

        ''' <summary>
        ''' The As clause that defines the type of exception being caught.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AsClause As SimpleAsClauseSyntax
            Get
                Return GetRed(Of SimpleAsClauseSyntax)(_asClause, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as SimpleAsClauseSyntax) As CatchStatementSyntax
            return Update(Me.CatchKeyword, Me.IdentifierName, asClause, Me.WhenClause)
        End Function

        ''' <summary>
        ''' The "When" clause, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property WhenClause As CatchFilterClauseSyntax
            Get
                Return GetRed(Of CatchFilterClauseSyntax)(_whenClause, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhenClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhenClause(whenClause as CatchFilterClauseSyntax) As CatchStatementSyntax
            return Update(Me.CatchKeyword, Me.IdentifierName, Me.AsClause, whenClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._identifierName
                Case 2
                    Return Me._asClause
                Case 3
                    Return Me._whenClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.IdentifierName
                Case 2
                    Return Me.AsClause
                Case 3
                    Return Me.WhenClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCatchStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCatchStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CatchStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="catchKeyword">
        ''' The new CatchKeyword to update this CatchStatementSyntaxSyntax node with. If
        ''' not specified the current CatchKeyword will be used in the new
        ''' CatchStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifierName">
        ''' The new IdentifierName to update this CatchStatementSyntaxSyntax node with. If
        ''' not specified the current IdentifierName will be used in the new
        ''' CatchStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this CatchStatementSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new
        ''' CatchStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="whenClause">
        ''' The new WhenClause to update this CatchStatementSyntaxSyntax node with. If not
        ''' specified the current WhenClause will be used in the new
        ''' CatchStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(catchKeyword As SyntaxToken, identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CatchStatementSyntax)
            If catchKeyword.Node IsNot green._catchKeyword OrElse identifierName IsNot Me._identifierName OrElse asClause IsNot Me._asClause OrElse whenClause IsNot Me._whenClause Then
                Dim newNode = Syntax.CatchStatement(catchKeyword, identifierName, asClause, whenClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the When/Filter clause of a Catch statement
    ''' </summary>
    Public NotInheritable Class CatchFilterClauseSyntax
        Inherits SyntaxNode

        Friend _filter as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), whenKeyword As InternalSyntax.KeywordSyntax, filter As ExpressionSyntax)
            Me.New(New InternalSyntax.CatchFilterClauseSyntax(kind, errors, annotations, whenKeyword, DirectCast(filter.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "When" keyword
        ''' </summary>
        Public  ReadOnly Property WhenKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CatchFilterClauseSyntax)._whenKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhenKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhenKeyword(whenKeyword as SyntaxToken) As CatchFilterClauseSyntax
            return Update(whenKeyword, Me.Filter)
        End Function

        ''' <summary>
        ''' The filter expression
        ''' </summary>
        Public  ReadOnly Property Filter As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_filter, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Filter property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFilter(filter as ExpressionSyntax) As CatchFilterClauseSyntax
            return Update(Me.WhenKeyword, filter)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._filter
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Filter
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCatchFilterClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCatchFilterClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CatchFilterClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="whenKeyword">
        ''' The new WhenKeyword to update this CatchFilterClauseSyntaxSyntax node with. If
        ''' not specified the current WhenKeyword will be used in the new
        ''' CatchFilterClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="filter">
        ''' The new Filter to update this CatchFilterClauseSyntaxSyntax node with. If not
        ''' specified the current Filter will be used in the new
        ''' CatchFilterClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(whenKeyword As SyntaxToken, filter As ExpressionSyntax) As CatchFilterClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CatchFilterClauseSyntax)
            If whenKeyword.Node IsNot green._whenKeyword OrElse filter IsNot Me._filter Then
                Dim newNode = Syntax.CatchFilterClause(whenKeyword, filter)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the Finally part part of a Try...Catch...Finally...End Try. This
    ''' statement is always the Begin of a FinallyPart.
    ''' </summary>
    Public NotInheritable Class FinallyStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), finallyKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.FinallyStatementSyntax(kind, errors, annotations, finallyKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Finally" keyword.
        ''' </summary>
        Public  ReadOnly Property FinallyKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FinallyStatementSyntax)._finallyKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FinallyKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFinallyKeyword(finallyKeyword as SyntaxToken) As FinallyStatementSyntax
            return Update(finallyKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitFinallyStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitFinallyStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new FinallyStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="finallyKeyword">
        ''' The new FinallyKeyword to update this FinallyStatementSyntaxSyntax node with.
        ''' If not specified the current FinallyKeyword will be used in the new
        ''' FinallyStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(finallyKeyword As SyntaxToken) As FinallyStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.FinallyStatementSyntax)
            If finallyKeyword.Node IsNot green._finallyKeyword Then
                Dim newNode = Syntax.FinallyStatement(finallyKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Error" statement.
    ''' </summary>
    Public NotInheritable Class ErrorStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _errorNumber as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), errorKeyword As InternalSyntax.KeywordSyntax, errorNumber As ExpressionSyntax)
            Me.New(New InternalSyntax.ErrorStatementSyntax(kind, errors, annotations, errorKeyword, DirectCast(errorNumber.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Error" keyword.
        ''' </summary>
        Public  ReadOnly Property ErrorKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ErrorStatementSyntax)._errorKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ErrorKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithErrorKeyword(errorKeyword as SyntaxToken) As ErrorStatementSyntax
            return Update(errorKeyword, Me.ErrorNumber)
        End Function

        ''' <summary>
        ''' The expression that represents the error number.
        ''' </summary>
        Public  ReadOnly Property ErrorNumber As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_errorNumber, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ErrorNumber property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithErrorNumber(errorNumber as ExpressionSyntax) As ErrorStatementSyntax
            return Update(Me.ErrorKeyword, errorNumber)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._errorNumber
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.ErrorNumber
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitErrorStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitErrorStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ErrorStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="errorKeyword">
        ''' The new ErrorKeyword to update this ErrorStatementSyntaxSyntax node with. If
        ''' not specified the current ErrorKeyword will be used in the new
        ''' ErrorStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="errorNumber">
        ''' The new ErrorNumber to update this ErrorStatementSyntaxSyntax node with. If not
        ''' specified the current ErrorNumber will be used in the new
        ''' ErrorStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(errorKeyword As SyntaxToken, errorNumber As ExpressionSyntax) As ErrorStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ErrorStatementSyntax)
            If errorKeyword.Node IsNot green._errorKeyword OrElse errorNumber IsNot Me._errorNumber Then
                Dim newNode = Syntax.ErrorStatement(errorKeyword, errorNumber)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an OnError Goto statement.
    ''' </summary>
    Public NotInheritable Class OnErrorGoToStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _label as LabelSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), onKeyword As InternalSyntax.KeywordSyntax, errorKeyword As InternalSyntax.KeywordSyntax, goToKeyword As InternalSyntax.KeywordSyntax, minus As InternalSyntax.PunctuationSyntax, label As LabelSyntax)
            Me.New(New InternalSyntax.OnErrorGoToStatementSyntax(kind, errors, annotations, onKeyword, errorKeyword, goToKeyword, minus, DirectCast(label.Green, InternalSyntax.LabelSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "On" keyword
        ''' </summary>
        Public  ReadOnly Property OnKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorGoToStatementSyntax)._onKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OnKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOnKeyword(onKeyword as SyntaxToken) As OnErrorGoToStatementSyntax
            return Update(onKeyword, Me.ErrorKeyword, Me.GoToKeyword, Me.Minus, Me.Label)
        End Function

        ''' <summary>
        ''' The "Error" keyword.
        ''' </summary>
        Public  ReadOnly Property ErrorKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorGoToStatementSyntax)._errorKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ErrorKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithErrorKeyword(errorKeyword as SyntaxToken) As OnErrorGoToStatementSyntax
            return Update(Me.OnKeyword, errorKeyword, Me.GoToKeyword, Me.Minus, Me.Label)
        End Function

        ''' <summary>
        ''' The "GoTo" keyword
        ''' </summary>
        Public  ReadOnly Property GoToKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorGoToStatementSyntax)._goToKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GoToKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGoToKeyword(goToKeyword as SyntaxToken) As OnErrorGoToStatementSyntax
            return Update(Me.OnKeyword, Me.ErrorKeyword, goToKeyword, Me.Minus, Me.Label)
        End Function

        ''' <summary>
        ''' An optional minus for On Error Goto -1
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Minus As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorGoToStatementSyntax)._minus, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Minus property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMinus(minus as SyntaxToken) As OnErrorGoToStatementSyntax
            return Update(Me.OnKeyword, Me.ErrorKeyword, Me.GoToKeyword, minus, Me.Label)
        End Function

        ''' <summary>
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </summary>
        Public  ReadOnly Property Label As LabelSyntax
            Get
                Return GetRed(Of LabelSyntax)(_label, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Label property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLabel(label as LabelSyntax) As OnErrorGoToStatementSyntax
            return Update(Me.OnKeyword, Me.ErrorKeyword, Me.GoToKeyword, Me.Minus, label)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 4
                    Return Me._label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 4
                    Return Me.Label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOnErrorGoToStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOnErrorGoToStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OnErrorGoToStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The new OnKeyword to update this OnErrorGoToStatementSyntaxSyntax node with. If
        ''' not specified the current OnKeyword will be used in the new
        ''' OnErrorGoToStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The new ErrorKeyword to update this OnErrorGoToStatementSyntaxSyntax node with.
        ''' If not specified the current ErrorKeyword will be used in the new
        ''' OnErrorGoToStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="goToKeyword">
        ''' The new GoToKeyword to update this OnErrorGoToStatementSyntaxSyntax node with.
        ''' If not specified the current GoToKeyword will be used in the new
        ''' OnErrorGoToStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="minus">
        ''' The new Minus to update this OnErrorGoToStatementSyntaxSyntax node with. If not
        ''' specified the current Minus will be used in the new
        ''' OnErrorGoToStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="label">
        ''' The new Label to update this OnErrorGoToStatementSyntaxSyntax node with. If not
        ''' specified the current Label will be used in the new
        ''' OnErrorGoToStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OnErrorGoToStatementSyntax)
            If onKeyword.Node IsNot green._onKeyword OrElse errorKeyword.Node IsNot green._errorKeyword OrElse goToKeyword.Node IsNot green._goToKeyword OrElse minus.Node IsNot green._minus OrElse label IsNot Me._label Then
                Dim newNode = Syntax.OnErrorGoToStatement(Me.Kind, onKeyword, errorKeyword, goToKeyword, minus, label)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an OnError Resume Next statement.
    ''' </summary>
    Public NotInheritable Class OnErrorResumeNextStatementSyntax
        Inherits ExecutableStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), onKeyword As InternalSyntax.KeywordSyntax, errorKeyword As InternalSyntax.KeywordSyntax, resumeKeyword As InternalSyntax.KeywordSyntax, nextKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.OnErrorResumeNextStatementSyntax(kind, errors, annotations, onKeyword, errorKeyword, resumeKeyword, nextKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "On" keyword
        ''' </summary>
        Public  ReadOnly Property OnKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorResumeNextStatementSyntax)._onKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OnKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOnKeyword(onKeyword as SyntaxToken) As OnErrorResumeNextStatementSyntax
            return Update(onKeyword, Me.ErrorKeyword, Me.ResumeKeyword, Me.NextKeyword)
        End Function

        ''' <summary>
        ''' The "Error" keyword.
        ''' </summary>
        Public  ReadOnly Property ErrorKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorResumeNextStatementSyntax)._errorKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ErrorKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithErrorKeyword(errorKeyword as SyntaxToken) As OnErrorResumeNextStatementSyntax
            return Update(Me.OnKeyword, errorKeyword, Me.ResumeKeyword, Me.NextKeyword)
        End Function

        ''' <summary>
        ''' The "Resume" keyword.
        ''' </summary>
        Public  ReadOnly Property ResumeKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorResumeNextStatementSyntax)._resumeKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ResumeKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithResumeKeyword(resumeKeyword as SyntaxToken) As OnErrorResumeNextStatementSyntax
            return Update(Me.OnKeyword, Me.ErrorKeyword, resumeKeyword, Me.NextKeyword)
        End Function

        ''' <summary>
        ''' The "Next"
        ''' </summary>
        Public  ReadOnly Property NextKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OnErrorResumeNextStatementSyntax)._nextKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NextKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNextKeyword(nextKeyword as SyntaxToken) As OnErrorResumeNextStatementSyntax
            return Update(Me.OnKeyword, Me.ErrorKeyword, Me.ResumeKeyword, nextKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOnErrorResumeNextStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOnErrorResumeNextStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OnErrorResumeNextStatementSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The new OnKeyword to update this OnErrorResumeNextStatementSyntaxSyntax node
        ''' with. If not specified the current OnKeyword will be used in the new
        ''' OnErrorResumeNextStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The new ErrorKeyword to update this OnErrorResumeNextStatementSyntaxSyntax node
        ''' with. If not specified the current ErrorKeyword will be used in the new
        ''' OnErrorResumeNextStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="resumeKeyword">
        ''' The new ResumeKeyword to update this OnErrorResumeNextStatementSyntaxSyntax
        ''' node with. If not specified the current ResumeKeyword will be used in the new
        ''' OnErrorResumeNextStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="nextKeyword">
        ''' The new NextKeyword to update this OnErrorResumeNextStatementSyntaxSyntax node
        ''' with. If not specified the current NextKeyword will be used in the new
        ''' OnErrorResumeNextStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, resumeKeyword As SyntaxToken, nextKeyword As SyntaxToken) As OnErrorResumeNextStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OnErrorResumeNextStatementSyntax)
            If onKeyword.Node IsNot green._onKeyword OrElse errorKeyword.Node IsNot green._errorKeyword OrElse resumeKeyword.Node IsNot green._resumeKeyword OrElse nextKeyword.Node IsNot green._nextKeyword Then
                Dim newNode = Syntax.OnErrorResumeNextStatement(onKeyword, errorKeyword, resumeKeyword, nextKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Resume" statement. The Kind property can be used to determine if
    ''' this is a "Resume", "Resume Next" or "Resume label" statement.
    ''' </summary>
    Public NotInheritable Class ResumeStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _label as LabelSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), resumeKeyword As InternalSyntax.KeywordSyntax, label As LabelSyntax)
            Me.New(New InternalSyntax.ResumeStatementSyntax(kind, errors, annotations, resumeKeyword, if(label IsNot Nothing , DirectCast(label.Green, InternalSyntax.LabelSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Resume" keyword.
        ''' </summary>
        Public  ReadOnly Property ResumeKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ResumeStatementSyntax)._resumeKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ResumeKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithResumeKeyword(resumeKeyword as SyntaxToken) As ResumeStatementSyntax
            return Update(resumeKeyword, Me.Label)
        End Function

        ''' <summary>
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Label As LabelSyntax
            Get
                Return GetRed(Of LabelSyntax)(_label, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Label property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLabel(label as LabelSyntax) As ResumeStatementSyntax
            return Update(Me.ResumeKeyword, label)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Label
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitResumeStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitResumeStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ResumeStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="resumeKeyword">
        ''' The new ResumeKeyword to update this ResumeStatementSyntaxSyntax node with. If
        ''' not specified the current ResumeKeyword will be used in the new
        ''' ResumeStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="label">
        ''' The new Label to update this ResumeStatementSyntaxSyntax node with. If not
        ''' specified the current Label will be used in the new ResumeStatementSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ResumeStatementSyntax)
            If resumeKeyword.Node IsNot green._resumeKeyword OrElse label IsNot Me._label Then
                Dim newNode = Syntax.ResumeStatement(resumeKeyword, label)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Select Case block, including the Select Case that begins it, the
    ''' contains Case blocks and the End Select.
    ''' </summary>
    Public NotInheritable Class SelectBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as SelectStatementSyntax
        Friend _caseBlocks as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As SelectStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, caseBlocks As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.SelectBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.SelectStatementSyntax), beginTerminator, if(caseBlocks IsNot Nothing, caseBlocks.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The Select Case statement that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As SelectStatementSyntax
            Get
                Return GetRed(Of SelectStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as SelectStatementSyntax) As SelectBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.CaseBlocks, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SelectBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As SelectBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.CaseBlocks, Me.End)
        End Function

        ''' <summary>
        ''' A list of the contained Case blocks.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property CaseBlocks As SyntaxList(Of CaseBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_caseBlocks, 2)
                Return new SyntaxList(Of CaseBlockSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CaseBlocks property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCaseBlocks(caseBlocks as SyntaxList(Of CaseBlockSyntax)) As SelectBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, caseBlocks, Me.End)
        End Function

        Public Shadows Function AddCaseBlocks(ParamArray items As CaseBlockSyntax()) As SelectBlockSyntax
            Return Me.WithCaseBlocks(Me.CaseBlocks.Add(items))
        End Function

        ''' <summary>
        ''' The End Select statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As SelectBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.CaseBlocks, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._caseBlocks
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_caseBlocks, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSelectBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSelectBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SelectBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this SelectBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new SelectBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this SelectBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' SelectBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="caseBlocks">
        ''' The new CaseBlocks to update this SelectBlockSyntaxSyntax node with. If not
        ''' specified the current CaseBlocks will be used in the new
        ''' SelectBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this SelectBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new SelectBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As SelectStatementSyntax, beginTerminator As SyntaxToken, caseBlocks As SyntaxList(of CaseBlockSyntax), [end] As EndBlockStatementSyntax) As SelectBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SelectBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse caseBlocks <> Me.CaseBlocks OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.SelectBlock(begin, beginTerminator, caseBlocks, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Select Case statement. This statement always occurs as the Begin
    ''' of a SelectBlock.
    ''' </summary>
    Public NotInheritable Class SelectStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), selectKeyword As InternalSyntax.KeywordSyntax, caseKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.SelectStatementSyntax(kind, errors, annotations, selectKeyword, caseKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Select" keyword.
        ''' </summary>
        Public  ReadOnly Property SelectKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SelectStatementSyntax)._selectKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SelectKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSelectKeyword(selectKeyword as SyntaxToken) As SelectStatementSyntax
            return Update(selectKeyword, Me.CaseKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The "Case" keyword, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property CaseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SelectStatementSyntax)._caseKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CaseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCaseKeyword(caseKeyword as SyntaxToken) As SelectStatementSyntax
            return Update(Me.SelectKeyword, caseKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The value that branching is based on.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As SelectStatementSyntax
            return Update(Me.SelectKeyword, Me.CaseKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSelectStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSelectStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SelectStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="selectKeyword">
        ''' The new SelectKeyword to update this SelectStatementSyntaxSyntax node with. If
        ''' not specified the current SelectKeyword will be used in the new
        ''' SelectStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="caseKeyword">
        ''' The new CaseKeyword to update this SelectStatementSyntaxSyntax node with. If
        ''' not specified the current CaseKeyword will be used in the new
        ''' SelectStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this SelectStatementSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' SelectStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(selectKeyword As SyntaxToken, caseKeyword As SyntaxToken, expression As ExpressionSyntax) As SelectStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SelectStatementSyntax)
            If selectKeyword.Node IsNot green._selectKeyword OrElse caseKeyword.Node IsNot green._caseKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.SelectStatement(selectKeyword, caseKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a case statement and its subsequent block.
    ''' </summary>
    Public NotInheritable Class CaseBlockSyntax
        Inherits SyntaxNode

        Friend _begin as CaseStatementSyntax
        Friend _statements as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As CaseStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode)
            Me.New(New InternalSyntax.CaseBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.CaseStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The statement that begins the case block.
        ''' </summary>
        Public  ReadOnly Property Begin As CaseStatementSyntax
            Get
                Return GetRed(Of CaseStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as CaseStatementSyntax) As CaseBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements)
        End Function

        Public Shadows Function AddBeginCases(ParamArray items As CaseClauseSyntax()) As CaseBlockSyntax
            Dim _child = If (Me.Begin IsNot Nothing, Me.Begin, Syntax.CaseStatement())
            Return Me.WithBegin(_child.AddCases(items))
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As CaseBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements)
        End Function

        ''' <summary>
        ''' The statements contained in the case block. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As CaseBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this CaseBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new CaseBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this CaseBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' CaseBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this CaseBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new CaseBlockSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(begin As CaseStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements Then
                Dim newNode = Syntax.CaseBlock(begin, beginTerminator, statements)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Case or Case Else statement. This statement is always the Begin of
    ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
    ''' Kind=Case.
    ''' </summary>
    Public NotInheritable Class CaseStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _cases as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), caseKeyword As InternalSyntax.KeywordSyntax, cases As SyntaxNode)
            Me.New(New InternalSyntax.CaseStatementSyntax(kind, errors, annotations, caseKeyword, if(cases IsNot Nothing, cases.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Case" keyword
        ''' </summary>
        Public  ReadOnly Property CaseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseStatementSyntax)._caseKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CaseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCaseKeyword(caseKeyword as SyntaxToken) As CaseStatementSyntax
            return Update(caseKeyword, Me.Cases)
        End Function

        ''' <summary>
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </summary>
        Public  ReadOnly Property Cases As SeparatedSyntaxList(Of CaseClauseSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_cases, 1)
                Return new SeparatedSyntaxList(Of CaseClauseSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Cases property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCases(cases as SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            return Update(Me.CaseKeyword, cases)
        End Function

        Public Shadows Function AddCases(ParamArray items As CaseClauseSyntax()) As CaseStatementSyntax
            Return Me.WithCases(Me.Cases.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._cases
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_cases, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="caseKeyword">
        ''' The new CaseKeyword to update this CaseStatementSyntaxSyntax node with. If not
        ''' specified the current CaseKeyword will be used in the new
        ''' CaseStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="cases">
        ''' The new Cases to update this CaseStatementSyntaxSyntax node with. If not
        ''' specified the current Cases will be used in the new CaseStatementSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseStatementSyntax)
            If caseKeyword.Node IsNot green._caseKeyword OrElse cases <> Me.Cases Then
                Dim newNode = Syntax.CaseStatement(caseKeyword, cases)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a single clause in a case statement. An abstract node that is the
    ''' parent of different kinds of Case clauses.
    ''' </summary>
    Public MustInherit Class CaseClauseSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' The "Else" part in a Case Else statement.
    ''' </summary>
    Public NotInheritable Class CaseElseClauseSyntax
        Inherits CaseClauseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), elseKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.CaseElseClauseSyntax(kind, errors, annotations, elseKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Else" keyword.
        ''' </summary>
        Public  ReadOnly Property ElseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseElseClauseSyntax)._elseKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseKeyword(elseKeyword as SyntaxToken) As CaseElseClauseSyntax
            return Update(elseKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseElseClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseElseClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseElseClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' The new ElseKeyword to update this CaseElseClauseSyntaxSyntax node with. If not
        ''' specified the current ElseKeyword will be used in the new
        ''' CaseElseClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(elseKeyword As SyntaxToken) As CaseElseClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseElseClauseSyntax)
            If elseKeyword.Node IsNot green._elseKeyword Then
                Dim newNode = Syntax.CaseElseClause(elseKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a single value in a Case.
    ''' </summary>
    Public NotInheritable Class CaseValueClauseSyntax
        Inherits CaseClauseSyntax

        Friend _value as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), value As ExpressionSyntax)
            Me.New(New InternalSyntax.CaseValueClauseSyntax(kind, errors, annotations, DirectCast(value.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The expression that denotes the value being tested against.
        ''' </summary>
        Public  ReadOnly Property Value As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_value, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as ExpressionSyntax) As CaseValueClauseSyntax
            return Update(value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._value
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me.Value
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseValueClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseValueClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseValueClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="value">
        ''' The new Value to update this CaseValueClauseSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new CaseValueClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(value As ExpressionSyntax) As CaseValueClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseValueClauseSyntax)
            If value IsNot Me._value Then
                Dim newNode = Syntax.CaseValueClause(value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a range "expression To expression" in a Case.
    ''' </summary>
    Public NotInheritable Class CaseRangeClauseSyntax
        Inherits CaseClauseSyntax

        Friend _lowerBound as ExpressionSyntax
        Friend _upperBound as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lowerBound As ExpressionSyntax, toKeyword As InternalSyntax.KeywordSyntax, upperBound As ExpressionSyntax)
            Me.New(New InternalSyntax.CaseRangeClauseSyntax(kind, errors, annotations, DirectCast(lowerBound.Green, InternalSyntax.ExpressionSyntax), toKeyword, DirectCast(upperBound.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The lower bound of the range.
        ''' </summary>
        Public  ReadOnly Property LowerBound As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_lowerBound, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LowerBound property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLowerBound(lowerBound as ExpressionSyntax) As CaseRangeClauseSyntax
            return Update(lowerBound, Me.ToKeyword, Me.UpperBound)
        End Function

        ''' <summary>
        ''' The "To" keyword
        ''' </summary>
        Public  ReadOnly Property ToKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseRangeClauseSyntax)._toKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ToKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToKeyword(toKeyword as SyntaxToken) As CaseRangeClauseSyntax
            return Update(Me.LowerBound, toKeyword, Me.UpperBound)
        End Function

        ''' <summary>
        ''' The upper bound of the range.
        ''' </summary>
        Public  ReadOnly Property UpperBound As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_upperBound, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the UpperBound property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithUpperBound(upperBound as ExpressionSyntax) As CaseRangeClauseSyntax
            return Update(Me.LowerBound, Me.ToKeyword, upperBound)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._lowerBound
                Case 2
                    Return Me._upperBound
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.LowerBound
                Case 2
                    Return Me.UpperBound
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseRangeClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseRangeClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseRangeClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The new LowerBound to update this CaseRangeClauseSyntaxSyntax node with. If not
        ''' specified the current LowerBound will be used in the new
        ''' CaseRangeClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The new ToKeyword to update this CaseRangeClauseSyntaxSyntax node with. If not
        ''' specified the current ToKeyword will be used in the new
        ''' CaseRangeClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="upperBound">
        ''' The new UpperBound to update this CaseRangeClauseSyntaxSyntax node with. If not
        ''' specified the current UpperBound will be used in the new
        ''' CaseRangeClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As CaseRangeClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseRangeClauseSyntax)
            If lowerBound IsNot Me._lowerBound OrElse toKeyword.Node IsNot green._toKeyword OrElse upperBound IsNot Me._upperBound Then
                Dim newNode = Syntax.CaseRangeClause(lowerBound, toKeyword, upperBound)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
    ''' </summary>
    Public NotInheritable Class CaseRelationalClauseSyntax
        Inherits CaseClauseSyntax

        Friend _value as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), isKeyword As InternalSyntax.KeywordSyntax, operatorToken As InternalSyntax.PunctuationSyntax, value As ExpressionSyntax)
            Me.New(New InternalSyntax.CaseRelationalClauseSyntax(kind, errors, annotations, isKeyword, operatorToken, DirectCast(value.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Is" keyword, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property IsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseRelationalClauseSyntax)._isKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIsKeyword(isKeyword as SyntaxToken) As CaseRelationalClauseSyntax
            return Update(isKeyword, Me.OperatorToken, Me.Value)
        End Function

        ''' <summary>
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </summary>
        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CaseRelationalClauseSyntax)._operatorToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As CaseRelationalClauseSyntax
            return Update(Me.IsKeyword, operatorToken, Me.Value)
        End Function

        ''' <summary>
        ''' The expression that denotes the value being tested against.
        ''' </summary>
        Public  ReadOnly Property Value As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_value, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as ExpressionSyntax) As CaseRelationalClauseSyntax
            return Update(Me.IsKeyword, Me.OperatorToken, value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCaseRelationalClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCaseRelationalClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CaseRelationalClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The new IsKeyword to update this CaseRelationalClauseSyntaxSyntax node with. If
        ''' not specified the current IsKeyword will be used in the new
        ''' CaseRelationalClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this CaseRelationalClauseSyntaxSyntax node
        ''' with. If not specified the current OperatorToken will be used in the new
        ''' CaseRelationalClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="value">
        ''' The new Value to update this CaseRelationalClauseSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new
        ''' CaseRelationalClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CaseRelationalClauseSyntax)
            If isKeyword.Node IsNot green._isKeyword OrElse operatorToken.Node IsNot green._operatorToken OrElse value IsNot Me._value Then
                Dim newNode = Syntax.CaseRelationalClause(Me.Kind, isKeyword, operatorToken, value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "SyncLock" statement. This statement always occurs as the Begin
    ''' of a SyncLockBlock.
    ''' </summary>
    Public NotInheritable Class SyncLockStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), syncLockKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.SyncLockStatementSyntax(kind, errors, annotations, syncLockKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "SyncLock" keyword.
        ''' </summary>
        Public  ReadOnly Property SyncLockKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SyncLockStatementSyntax)._syncLockKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SyncLockKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSyncLockKeyword(syncLockKeyword as SyntaxToken) As SyncLockStatementSyntax
            return Update(syncLockKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression being synchronized on.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As SyncLockStatementSyntax
            return Update(Me.SyncLockKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSyncLockStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSyncLockStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SyncLockStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="syncLockKeyword">
        ''' The new SyncLockKeyword to update this SyncLockStatementSyntaxSyntax node with.
        ''' If not specified the current SyncLockKeyword will be used in the new
        ''' SyncLockStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this SyncLockStatementSyntaxSyntax node with. If
        ''' not specified the current Expression will be used in the new
        ''' SyncLockStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(syncLockKeyword As SyntaxToken, expression As ExpressionSyntax) As SyncLockStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SyncLockStatementSyntax)
            If syncLockKeyword.Node IsNot green._syncLockKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.SyncLockStatement(syncLockKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Do-Loop block. The Kind property can be used to determine if this
    ''' is a top-test, bottom-test or infinite loop.
    ''' </summary>
    Public NotInheritable Class DoLoopBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as DoStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as LoopStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As DoStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As LoopStatementSyntax)
            Me.New(New InternalSyntax.DoLoopBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.DoStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.LoopStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The Do statement that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As DoStatementSyntax
            Get
                Return GetRed(Of DoStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as DoStatementSyntax) As DoLoopBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DoLoopBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As DoLoopBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As DoLoopBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As DoLoopBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The Loop statement that ends the block.
        ''' </summary>
        Public  ReadOnly Property [End] As LoopStatementSyntax
            Get
                Return GetRed(Of LoopStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as LoopStatementSyntax) As DoLoopBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDoLoopBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDoLoopBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DoLoopBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this DoLoopBlockSyntaxSyntax node with. If not
        ''' specified the current Begin will be used in the new DoLoopBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this DoLoopBlockSyntaxSyntax node with. If
        ''' not specified the current BeginTerminator will be used in the new
        ''' DoLoopBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this DoLoopBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new
        ''' DoLoopBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this DoLoopBlockSyntaxSyntax node with. If not specified
        ''' the current End will be used in the new DoLoopBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As DoStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DoLoopBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.DoLoopBlock(Me.Kind, begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The Do statement that begins a Do-Loop block. This statement always occurs as
    ''' the Begin of a DoLoopBlock.
    ''' </summary>
    Public NotInheritable Class DoStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _whileUntilClause as WhileUntilClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), doKeyword As InternalSyntax.KeywordSyntax, whileUntilClause As WhileUntilClauseSyntax)
            Me.New(New InternalSyntax.DoStatementSyntax(kind, errors, annotations, doKeyword, if(whileUntilClause IsNot Nothing , DirectCast(whileUntilClause.Green, InternalSyntax.WhileUntilClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Do" keyword.
        ''' </summary>
        Public  ReadOnly Property DoKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DoStatementSyntax)._doKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DoKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDoKeyword(doKeyword as SyntaxToken) As DoStatementSyntax
            return Update(doKeyword, Me.WhileUntilClause)
        End Function

        ''' <summary>
        ''' The "While expression" or "Until expression" part of the Do statement, if
        ''' present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property WhileUntilClause As WhileUntilClauseSyntax
            Get
                Return GetRed(Of WhileUntilClauseSyntax)(_whileUntilClause, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhileUntilClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhileUntilClause(whileUntilClause as WhileUntilClauseSyntax) As DoStatementSyntax
            return Update(Me.DoKeyword, whileUntilClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._whileUntilClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.WhileUntilClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDoStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDoStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DoStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="doKeyword">
        ''' The new DoKeyword to update this DoStatementSyntaxSyntax node with. If not
        ''' specified the current DoKeyword will be used in the new DoStatementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="whileUntilClause">
        ''' The new WhileUntilClause to update this DoStatementSyntaxSyntax node with. If
        ''' not specified the current WhileUntilClause will be used in the new
        ''' DoStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(doKeyword As SyntaxToken, whileUntilClause As WhileUntilClauseSyntax) As DoStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DoStatementSyntax)
            If doKeyword.Node IsNot green._doKeyword OrElse whileUntilClause IsNot Me._whileUntilClause Then
                Dim newNode = Syntax.DoStatement(doKeyword, whileUntilClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The Loop statement that ends a Do-Loop block. This statement always occurs as
    ''' the End of a DoLoopBlock.
    ''' </summary>
    Public NotInheritable Class LoopStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _whileUntilClause as WhileUntilClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), loopKeyword As InternalSyntax.KeywordSyntax, whileUntilClause As WhileUntilClauseSyntax)
            Me.New(New InternalSyntax.LoopStatementSyntax(kind, errors, annotations, loopKeyword, if(whileUntilClause IsNot Nothing , DirectCast(whileUntilClause.Green, InternalSyntax.WhileUntilClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Loop" keyword.
        ''' </summary>
        Public  ReadOnly Property LoopKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LoopStatementSyntax)._loopKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LoopKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLoopKeyword(loopKeyword as SyntaxToken) As LoopStatementSyntax
            return Update(loopKeyword, Me.WhileUntilClause)
        End Function

        ''' <summary>
        ''' The "While expression" or "Until expression" part of the Loop statement, if
        ''' present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property WhileUntilClause As WhileUntilClauseSyntax
            Get
                Return GetRed(Of WhileUntilClauseSyntax)(_whileUntilClause, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhileUntilClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhileUntilClause(whileUntilClause as WhileUntilClauseSyntax) As LoopStatementSyntax
            return Update(Me.LoopKeyword, whileUntilClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._whileUntilClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.WhileUntilClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLoopStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLoopStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LoopStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="loopKeyword">
        ''' The new LoopKeyword to update this LoopStatementSyntaxSyntax node with. If not
        ''' specified the current LoopKeyword will be used in the new
        ''' LoopStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="whileUntilClause">
        ''' The new WhileUntilClause to update this LoopStatementSyntaxSyntax node with. If
        ''' not specified the current WhileUntilClause will be used in the new
        ''' LoopStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(loopKeyword As SyntaxToken, whileUntilClause As WhileUntilClauseSyntax) As LoopStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LoopStatementSyntax)
            If loopKeyword.Node IsNot green._loopKeyword OrElse whileUntilClause IsNot Me._whileUntilClause Then
                Dim newNode = Syntax.LoopStatement(loopKeyword, whileUntilClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "While expression" or "Until expression" in a Do or Loop
    ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
    ''' indicate which kind of clause.
    ''' </summary>
    Public NotInheritable Class WhileUntilClauseSyntax
        Inherits SyntaxNode

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), whileOrUntilKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax)
            Me.New(New InternalSyntax.WhileUntilClauseSyntax(kind, errors, annotations, whileOrUntilKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "While" or "Until" keyword.
        ''' </summary>
        Public  ReadOnly Property WhileOrUntilKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WhileUntilClauseSyntax)._whileOrUntilKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhileOrUntilKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhileOrUntilKeyword(whileOrUntilKeyword as SyntaxToken) As WhileUntilClauseSyntax
            return Update(whileOrUntilKeyword, Me.Condition)
        End Function

        ''' <summary>
        ''' The boolean expression after the While or Until.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As WhileUntilClauseSyntax
            return Update(Me.WhileOrUntilKeyword, condition)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWhileUntilClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWhileUntilClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WhileUntilClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="whileOrUntilKeyword">
        ''' The new WhileOrUntilKeyword to update this WhileUntilClauseSyntaxSyntax node
        ''' with. If not specified the current WhileOrUntilKeyword will be used in the new
        ''' WhileUntilClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this WhileUntilClauseSyntaxSyntax node with. If not
        ''' specified the current Condition will be used in the new
        ''' WhileUntilClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileUntilClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WhileUntilClauseSyntax)
            If whileOrUntilKeyword.Node IsNot green._whileOrUntilKeyword OrElse condition IsNot Me._condition Then
                Dim newNode = Syntax.WhileUntilClause(Me.Kind, whileOrUntilKeyword, condition)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The While statement that begins a While...End While block. This statement
    ''' always occurs as the Begin of a WhileBlock.
    ''' </summary>
    Public NotInheritable Class WhileStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), whileKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax)
            Me.New(New InternalSyntax.WhileStatementSyntax(kind, errors, annotations, whileKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "While" keyword.
        ''' </summary>
        Public  ReadOnly Property WhileKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WhileStatementSyntax)._whileKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhileKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhileKeyword(whileKeyword as SyntaxToken) As WhileStatementSyntax
            return Update(whileKeyword, Me.Condition)
        End Function

        ''' <summary>
        ''' The boolean expression that controls the While loop.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As WhileStatementSyntax
            return Update(Me.WhileKeyword, condition)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWhileStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWhileStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WhileStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="whileKeyword">
        ''' The new WhileKeyword to update this WhileStatementSyntaxSyntax node with. If
        ''' not specified the current WhileKeyword will be used in the new
        ''' WhileStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this WhileStatementSyntaxSyntax node with. If not
        ''' specified the current Condition will be used in the new
        ''' WhileStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(whileKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WhileStatementSyntax)
            If whileKeyword.Node IsNot green._whileKeyword OrElse condition IsNot Me._condition Then
                Dim newNode = Syntax.WhileStatement(whileKeyword, condition)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a For or For Each block, including the introducting statement, the
    ''' body and the "Next" (which can be omitted if a containing For has a Next with
    ''' multiple variables).
    ''' </summary>
    Public NotInheritable Class ForBlockSyntax
        Inherits ExecutableStatementSyntax

        Friend _begin as ExecutableStatementSyntax
        Friend _statements as SyntaxNode
        Friend _end as NextStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As ExecutableStatementSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As NextStatementSyntax)
            Me.New(New InternalSyntax.ForBlockSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.ExecutableStatementSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), if([end] IsNot Nothing , DirectCast([end].Green, InternalSyntax.NextStatementSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The For or For Each statement that begins the block.
        ''' </summary>
        Public  ReadOnly Property Begin As ExecutableStatementSyntax
            Get
                Return GetRed(Of ExecutableStatementSyntax)(_begin, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as ExecutableStatementSyntax) As ForBlockSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement.
        ''' </summary>
        Public  ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForBlockSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As ForBlockSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statements contained in the For or For Each loop. This might be an empty
        ''' list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As ForBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As ForBlockSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' The Next statement that ends the block. If two For statements are ended by a
        ''' single Next statement, the inner For will not have an EndStatment.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property [End] As NextStatementSyntax
            Get
                Return GetRed(Of NextStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as NextStatementSyntax) As ForBlockSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Public Shadows Function AddEndControlVariables(ParamArray items As ExpressionSyntax()) As ForBlockSyntax
            Dim _child = If (Me.End IsNot Nothing, Me.End, Syntax.NextStatement())
            Return Me.WithEnd(_child.AddControlVariables(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitForBlock(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitForBlock(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ForBlockSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this ForBlockSyntaxSyntax node with. If not specified
        ''' the current Begin will be used in the new ForBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this ForBlockSyntaxSyntax node with. If not
        ''' specified the current BeginTerminator will be used in the new
        ''' ForBlockSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this ForBlockSyntaxSyntax node with. If not
        ''' specified the current Statements will be used in the new ForBlockSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this ForBlockSyntaxSyntax node with. If not specified the
        ''' current End will be used in the new ForBlockSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As ExecutableStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As NextStatementSyntax) As ForBlockSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ForBlockSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.ForBlock(begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The For statement that begins a For-Next block. This statement always occurs as
    ''' the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
    ''' corresponding Next statement. However, multiple nested For statements are ended
    ''' by a single Next statement with multiple variables, then the inner For
    ''' statements will have End set to Nothing, and the Next statement is the End of
    ''' the outermost For statement that is being ended.
    ''' </summary>
    Public NotInheritable Class ForStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _controlVariable as SyntaxNode
        Friend _fromValue as ExpressionSyntax
        Friend _toValue as ExpressionSyntax
        Friend _stepClause as ForStepClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), forKeyword As InternalSyntax.KeywordSyntax, controlVariable As SyntaxNode, equalsToken As InternalSyntax.PunctuationSyntax, fromValue As ExpressionSyntax, toKeyword As InternalSyntax.KeywordSyntax, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax)
            Me.New(New InternalSyntax.ForStatementSyntax(kind, errors, annotations, forKeyword, DirectCast(controlVariable.Green, InternalSyntax.SyntaxNode), equalsToken, DirectCast(fromValue.Green, InternalSyntax.ExpressionSyntax), toKeyword, DirectCast(toValue.Green, InternalSyntax.ExpressionSyntax), if(stepClause IsNot Nothing , DirectCast(stepClause.Green, InternalSyntax.ForStepClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "For" keyword.
        ''' </summary>
        Public  ReadOnly Property ForKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForStatementSyntax)._forKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ForKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithForKeyword(forKeyword as SyntaxToken) As ForStatementSyntax
            return Update(forKeyword, Me.ControlVariable, Me.EqualsToken, Me.FromValue, Me.ToKeyword, Me.ToValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </summary>
        Public  ReadOnly Property ControlVariable As SyntaxNode
            Get
                Return GetRed(Of SyntaxNode)(_controlVariable, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ControlVariable property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithControlVariable(controlVariable as SyntaxNode) As ForStatementSyntax
            return Update(Me.ForKeyword, controlVariable, Me.EqualsToken, Me.FromValue, Me.ToKeyword, Me.ToValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' The "=" token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForStatementSyntax)._equalsToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As ForStatementSyntax
            return Update(Me.ForKeyword, Me.ControlVariable, equalsToken, Me.FromValue, Me.ToKeyword, Me.ToValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' The expression denoting the initial value of the iteration.
        ''' </summary>
        Public  ReadOnly Property FromValue As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_fromValue, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FromValue property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFromValue(fromValue as ExpressionSyntax) As ForStatementSyntax
            return Update(Me.ForKeyword, Me.ControlVariable, Me.EqualsToken, fromValue, Me.ToKeyword, Me.ToValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' The "To" keyword.
        ''' </summary>
        Public  ReadOnly Property ToKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForStatementSyntax)._toKeyword, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ToKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToKeyword(toKeyword as SyntaxToken) As ForStatementSyntax
            return Update(Me.ForKeyword, Me.ControlVariable, Me.EqualsToken, Me.FromValue, toKeyword, Me.ToValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' The expression denoting the final value of the iteration.
        ''' </summary>
        Public  ReadOnly Property ToValue As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_toValue, 5)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ToValue property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToValue(toValue as ExpressionSyntax) As ForStatementSyntax
            return Update(Me.ForKeyword, Me.ControlVariable, Me.EqualsToken, Me.FromValue, Me.ToKeyword, toValue, Me.StepClause)
        End Function

        ''' <summary>
        ''' The optional Step clause.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property StepClause As ForStepClauseSyntax
            Get
                Return GetRed(Of ForStepClauseSyntax)(_stepClause, 6)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StepClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStepClause(stepClause as ForStepClauseSyntax) As ForStatementSyntax
            return Update(Me.ForKeyword, Me.ControlVariable, Me.EqualsToken, Me.FromValue, Me.ToKeyword, Me.ToValue, stepClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._controlVariable
                Case 3
                    Return Me._fromValue
                Case 5
                    Return Me._toValue
                Case 6
                    Return Me._stepClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.ControlVariable
                Case 3
                    Return Me.FromValue
                Case 5
                    Return Me.ToValue
                Case 6
                    Return Me.StepClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 7
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitForStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitForStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ForStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="forKeyword">
        ''' The new ForKeyword to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current ForKeyword will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="controlVariable">
        ''' The new ControlVariable to update this ForStatementSyntaxSyntax node with. If
        ''' not specified the current ControlVariable will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current EqualsToken will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="fromValue">
        ''' The new FromValue to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current FromValue will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The new ToKeyword to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current ToKeyword will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="toValue">
        ''' The new ToValue to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current ToValue will be used in the new ForStatementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="stepClause">
        ''' The new StepClause to update this ForStatementSyntaxSyntax node with. If not
        ''' specified the current StepClause will be used in the new
        ''' ForStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(forKeyword As SyntaxToken, controlVariable As SyntaxNode, equalsToken As SyntaxToken, fromValue As ExpressionSyntax, toKeyword As SyntaxToken, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax) As ForStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ForStatementSyntax)
            If forKeyword.Node IsNot green._forKeyword OrElse controlVariable IsNot Me._controlVariable OrElse equalsToken.Node IsNot green._equalsToken OrElse fromValue IsNot Me._fromValue OrElse toKeyword.Node IsNot green._toKeyword OrElse toValue IsNot Me._toValue OrElse stepClause IsNot Me._stepClause Then
                Dim newNode = Syntax.ForStatement(forKeyword, controlVariable, equalsToken, fromValue, toKeyword, toValue, stepClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The Step clause in a For Statement.
    ''' </summary>
    Public NotInheritable Class ForStepClauseSyntax
        Inherits SyntaxNode

        Friend _stepValue as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), stepKeyword As InternalSyntax.KeywordSyntax, stepValue As ExpressionSyntax)
            Me.New(New InternalSyntax.ForStepClauseSyntax(kind, errors, annotations, stepKeyword, DirectCast(stepValue.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Step" keyword.
        ''' </summary>
        Public  ReadOnly Property StepKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForStepClauseSyntax)._stepKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StepKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStepKeyword(stepKeyword as SyntaxToken) As ForStepClauseSyntax
            return Update(stepKeyword, Me.StepValue)
        End Function

        ''' <summary>
        ''' The expression denoting the step increment.
        ''' </summary>
        Public  ReadOnly Property StepValue As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_stepValue, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StepValue property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStepValue(stepValue as ExpressionSyntax) As ForStepClauseSyntax
            return Update(Me.StepKeyword, stepValue)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._stepValue
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.StepValue
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitForStepClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitForStepClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ForStepClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="stepKeyword">
        ''' The new StepKeyword to update this ForStepClauseSyntaxSyntax node with. If not
        ''' specified the current StepKeyword will be used in the new
        ''' ForStepClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="stepValue">
        ''' The new StepValue to update this ForStepClauseSyntaxSyntax node with. If not
        ''' specified the current StepValue will be used in the new
        ''' ForStepClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(stepKeyword As SyntaxToken, stepValue As ExpressionSyntax) As ForStepClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ForStepClauseSyntax)
            If stepKeyword.Node IsNot green._stepKeyword OrElse stepValue IsNot Me._stepValue Then
                Dim newNode = Syntax.ForStepClause(stepKeyword, stepValue)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The For Each statement that begins a For Each-Next block. This statement always
    ''' occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
    ''' Body of that ForBlock. Most of the time, the End of that ForBlock is the
    ''' corresponding Next statement. However, multiple nested For statements are ended
    ''' by a single Next statement with multiple variables, then the inner For
    ''' statements will have End set to Nothing, and the Next statement is the End of
    ''' the outermost For statement that is being ended.
    ''' </summary>
    Public NotInheritable Class ForEachStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _controlVariable as SyntaxNode
        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), forKeyword As InternalSyntax.KeywordSyntax, eachKeyword As InternalSyntax.KeywordSyntax, controlVariable As SyntaxNode, inKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.ForEachStatementSyntax(kind, errors, annotations, forKeyword, eachKeyword, DirectCast(controlVariable.Green, InternalSyntax.SyntaxNode), inKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "For" keyword.
        ''' </summary>
        Public  ReadOnly Property ForKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForEachStatementSyntax)._forKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ForKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithForKeyword(forKeyword as SyntaxToken) As ForEachStatementSyntax
            return Update(forKeyword, Me.EachKeyword, Me.ControlVariable, Me.InKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The "Each" keyword.
        ''' </summary>
        Public  ReadOnly Property EachKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForEachStatementSyntax)._eachKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EachKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEachKeyword(eachKeyword as SyntaxToken) As ForEachStatementSyntax
            return Update(Me.ForKeyword, eachKeyword, Me.ControlVariable, Me.InKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </summary>
        Public  ReadOnly Property ControlVariable As SyntaxNode
            Get
                Return GetRed(Of SyntaxNode)(_controlVariable, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ControlVariable property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithControlVariable(controlVariable as SyntaxNode) As ForEachStatementSyntax
            return Update(Me.ForKeyword, Me.EachKeyword, controlVariable, Me.InKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The "In" keyword.
        ''' </summary>
        Public  ReadOnly Property InKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ForEachStatementSyntax)._inKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the InKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInKeyword(inKeyword as SyntaxToken) As ForEachStatementSyntax
            return Update(Me.ForKeyword, Me.EachKeyword, Me.ControlVariable, inKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression denoting the collection to iterate over.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ForEachStatementSyntax
            return Update(Me.ForKeyword, Me.EachKeyword, Me.ControlVariable, Me.InKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._controlVariable
                Case 4
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.ControlVariable
                Case 4
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitForEachStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitForEachStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ForEachStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="forKeyword">
        ''' The new ForKeyword to update this ForEachStatementSyntaxSyntax node with. If
        ''' not specified the current ForKeyword will be used in the new
        ''' ForEachStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="eachKeyword">
        ''' The new EachKeyword to update this ForEachStatementSyntaxSyntax node with. If
        ''' not specified the current EachKeyword will be used in the new
        ''' ForEachStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="controlVariable">
        ''' The new ControlVariable to update this ForEachStatementSyntaxSyntax node with.
        ''' If not specified the current ControlVariable will be used in the new
        ''' ForEachStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="inKeyword">
        ''' The new InKeyword to update this ForEachStatementSyntaxSyntax node with. If not
        ''' specified the current InKeyword will be used in the new
        ''' ForEachStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ForEachStatementSyntaxSyntax node with. If
        ''' not specified the current Expression will be used in the new
        ''' ForEachStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(forKeyword As SyntaxToken, eachKeyword As SyntaxToken, controlVariable As SyntaxNode, inKeyword As SyntaxToken, expression As ExpressionSyntax) As ForEachStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ForEachStatementSyntax)
            If forKeyword.Node IsNot green._forKeyword OrElse eachKeyword.Node IsNot green._eachKeyword OrElse controlVariable IsNot Me._controlVariable OrElse inKeyword.Node IsNot green._inKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.ForEachStatement(forKeyword, eachKeyword, controlVariable, inKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The Next statement that ends a For-Next or For Each-Next block. This statement
    ''' always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
    ''' and the body of the For-Next is the Body of that ForBlock. The Begin of that
    ''' ForBlock has the corresponding For or For Each statement.
    ''' </summary>
    Public NotInheritable Class NextStatementSyntax
        Inherits StatementSyntax

        Friend _controlVariables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), nextKeyword As InternalSyntax.KeywordSyntax, controlVariables As SyntaxNode)
            Me.New(New InternalSyntax.NextStatementSyntax(kind, errors, annotations, nextKeyword, if(controlVariables IsNot Nothing, controlVariables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Next" keyword.
        ''' </summary>
        Public  ReadOnly Property NextKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NextStatementSyntax)._nextKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NextKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNextKeyword(nextKeyword as SyntaxToken) As NextStatementSyntax
            return Update(nextKeyword, Me.ControlVariables)
        End Function

        ''' <summary>
        ''' The variables in the Next statement, if present
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property ControlVariables As SeparatedSyntaxList(Of ExpressionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_controlVariables, 1)
                Return new SeparatedSyntaxList(Of ExpressionSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ControlVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithControlVariables(controlVariables as SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax
            return Update(Me.NextKeyword, controlVariables)
        End Function

        Public Shadows Function AddControlVariables(ParamArray items As ExpressionSyntax()) As NextStatementSyntax
            Return Me.WithControlVariables(Me.ControlVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._controlVariables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_controlVariables, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNextStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNextStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NextStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="nextKeyword">
        ''' The new NextKeyword to update this NextStatementSyntaxSyntax node with. If not
        ''' specified the current NextKeyword will be used in the new
        ''' NextStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="controlVariables">
        ''' The new ControlVariables to update this NextStatementSyntaxSyntax node with. If
        ''' not specified the current ControlVariables will be used in the new
        ''' NextStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(nextKeyword As SyntaxToken, controlVariables As SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NextStatementSyntax)
            If nextKeyword.Node IsNot green._nextKeyword OrElse controlVariables <> Me.ControlVariables Then
                Dim newNode = Syntax.NextStatement(nextKeyword, controlVariables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' The Using statement that begins a Using block. This statement always occurs as
    ''' the Begin of a UsingBlock, and the body of the Using is the Body of that
    ''' UsingBlock.
    ''' </summary>
    Public NotInheritable Class UsingStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax
        Friend _variables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), usingKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax, variables As SyntaxNode)
            Me.New(New InternalSyntax.UsingStatementSyntax(kind, errors, annotations, usingKeyword, if(expression IsNot Nothing , DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), Nothing) , if(variables IsNot Nothing, variables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Using" keyword.
        ''' </summary>
        Public  ReadOnly Property UsingKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.UsingStatementSyntax)._usingKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the UsingKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithUsingKeyword(usingKeyword as SyntaxToken) As UsingStatementSyntax
            return Update(usingKeyword, Me.Expression, Me.Variables)
        End Function

        ''' <summary>
        ''' If the Using statement is of a form that does not declare a new variable, this
        ''' is the expression used in the using. Otherwise, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As UsingStatementSyntax
            return Update(Me.UsingKeyword, expression, Me.Variables)
        End Function

        ''' <summary>
        ''' If the Using statement is of a form that declares one or more new variables,
        ''' this is the list of variable declarations. Otherwise, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_variables, 2)
                Return new SeparatedSyntaxList(Of VariableDeclaratorSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Variables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVariables(variables as SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax
            return Update(Me.UsingKeyword, Me.Expression, variables)
        End Function

        Public Shadows Function AddVariables(ParamArray items As VariableDeclaratorSyntax()) As UsingStatementSyntax
            Return Me.WithVariables(Me.Variables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case 2
                    Return Me._variables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case 2
                    Return GetRed(Of SyntaxNode)(_variables, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitUsingStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitUsingStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new UsingStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="usingKeyword">
        ''' The new UsingKeyword to update this UsingStatementSyntaxSyntax node with. If
        ''' not specified the current UsingKeyword will be used in the new
        ''' UsingStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this UsingStatementSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' UsingStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="variables">
        ''' The new Variables to update this UsingStatementSyntaxSyntax node with. If not
        ''' specified the current Variables will be used in the new
        ''' UsingStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(usingKeyword As SyntaxToken, expression As ExpressionSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.UsingStatementSyntax)
            If usingKeyword.Node IsNot green._usingKeyword OrElse expression IsNot Me._expression OrElse variables <> Me.Variables Then
                Dim newNode = Syntax.UsingStatement(usingKeyword, expression, variables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Throw statement.
    ''' </summary>
    Public NotInheritable Class ThrowStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), throwKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.ThrowStatementSyntax(kind, errors, annotations, throwKeyword, if(expression IsNot Nothing , DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Throw" keyword
        ''' </summary>
        Public  ReadOnly Property ThrowKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ThrowStatementSyntax)._throwKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ThrowKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithThrowKeyword(throwKeyword as SyntaxToken) As ThrowStatementSyntax
            return Update(throwKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression denoting the value being thrown.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ThrowStatementSyntax
            return Update(Me.ThrowKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitThrowStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitThrowStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ThrowStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="throwKeyword">
        ''' The new ThrowKeyword to update this ThrowStatementSyntaxSyntax node with. If
        ''' not specified the current ThrowKeyword will be used in the new
        ''' ThrowStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ThrowStatementSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' ThrowStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(throwKeyword As SyntaxToken, expression As ExpressionSyntax) As ThrowStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ThrowStatementSyntax)
            If throwKeyword.Node IsNot green._throwKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.ThrowStatement(throwKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an assignment or compound assignment statement. Which one can be
    ''' determined by checking the Kind.
    ''' </summary>
    Public NotInheritable Class AssignmentStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _left as ExpressionSyntax
        Friend _right as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), left As ExpressionSyntax, operatorToken As InternalSyntax.PunctuationSyntax, right As ExpressionSyntax)
            Me.New(New InternalSyntax.AssignmentStatementSyntax(kind, errors, annotations, DirectCast(left.Green, InternalSyntax.ExpressionSyntax), operatorToken, DirectCast(right.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The target (left hand side) of the assignment.
        ''' </summary>
        Public  ReadOnly Property Left As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_left, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Left property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLeft(left as ExpressionSyntax) As AssignmentStatementSyntax
            return Update(left, Me.OperatorToken, Me.Right)
        End Function

        ''' <summary>
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </summary>
        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AssignmentStatementSyntax)._operatorToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As AssignmentStatementSyntax
            return Update(Me.Left, operatorToken, Me.Right)
        End Function

        ''' <summary>
        ''' The source (right hand side) of the assignment.
        ''' </summary>
        Public  ReadOnly Property Right As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_right, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Right property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRight(right as ExpressionSyntax) As AssignmentStatementSyntax
            return Update(Me.Left, Me.OperatorToken, right)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._left
                Case 2
                    Return Me._right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Left
                Case 2
                    Return Me.Right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAssignmentStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAssignmentStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AssignmentStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="left">
        ''' The new Left to update this AssignmentStatementSyntaxSyntax node with. If not
        ''' specified the current Left will be used in the new
        ''' AssignmentStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this AssignmentStatementSyntaxSyntax node with.
        ''' If not specified the current OperatorToken will be used in the new
        ''' AssignmentStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="right">
        ''' The new Right to update this AssignmentStatementSyntaxSyntax node with. If not
        ''' specified the current Right will be used in the new
        ''' AssignmentStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AssignmentStatementSyntax)
            If left IsNot Me._left OrElse operatorToken.Node IsNot green._operatorToken OrElse right IsNot Me._right Then
                Dim newNode = Syntax.AssignmentStatement(left, operatorToken, right)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represent an call statement (also known as a invocation statement).
    ''' </summary>
    Public NotInheritable Class CallStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _invocation as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), callKeyword As InternalSyntax.KeywordSyntax, invocation As ExpressionSyntax)
            Me.New(New InternalSyntax.CallStatementSyntax(kind, errors, annotations, callKeyword, DirectCast(invocation.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Call" keyword, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property CallKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CallStatementSyntax)._callKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CallKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCallKeyword(callKeyword as SyntaxToken) As CallStatementSyntax
            return Update(callKeyword, Me.Invocation)
        End Function

        ''' <summary>
        ''' The expression denoting the call. This could be an Invocation or a MemberAccess
        ''' (in the case where no parentheses were supplied.)
        ''' </summary>
        Public  ReadOnly Property Invocation As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_invocation, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Invocation property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInvocation(invocation as ExpressionSyntax) As CallStatementSyntax
            return Update(Me.CallKeyword, invocation)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._invocation
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Invocation
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCallStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCallStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CallStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="callKeyword">
        ''' The new CallKeyword to update this CallStatementSyntaxSyntax node with. If not
        ''' specified the current CallKeyword will be used in the new
        ''' CallStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="invocation">
        ''' The new Invocation to update this CallStatementSyntaxSyntax node with. If not
        ''' specified the current Invocation will be used in the new
        ''' CallStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(callKeyword As SyntaxToken, invocation As ExpressionSyntax) As CallStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CallStatementSyntax)
            If callKeyword.Node IsNot green._callKeyword OrElse invocation IsNot Me._invocation Then
                Dim newNode = Syntax.CallStatement(callKeyword, invocation)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an AddHandler or RemoveHandler statement. The Kind property
    ''' determines which one.
    ''' </summary>
    Public NotInheritable Class AddRemoveHandlerStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _eventExpression as ExpressionSyntax
        Friend _delegateExpression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), addHandlerOrRemoveHandlerKeyword As InternalSyntax.KeywordSyntax, eventExpression As ExpressionSyntax, commaToken As InternalSyntax.PunctuationSyntax, delegateExpression As ExpressionSyntax)
            Me.New(New InternalSyntax.AddRemoveHandlerStatementSyntax(kind, errors, annotations, addHandlerOrRemoveHandlerKeyword, DirectCast(eventExpression.Green, InternalSyntax.ExpressionSyntax), commaToken, DirectCast(delegateExpression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "AddHandler" or "RemoveHandler" keyword.
        ''' </summary>
        Public  ReadOnly Property AddHandlerOrRemoveHandlerKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AddRemoveHandlerStatementSyntax)._addHandlerOrRemoveHandlerKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AddHandlerOrRemoveHandlerKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAddHandlerOrRemoveHandlerKeyword(addHandlerOrRemoveHandlerKeyword as SyntaxToken) As AddRemoveHandlerStatementSyntax
            return Update(addHandlerOrRemoveHandlerKeyword, Me.EventExpression, Me.CommaToken, Me.DelegateExpression)
        End Function

        ''' <summary>
        ''' The event being accessed.
        ''' </summary>
        Public  ReadOnly Property EventExpression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_eventExpression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EventExpression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEventExpression(eventExpression as ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            return Update(Me.AddHandlerOrRemoveHandlerKeyword, eventExpression, Me.CommaToken, Me.DelegateExpression)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public  ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AddRemoveHandlerStatementSyntax)._commaToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As AddRemoveHandlerStatementSyntax
            return Update(Me.AddHandlerOrRemoveHandlerKeyword, Me.EventExpression, commaToken, Me.DelegateExpression)
        End Function

        ''' <summary>
        ''' The delegate being added or removed.
        ''' </summary>
        Public  ReadOnly Property DelegateExpression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_delegateExpression, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DelegateExpression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDelegateExpression(delegateExpression as ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            return Update(Me.AddHandlerOrRemoveHandlerKeyword, Me.EventExpression, Me.CommaToken, delegateExpression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._eventExpression
                Case 3
                    Return Me._delegateExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.EventExpression
                Case 3
                    Return Me.DelegateExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAddRemoveHandlerStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAddRemoveHandlerStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AddRemoveHandlerStatementSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="addHandlerOrRemoveHandlerKeyword">
        ''' The new AddHandlerOrRemoveHandlerKeyword to update this
        ''' AddRemoveHandlerStatementSyntaxSyntax node with. If not specified the current
        ''' AddHandlerOrRemoveHandlerKeyword will be used in the new
        ''' AddRemoveHandlerStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="eventExpression">
        ''' The new EventExpression to update this AddRemoveHandlerStatementSyntaxSyntax
        ''' node with. If not specified the current EventExpression will be used in the new
        ''' AddRemoveHandlerStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this AddRemoveHandlerStatementSyntaxSyntax node
        ''' with. If not specified the current CommaToken will be used in the new
        ''' AddRemoveHandlerStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The new DelegateExpression to update this AddRemoveHandlerStatementSyntaxSyntax
        ''' node with. If not specified the current DelegateExpression will be used in the
        ''' new AddRemoveHandlerStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AddRemoveHandlerStatementSyntax)
            If addHandlerOrRemoveHandlerKeyword.Node IsNot green._addHandlerOrRemoveHandlerKeyword OrElse eventExpression IsNot Me._eventExpression OrElse commaToken.Node IsNot green._commaToken OrElse delegateExpression IsNot Me._delegateExpression Then
                Dim newNode = Syntax.AddRemoveHandlerStatement(Me.Kind, addHandlerOrRemoveHandlerKeyword, eventExpression, commaToken, delegateExpression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represent a RaiseEvent statement.
    ''' </summary>
    Public NotInheritable Class RaiseEventStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _identifier as IdentifierNameSyntax
        Friend _argumentList as ArgumentListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), raiseEventKeyword As InternalSyntax.KeywordSyntax, identifier As IdentifierNameSyntax, argumentList As ArgumentListSyntax)
            Me.New(New InternalSyntax.RaiseEventStatementSyntax(kind, errors, annotations, raiseEventKeyword, DirectCast(identifier.Green, InternalSyntax.IdentifierNameSyntax), if(argumentList IsNot Nothing , DirectCast(argumentList.Green, InternalSyntax.ArgumentListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "RaiseEvent" keyword
        ''' </summary>
        Public  ReadOnly Property RaiseEventKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.RaiseEventStatementSyntax)._raiseEventKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the RaiseEventKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRaiseEventKeyword(raiseEventKeyword as SyntaxToken) As RaiseEventStatementSyntax
            return Update(raiseEventKeyword, Me.Identifier, Me.ArgumentList)
        End Function

        ''' <summary>
        ''' The name of the event being raised.
        ''' </summary>
        Public  ReadOnly Property Identifier As IdentifierNameSyntax
            Get
                Return GetRed(Of IdentifierNameSyntax)(_identifier, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as IdentifierNameSyntax) As RaiseEventStatementSyntax
            return Update(Me.RaiseEventKeyword, identifier, Me.ArgumentList)
        End Function

        ''' <summary>
        ''' The argument list, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArgumentList As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_argumentList, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArgumentList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArgumentList(argumentList as ArgumentListSyntax) As RaiseEventStatementSyntax
            return Update(Me.RaiseEventKeyword, Me.Identifier, argumentList)
        End Function

        Public Shadows Function AddArgumentListArguments(ParamArray items As ArgumentSyntax()) As RaiseEventStatementSyntax
            Dim _child = If (Me.ArgumentList IsNot Nothing, Me.ArgumentList, Syntax.ArgumentList())
            Return Me.WithArgumentList(_child.AddArguments(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._identifier
                Case 2
                    Return Me._argumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Identifier
                Case 2
                    Return Me.ArgumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitRaiseEventStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitRaiseEventStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new RaiseEventStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="raiseEventKeyword">
        ''' The new RaiseEventKeyword to update this RaiseEventStatementSyntaxSyntax node
        ''' with. If not specified the current RaiseEventKeyword will be used in the new
        ''' RaiseEventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="identifier">
        ''' The new Identifier to update this RaiseEventStatementSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' RaiseEventStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="argumentList">
        ''' The new ArgumentList to update this RaiseEventStatementSyntaxSyntax node with.
        ''' If not specified the current ArgumentList will be used in the new
        ''' RaiseEventStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(raiseEventKeyword As SyntaxToken, identifier As IdentifierNameSyntax, argumentList As ArgumentListSyntax) As RaiseEventStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.RaiseEventStatementSyntax)
            If raiseEventKeyword.Node IsNot green._raiseEventKeyword OrElse identifier IsNot Me._identifier OrElse argumentList IsNot Me._argumentList Then
                Dim newNode = Syntax.RaiseEventStatement(raiseEventKeyword, identifier, argumentList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "With" statement. This statement always occurs as the
    ''' BeginStatement of a WithBlock, and the body of the With is the Body of that
    ''' WithBlock.
    ''' </summary>
    Public NotInheritable Class WithStatementSyntax
        Inherits StatementSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), withKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.WithStatementSyntax(kind, errors, annotations, withKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "With" keyword.
        ''' </summary>
        Public  ReadOnly Property WithKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WithStatementSyntax)._withKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WithKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWithKeyword(withKeyword as SyntaxToken) As WithStatementSyntax
            return Update(withKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression that is the operand of the With statement.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As WithStatementSyntax
            return Update(Me.WithKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWithStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWithStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WithStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="withKeyword">
        ''' The new WithKeyword to update this WithStatementSyntaxSyntax node with. If not
        ''' specified the current WithKeyword will be used in the new
        ''' WithStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this WithStatementSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' WithStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(withKeyword As SyntaxToken, expression As ExpressionSyntax) As WithStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WithStatementSyntax)
            If withKeyword.Node IsNot green._withKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.WithStatement(withKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a ReDim statement.
    ''' </summary>
    Public NotInheritable Class ReDimStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _clauses as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), reDimKeyword As InternalSyntax.KeywordSyntax, preserveKeyword As InternalSyntax.KeywordSyntax, clauses As SyntaxNode)
            Me.New(New InternalSyntax.ReDimStatementSyntax(kind, errors, annotations, reDimKeyword, preserveKeyword, if(clauses IsNot Nothing, clauses.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "ReDim" keyword.
        ''' </summary>
        Public  ReadOnly Property ReDimKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReDimStatementSyntax)._reDimKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ReDimKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithReDimKeyword(reDimKeyword as SyntaxToken) As ReDimStatementSyntax
            return Update(reDimKeyword, Me.PreserveKeyword, Me.Clauses)
        End Function

        ''' <summary>
        ''' Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
        ''' Kind=RedimPreserve.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property PreserveKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReDimStatementSyntax)._preserveKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the PreserveKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithPreserveKeyword(preserveKeyword as SyntaxToken) As ReDimStatementSyntax
            return Update(Me.ReDimKeyword, preserveKeyword, Me.Clauses)
        End Function

        ''' <summary>
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </summary>
        Public  ReadOnly Property Clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_clauses, 2)
                Return new SeparatedSyntaxList(Of InvocationExpressionSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Clauses property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithClauses(clauses as SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            return Update(Me.ReDimKeyword, Me.PreserveKeyword, clauses)
        End Function

        Public Shadows Function AddClauses(ParamArray items As InvocationExpressionSyntax()) As ReDimStatementSyntax
            Return Me.WithClauses(Me.Clauses.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._clauses
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_clauses, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitReDimStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitReDimStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ReDimStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="reDimKeyword">
        ''' The new ReDimKeyword to update this ReDimStatementSyntaxSyntax node with. If
        ''' not specified the current ReDimKeyword will be used in the new
        ''' ReDimStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="preserveKeyword">
        ''' The new PreserveKeyword to update this ReDimStatementSyntaxSyntax node with. If
        ''' not specified the current PreserveKeyword will be used in the new
        ''' ReDimStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="clauses">
        ''' The new Clauses to update this ReDimStatementSyntaxSyntax node with. If not
        ''' specified the current Clauses will be used in the new
        ''' ReDimStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ReDimStatementSyntax)
            If reDimKeyword.Node IsNot green._reDimKeyword OrElse preserveKeyword.Node IsNot green._preserveKeyword OrElse clauses <> Me.Clauses Then
                Dim newNode = Syntax.ReDimStatement(reDimKeyword, preserveKeyword, clauses)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an "Erase" statement.
    ''' </summary>
    Public NotInheritable Class EraseStatementSyntax
        Inherits ExecutableStatementSyntax

        Friend _expressions as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), eraseKeyword As InternalSyntax.KeywordSyntax, expressions As SyntaxNode)
            Me.New(New InternalSyntax.EraseStatementSyntax(kind, errors, annotations, eraseKeyword, if(expressions IsNot Nothing, expressions.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Erase" keyword.
        ''' </summary>
        Public  ReadOnly Property EraseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EraseStatementSyntax)._eraseKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EraseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEraseKeyword(eraseKeyword as SyntaxToken) As EraseStatementSyntax
            return Update(eraseKeyword, Me.Expressions)
        End Function

        ''' <summary>
        ''' A list of expressions denoting the arrays to erase.
        ''' </summary>
        Public  ReadOnly Property Expressions As SeparatedSyntaxList(Of ExpressionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_expressions, 1)
                Return new SeparatedSyntaxList(Of ExpressionSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expressions property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpressions(expressions as SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax
            return Update(Me.EraseKeyword, expressions)
        End Function

        Public Shadows Function AddExpressions(ParamArray items As ExpressionSyntax()) As EraseStatementSyntax
            Return Me.WithExpressions(Me.Expressions.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expressions
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_expressions, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEraseStatement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEraseStatement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EraseStatementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="eraseKeyword">
        ''' The new EraseKeyword to update this EraseStatementSyntaxSyntax node with. If
        ''' not specified the current EraseKeyword will be used in the new
        ''' EraseStatementSyntaxSyntax node.
        ''' </param>
        ''' <param name="expressions">
        ''' The new Expressions to update this EraseStatementSyntaxSyntax node with. If not
        ''' specified the current Expressions will be used in the new
        ''' EraseStatementSyntaxSyntax node.
        ''' </param>
        Public Function Update(eraseKeyword As SyntaxToken, expressions As SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EraseStatementSyntax)
            If eraseKeyword.Node IsNot green._eraseKeyword OrElse expressions <> Me.Expressions Then
                Dim newNode = Syntax.EraseStatement(eraseKeyword, expressions)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An abstract base class for all node classes that define expressions.
    ''' </summary>
    Public MustInherit Class ExpressionSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents a literal. The kind of literal is determined by the Kind property:
    ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
    ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
    ''' determined by casting the associated Token to the correct type and getting the
    ''' value from the token.
    ''' </summary>
    Public NotInheritable Class LiteralExpressionSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), token As InternalSyntax.SyntaxToken)
            Me.New(New InternalSyntax.LiteralExpressionSyntax(kind, errors, annotations, token), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </summary>
        Public  ReadOnly Property Token As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LiteralExpressionSyntax)._token, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Token property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToken(token as SyntaxToken) As LiteralExpressionSyntax
            return Update(token)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLiteralExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLiteralExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LiteralExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="token">
        ''' The new Token to update this LiteralExpressionSyntaxSyntax node with. If not
        ''' specified the current Token will be used in the new
        ''' LiteralExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(token As SyntaxToken) As LiteralExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LiteralExpressionSyntax)
            If token.Node IsNot green._token Then
                Dim newNode = Syntax.LiteralExpression(Me.Kind, token)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a parenthesized expression.
    ''' </summary>
    Public NotInheritable Class ParenthesizedExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ParenthesizedExpressionSyntax(kind, errors, annotations, openParenToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ParenthesizedExpressionSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ParenthesizedExpressionSyntax
            return Update(openParenToken, Me.Expression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ParenthesizedExpressionSyntax
            return Update(Me.OpenParenToken, expression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ParenthesizedExpressionSyntax)._closeParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ParenthesizedExpressionSyntax
            return Update(Me.OpenParenToken, Me.Expression, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitParenthesizedExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitParenthesizedExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ParenthesizedExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ParenthesizedExpressionSyntaxSyntax node
        ''' with. If not specified the current OpenParenToken will be used in the new
        ''' ParenthesizedExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ParenthesizedExpressionSyntaxSyntax node
        ''' with. If not specified the current Expression will be used in the new
        ''' ParenthesizedExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ParenthesizedExpressionSyntaxSyntax node
        ''' with. If not specified the current CloseParenToken will be used in the new
        ''' ParenthesizedExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As ParenthesizedExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ParenthesizedExpressionSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse expression IsNot Me._expression OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ParenthesizedExpression(openParenToken, expression, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Identifies one of the special instances "Me", "MyClass" or "MyBase". The Kind
    ''' property identifies which.
    ''' </summary>
    Public MustInherit Class InstanceExpressionSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </summary>
        Public ReadOnly Property Keyword As SyntaxToken
            Get
                Return Me.GetKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.InstanceExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


    End Class

    ''' <summary>
    ''' Identifies the special instance "Me"
    ''' </summary>
    Public NotInheritable Class MeExpressionSyntax
        Inherits InstanceExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.MeExpressionSyntax(kind, errors, annotations, keyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MeExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As MeExpressionSyntax
            return Update(keyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMeExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMeExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MeExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this MeExpressionSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new MeExpressionSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken) As MeExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MeExpressionSyntax)
            If keyword.Node IsNot green._keyword Then
                Dim newNode = Syntax.MeExpression(keyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Identifies the special instance "MyBase"
    ''' </summary>
    Public NotInheritable Class MyBaseExpressionSyntax
        Inherits InstanceExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.MyBaseExpressionSyntax(kind, errors, annotations, keyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MyBaseExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As MyBaseExpressionSyntax
            return Update(keyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMyBaseExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMyBaseExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MyBaseExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this MyBaseExpressionSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' MyBaseExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken) As MyBaseExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MyBaseExpressionSyntax)
            If keyword.Node IsNot green._keyword Then
                Dim newNode = Syntax.MyBaseExpression(keyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Identifies the special instance "MyClass"
    ''' </summary>
    Public NotInheritable Class MyClassExpressionSyntax
        Inherits InstanceExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.MyClassExpressionSyntax(kind, errors, annotations, keyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MyClassExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As MyClassExpressionSyntax
            return Update(keyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMyClassExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMyClassExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MyClassExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this MyClassExpressionSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' MyClassExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken) As MyClassExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MyClassExpressionSyntax)
            If keyword.Node IsNot green._keyword Then
                Dim newNode = Syntax.MyClassExpression(keyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a GetType expression.
    ''' </summary>
    Public NotInheritable Class GetTypeExpressionSyntax
        Inherits ExpressionSyntax

        Friend _type as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), getTypeKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, type As TypeSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.GetTypeExpressionSyntax(kind, errors, annotations, getTypeKeyword, openParenToken, DirectCast(type.Green, InternalSyntax.TypeSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "GetType" keyword.
        ''' </summary>
        Public  ReadOnly Property GetTypeKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetTypeExpressionSyntax)._getTypeKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GetTypeKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGetTypeKeyword(getTypeKeyword as SyntaxToken) As GetTypeExpressionSyntax
            return Update(getTypeKeyword, Me.OpenParenToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetTypeExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As GetTypeExpressionSyntax
            return Update(Me.GetTypeKeyword, openParenToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The type to get the Type object for. This can be an open generic type.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As GetTypeExpressionSyntax
            return Update(Me.GetTypeKeyword, Me.OpenParenToken, type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetTypeExpressionSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As GetTypeExpressionSyntax
            return Update(Me.GetTypeKeyword, Me.OpenParenToken, Me.Type, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGetTypeExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGetTypeExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GetTypeExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="getTypeKeyword">
        ''' The new GetTypeKeyword to update this GetTypeExpressionSyntaxSyntax node with.
        ''' If not specified the current GetTypeKeyword will be used in the new
        ''' GetTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this GetTypeExpressionSyntaxSyntax node with.
        ''' If not specified the current OpenParenToken will be used in the new
        ''' GetTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this GetTypeExpressionSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new
        ''' GetTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this GetTypeExpressionSyntaxSyntax node with.
        ''' If not specified the current CloseParenToken will be used in the new
        ''' GetTypeExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(getTypeKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As GetTypeExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GetTypeExpressionSyntax)
            If getTypeKeyword.Node IsNot green._getTypeKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse type IsNot Me._type OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.GetTypeExpression(getTypeKeyword, openParenToken, type, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a TypeOf...Is or IsNot expression.
    ''' </summary>
    Public NotInheritable Class TypeOfExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax
        Friend _type as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), typeOfKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax, operatorToken As InternalSyntax.KeywordSyntax, type As TypeSyntax)
            Me.New(New InternalSyntax.TypeOfExpressionSyntax(kind, errors, annotations, typeOfKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), operatorToken, DirectCast(type.Green, InternalSyntax.TypeSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "TypeOf" keyword.
        ''' </summary>
        Public  ReadOnly Property TypeOfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeOfExpressionSyntax)._typeOfKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TypeOfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeOfKeyword(typeOfKeyword as SyntaxToken) As TypeOfExpressionSyntax
            return Update(typeOfKeyword, Me.Expression, Me.OperatorToken, Me.Type)
        End Function

        ''' <summary>
        ''' The expression being tested.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As TypeOfExpressionSyntax
            return Update(Me.TypeOfKeyword, expression, Me.OperatorToken, Me.Type)
        End Function

        ''' <summary>
        ''' The "Is" or "IsNot" keyword.
        ''' </summary>
        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeOfExpressionSyntax)._operatorToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As TypeOfExpressionSyntax
            return Update(Me.TypeOfKeyword, Me.Expression, operatorToken, Me.Type)
        End Function

        ''' <summary>
        ''' The name of the type being tested against.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As TypeOfExpressionSyntax
            return Update(Me.TypeOfKeyword, Me.Expression, Me.OperatorToken, type)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case 3
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case 3
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeOfExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeOfExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeOfExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="typeOfKeyword">
        ''' The new TypeOfKeyword to update this TypeOfExpressionSyntaxSyntax node with. If
        ''' not specified the current TypeOfKeyword will be used in the new
        ''' TypeOfExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this TypeOfExpressionSyntaxSyntax node with. If
        ''' not specified the current Expression will be used in the new
        ''' TypeOfExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this TypeOfExpressionSyntaxSyntax node with. If
        ''' not specified the current OperatorToken will be used in the new
        ''' TypeOfExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this TypeOfExpressionSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new TypeOfExpressionSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeOfExpressionSyntax)
            If typeOfKeyword.Node IsNot green._typeOfKeyword OrElse expression IsNot Me._expression OrElse operatorToken.Node IsNot green._operatorToken OrElse type IsNot Me._type Then
                Dim newNode = Syntax.TypeOfExpression(Me.Kind, typeOfKeyword, expression, operatorToken, type)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a GetXmlNamespace expression.
    ''' </summary>
    Public NotInheritable Class GetXmlNamespaceExpressionSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), getXmlNamespaceKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, name As InternalSyntax.XmlNameTokenSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.GetXmlNamespaceExpressionSyntax(kind, errors, annotations, getXmlNamespaceKeyword, openParenToken, name, closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "GetXmlNamespace" keyword.
        ''' </summary>
        Public  ReadOnly Property GetXmlNamespaceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetXmlNamespaceExpressionSyntax)._getXmlNamespaceKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GetXmlNamespaceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGetXmlNamespaceKeyword(getXmlNamespaceKeyword as SyntaxToken) As GetXmlNamespaceExpressionSyntax
            return Update(getXmlNamespaceKeyword, Me.OpenParenToken, Me.Name, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetXmlNamespaceExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As GetXmlNamespaceExpressionSyntax
            return Update(Me.GetXmlNamespaceKeyword, openParenToken, Me.Name, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The Xml namespace name being referenced.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetXmlNamespaceExpressionSyntax)._name, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As GetXmlNamespaceExpressionSyntax
            return Update(Me.GetXmlNamespaceKeyword, Me.OpenParenToken, name, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GetXmlNamespaceExpressionSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As GetXmlNamespaceExpressionSyntax
            return Update(Me.GetXmlNamespaceKeyword, Me.OpenParenToken, Me.Name, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGetXmlNamespaceExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGetXmlNamespaceExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GetXmlNamespaceExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="getXmlNamespaceKeyword">
        ''' The new GetXmlNamespaceKeyword to update this
        ''' GetXmlNamespaceExpressionSyntaxSyntax node with. If not specified the current
        ''' GetXmlNamespaceKeyword will be used in the new
        ''' GetXmlNamespaceExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this GetXmlNamespaceExpressionSyntaxSyntax
        ''' node with. If not specified the current OpenParenToken will be used in the new
        ''' GetXmlNamespaceExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this GetXmlNamespaceExpressionSyntaxSyntax node with. If
        ''' not specified the current Name will be used in the new
        ''' GetXmlNamespaceExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this GetXmlNamespaceExpressionSyntaxSyntax
        ''' node with. If not specified the current CloseParenToken will be used in the new
        ''' GetXmlNamespaceExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(getXmlNamespaceKeyword As SyntaxToken, openParenToken As SyntaxToken, name As SyntaxToken, closeParenToken As SyntaxToken) As GetXmlNamespaceExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GetXmlNamespaceExpressionSyntax)
            If getXmlNamespaceKeyword.Node IsNot green._getXmlNamespaceKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse name.Node IsNot green._name OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.GetXmlNamespaceExpression(getXmlNamespaceKeyword, openParenToken, name, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents member access (.name) or dictionary access (!name). The Kind
    ''' property determines which kind of access.
    ''' </summary>
    Public NotInheritable Class MemberAccessExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax
        Friend _name as SimpleNameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), expression As ExpressionSyntax, operatorToken As InternalSyntax.PunctuationSyntax, name As SimpleNameSyntax)
            Me.New(New InternalSyntax.MemberAccessExpressionSyntax(kind, errors, annotations, if(expression IsNot Nothing , DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), Nothing) , operatorToken, DirectCast(name.Green, InternalSyntax.SimpleNameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The expression on the left-hand-side of the "." or "!" token.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As MemberAccessExpressionSyntax
            return Update(expression, Me.OperatorToken, Me.Name)
        End Function

        ''' <summary>
        ''' The "." or "!" token.
        ''' </summary>
        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MemberAccessExpressionSyntax)._operatorToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As MemberAccessExpressionSyntax
            return Update(Me.Expression, operatorToken, Me.Name)
        End Function

        ''' <summary>
        ''' The identifier after the "." or "!" token.
        ''' </summary>
        Public  ReadOnly Property Name As SimpleNameSyntax
            Get
                Return GetRed(Of SimpleNameSyntax)(_name, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SimpleNameSyntax) As MemberAccessExpressionSyntax
            return Update(Me.Expression, Me.OperatorToken, name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._expression
                Case 2
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Expression
                Case 2
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMemberAccessExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMemberAccessExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MemberAccessExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="expression">
        ''' The new Expression to update this MemberAccessExpressionSyntaxSyntax node with.
        ''' If not specified the current Expression will be used in the new
        ''' MemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this MemberAccessExpressionSyntaxSyntax node
        ''' with. If not specified the current OperatorToken will be used in the new
        ''' MemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this MemberAccessExpressionSyntaxSyntax node with. If
        ''' not specified the current Name will be used in the new
        ''' MemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MemberAccessExpressionSyntax)
            If expression IsNot Me._expression OrElse operatorToken.Node IsNot green._operatorToken OrElse name IsNot Me._name Then
                Dim newNode = Syntax.MemberAccessExpression(expression, operatorToken, name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
    ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
    ''' Kind property determines which kind of access.
    ''' </summary>
    Public NotInheritable Class XmlMemberAccessExpressionSyntax
        Inherits ExpressionSyntax

        Friend _base as ExpressionSyntax
        Friend _name as XmlNodeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), base As ExpressionSyntax, token1 As InternalSyntax.PunctuationSyntax, token2 As InternalSyntax.PunctuationSyntax, token3 As InternalSyntax.PunctuationSyntax, name As XmlNodeSyntax)
            Me.New(New InternalSyntax.XmlMemberAccessExpressionSyntax(kind, errors, annotations, if(base IsNot Nothing , DirectCast(base.Green, InternalSyntax.ExpressionSyntax), Nothing) , token1, token2, token3, DirectCast(name.Green, InternalSyntax.XmlNodeSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Base As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_base, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Base property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBase(base as ExpressionSyntax) As XmlMemberAccessExpressionSyntax
            return Update(base, Me.Token1, Me.Token2, Me.Token3, Me.Name)
        End Function

        ''' <summary>
        ''' The initial dot "." part of the separator.
        ''' </summary>
        Public  ReadOnly Property Token1 As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlMemberAccessExpressionSyntax)._token1, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Token1 property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToken1(token1 as SyntaxToken) As XmlMemberAccessExpressionSyntax
            return Update(Me.Base, token1, Me.Token2, Me.Token3, Me.Name)
        End Function

        ''' <summary>
        ''' The "@" part of .@ or the second "." of "...".
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Token2 As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlMemberAccessExpressionSyntax)._token2, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Token2 property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToken2(token2 as SyntaxToken) As XmlMemberAccessExpressionSyntax
            return Update(Me.Base, Me.Token1, token2, Me.Token3, Me.Name)
        End Function

        ''' <summary>
        ''' The third "." in a "..." separator.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Token3 As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlMemberAccessExpressionSyntax)._token3, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Token3 property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToken3(token3 as SyntaxToken) As XmlMemberAccessExpressionSyntax
            return Update(Me.Base, Me.Token1, Me.Token2, token3, Me.Name)
        End Function

        ''' <summary>
        ''' The identifier after the ".", ".@" or "..."
        ''' </summary>
        Public  ReadOnly Property Name As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_name, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            return Update(Me.Base, Me.Token1, Me.Token2, Me.Token3, name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._base
                Case 4
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Base
                Case 4
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlMemberAccessExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlMemberAccessExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlMemberAccessExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="base">
        ''' The new Base to update this XmlMemberAccessExpressionSyntaxSyntax node with. If
        ''' not specified the current Base will be used in the new
        ''' XmlMemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="token1">
        ''' The new Token1 to update this XmlMemberAccessExpressionSyntaxSyntax node with.
        ''' If not specified the current Token1 will be used in the new
        ''' XmlMemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="token2">
        ''' The new Token2 to update this XmlMemberAccessExpressionSyntaxSyntax node with.
        ''' If not specified the current Token2 will be used in the new
        ''' XmlMemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="token3">
        ''' The new Token3 to update this XmlMemberAccessExpressionSyntaxSyntax node with.
        ''' If not specified the current Token3 will be used in the new
        ''' XmlMemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlMemberAccessExpressionSyntaxSyntax node with. If
        ''' not specified the current Name will be used in the new
        ''' XmlMemberAccessExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlMemberAccessExpressionSyntax)
            If base IsNot Me._base OrElse token1.Node IsNot green._token1 OrElse token2.Node IsNot green._token2 OrElse token3.Node IsNot green._token3 OrElse name IsNot Me._name Then
                Dim newNode = Syntax.XmlMemberAccessExpression(Me.Kind, base, token1, token2, token3, name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an invocation expression consisting of an invocation target and an
    ''' optional argument list or an array, parameterized property or object default
    ''' property index.
    ''' </summary>
    Public NotInheritable Class InvocationExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax
        Friend _argumentList as ArgumentListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), expression As ExpressionSyntax, argumentList As ArgumentListSyntax)
            Me.New(New InternalSyntax.InvocationExpressionSyntax(kind, errors, annotations, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), if(argumentList IsNot Nothing , DirectCast(argumentList.Green, InternalSyntax.ArgumentListSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The target of the call or index expression.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As InvocationExpressionSyntax
            return Update(expression, Me.ArgumentList)
        End Function

        ''' <summary>
        ''' The argument list.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArgumentList As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_argumentList, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArgumentList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArgumentList(argumentList as ArgumentListSyntax) As InvocationExpressionSyntax
            return Update(Me.Expression, argumentList)
        End Function

        Public Shadows Function AddArgumentListArguments(ParamArray items As ArgumentSyntax()) As InvocationExpressionSyntax
            Dim _child = If (Me.ArgumentList IsNot Nothing, Me.ArgumentList, Syntax.ArgumentList())
            Return Me.WithArgumentList(_child.AddArguments(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._expression
                Case 1
                    Return Me._argumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Expression
                Case 1
                    Return Me.ArgumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitInvocationExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitInvocationExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new InvocationExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="expression">
        ''' The new Expression to update this InvocationExpressionSyntaxSyntax node with.
        ''' If not specified the current Expression will be used in the new
        ''' InvocationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="argumentList">
        ''' The new ArgumentList to update this InvocationExpressionSyntaxSyntax node with.
        ''' If not specified the current ArgumentList will be used in the new
        ''' InvocationExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(expression As ExpressionSyntax, argumentList As ArgumentListSyntax) As InvocationExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.InvocationExpressionSyntax)
            If expression IsNot Me._expression OrElse argumentList IsNot Me._argumentList Then
                Dim newNode = Syntax.InvocationExpression(expression, argumentList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Base class for object, array and anonymous object creation expressions
    ''' </summary>
    Partial Public MustInherit Class NewExpressionSyntax
        Inherits ExpressionSyntax

        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The "New" keyword.
        ''' </summary>
        Public ReadOnly Property NewKeyword As SyntaxToken
            Get
                Return Me.GetNewKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetNewKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NewExpressionSyntax)._newKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


        ''' <summary>
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Return Me.GetAttributesCore()
            End Get
        End Property

        Friend Overridable Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
        End Function


    End Class

    ''' <summary>
    ''' Represents a New expression that creates a new non-array object, possibly with
    ''' a "With" or "From" clause.
    ''' </summary>
    Public NotInheritable Class ObjectCreationExpressionSyntax
        Inherits NewExpressionSyntax

        Friend _type as TypeSyntax
        Friend _argumentList as ArgumentListSyntax
        Friend _initializer as ObjectCreationInitializerSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), newKeyword As InternalSyntax.KeywordSyntax, attributes As SyntaxNode, type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax)
            Me.New(New InternalSyntax.ObjectCreationExpressionSyntax(kind, errors, annotations, newKeyword, if(attributes IsNot Nothing, attributes.Green, Nothing), DirectCast(type.Green, InternalSyntax.TypeSyntax), if(argumentList IsNot Nothing , DirectCast(argumentList.Green, InternalSyntax.ArgumentListSyntax), Nothing) , if(initializer IsNot Nothing , DirectCast(initializer.Green, InternalSyntax.ObjectCreationInitializerSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "New" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property NewKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ObjectCreationExpressionSyntax)._newKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetNewKeywordCore() As SyntaxToken
            Return Me.NewKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the NewKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNewKeyword(newKeyword as SyntaxToken) As ObjectCreationExpressionSyntax
            return Update(newKeyword, Me.Attributes, Me.Type, Me.ArgumentList, Me.Initializer)
        End Function

        ''' <summary>
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, attributes, Me.Type, Me.ArgumentList, Me.Initializer)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ObjectCreationExpressionSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' The type of the object being initialized.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As ObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, type, Me.ArgumentList, Me.Initializer)
        End Function

        ''' <summary>
        ''' The argument list, if present. If no argument list was supplied, Nothing is
        ''' returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArgumentList As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_argumentList, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArgumentList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArgumentList(argumentList as ArgumentListSyntax) As ObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, Me.Type, argumentList, Me.Initializer)
        End Function

        Public Shadows Function AddArgumentListArguments(ParamArray items As ArgumentSyntax()) As ObjectCreationExpressionSyntax
            Dim _child = If (Me.ArgumentList IsNot Nothing, Me.ArgumentList, Syntax.ArgumentList())
            Return Me.WithArgumentList(_child.AddArguments(items))
        End Function

        ''' <summary>
        ''' An optional From or With clause to initialize the new object.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Initializer As ObjectCreationInitializerSyntax
            Get
                Return GetRed(Of ObjectCreationInitializerSyntax)(_initializer, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, Me.Type, Me.ArgumentList, initializer)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._attributes
                Case 2
                    Return Me._type
                Case 3
                    Return Me._argumentList
                Case 4
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_attributes, 1)
                Case 2
                    Return Me.Type
                Case 3
                    Return Me.ArgumentList
                Case 4
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitObjectCreationExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitObjectCreationExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ObjectCreationExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The new NewKeyword to update this ObjectCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current NewKeyword will be used in the new
        ''' ObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this ObjectCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current Attributes will be used in the new
        ''' ObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this ObjectCreationExpressionSyntaxSyntax node with. If
        ''' not specified the current Type will be used in the new
        ''' ObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="argumentList">
        ''' The new ArgumentList to update this ObjectCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current ArgumentList will be used in the new
        ''' ObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this ObjectCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current Initializer will be used in the new
        ''' ObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ObjectCreationExpressionSyntax)
            If newKeyword.Node IsNot green._newKeyword OrElse attributes <> Me.Attributes OrElse type IsNot Me._type OrElse argumentList IsNot Me._argumentList OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.ObjectCreationExpression(newKeyword, attributes, type, argumentList, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a New expression that create an object of anonymous type.
    ''' </summary>
    Public NotInheritable Class AnonymousObjectCreationExpressionSyntax
        Inherits NewExpressionSyntax

        Friend _initializer as ObjectMemberInitializerSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), newKeyword As InternalSyntax.KeywordSyntax, attributes As SyntaxNode, initializer As ObjectMemberInitializerSyntax)
            Me.New(New InternalSyntax.AnonymousObjectCreationExpressionSyntax(kind, errors, annotations, newKeyword, if(attributes IsNot Nothing, attributes.Green, Nothing), DirectCast(initializer.Green, InternalSyntax.ObjectMemberInitializerSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "New" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property NewKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AnonymousObjectCreationExpressionSyntax)._newKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetNewKeywordCore() As SyntaxToken
            Return Me.NewKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the NewKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNewKeyword(newKeyword as SyntaxToken) As AnonymousObjectCreationExpressionSyntax
            return Update(newKeyword, Me.Attributes, Me.Initializer)
        End Function

        ''' <summary>
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As AnonymousObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, attributes, Me.Initializer)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As AnonymousObjectCreationExpressionSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' The With clause to initialize the new object.
        ''' </summary>
        Public  ReadOnly Property Initializer As ObjectMemberInitializerSyntax
            Get
                Return GetRed(Of ObjectMemberInitializerSyntax)(_initializer, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, initializer)
        End Function

        Public Shadows Function AddInitializerInitializers(ParamArray items As FieldInitializerSyntax()) As AnonymousObjectCreationExpressionSyntax
            Dim _child = If (Me.Initializer IsNot Nothing, Me.Initializer, Syntax.ObjectMemberInitializer())
            Return Me.WithInitializer(_child.AddInitializers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._attributes
                Case 2
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_attributes, 1)
                Case 2
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAnonymousObjectCreationExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAnonymousObjectCreationExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AnonymousObjectCreationExpressionSyntaxSyntax node with the
        ''' specified changes.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The new NewKeyword to update this AnonymousObjectCreationExpressionSyntaxSyntax
        ''' node with. If not specified the current NewKeyword will be used in the new
        ''' AnonymousObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this AnonymousObjectCreationExpressionSyntaxSyntax
        ''' node with. If not specified the current Attributes will be used in the new
        ''' AnonymousObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this
        ''' AnonymousObjectCreationExpressionSyntaxSyntax node with. If not specified the
        ''' current Initializer will be used in the new
        ''' AnonymousObjectCreationExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AnonymousObjectCreationExpressionSyntax)
            If newKeyword.Node IsNot green._newKeyword OrElse attributes <> Me.Attributes OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.AnonymousObjectCreationExpression(newKeyword, attributes, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an expression that creates a new array.
    ''' </summary>
    Public NotInheritable Class ArrayCreationExpressionSyntax
        Inherits NewExpressionSyntax

        Friend _type as TypeSyntax
        Friend _arrayBounds as ArgumentListSyntax
        Friend _rankSpecifiers as SyntaxNode
        Friend _initializer as CollectionInitializerSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), newKeyword As InternalSyntax.KeywordSyntax, attributes As SyntaxNode, type As TypeSyntax, arrayBounds As ArgumentListSyntax, rankSpecifiers As SyntaxNode, initializer As CollectionInitializerSyntax)
            Me.New(New InternalSyntax.ArrayCreationExpressionSyntax(kind, errors, annotations, newKeyword, if(attributes IsNot Nothing, attributes.Green, Nothing), DirectCast(type.Green, InternalSyntax.TypeSyntax), if(arrayBounds IsNot Nothing , DirectCast(arrayBounds.Green, InternalSyntax.ArgumentListSyntax), Nothing) , if(rankSpecifiers IsNot Nothing, rankSpecifiers.Green, Nothing), DirectCast(initializer.Green, InternalSyntax.CollectionInitializerSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "New" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property NewKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ArrayCreationExpressionSyntax)._newKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetNewKeywordCore() As SyntaxToken
            Return Me.NewKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the NewKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNewKeyword(newKeyword as SyntaxToken) As ArrayCreationExpressionSyntax
            return Update(newKeyword, Me.Attributes, Me.Type, Me.ArrayBounds, Me.RankSpecifiers, Me.Initializer)
        End Function

        ''' <summary>
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 1)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As ArrayCreationExpressionSyntax
            return Update(Me.NewKeyword, attributes, Me.Type, Me.ArrayBounds, Me.RankSpecifiers, Me.Initializer)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As ArrayCreationExpressionSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' The element type of the array being created.
        ''' </summary>
        Public  ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As ArrayCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, type, Me.ArrayBounds, Me.RankSpecifiers, Me.Initializer)
        End Function

        ''' <summary>
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ArrayBounds As ArgumentListSyntax
            Get
                Return GetRed(Of ArgumentListSyntax)(_arrayBounds, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ArrayBounds property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArrayBounds(arrayBounds as ArgumentListSyntax) As ArrayCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, Me.Type, arrayBounds, Me.RankSpecifiers, Me.Initializer)
        End Function

        Public Shadows Function AddArrayBoundsArguments(ParamArray items As ArgumentSyntax()) As ArrayCreationExpressionSyntax
            Dim _child = If (Me.ArrayBounds IsNot Nothing, Me.ArrayBounds, Syntax.ArgumentList())
            Return Me.WithArrayBounds(_child.AddArguments(items))
        End Function

        ''' <summary>
        ''' A list of array modifiers such as "()" or "(,)". If no array modifiers were
        ''' present, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property RankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_rankSpecifiers, 4)
                Return new SyntaxList(Of ArrayRankSpecifierSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the RankSpecifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRankSpecifiers(rankSpecifiers as SyntaxList(Of ArrayRankSpecifierSyntax)) As ArrayCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, Me.Type, Me.ArrayBounds, rankSpecifiers, Me.Initializer)
        End Function

        Public Shadows Function AddRankSpecifiers(ParamArray items As ArrayRankSpecifierSyntax()) As ArrayCreationExpressionSyntax
            Return Me.WithRankSpecifiers(Me.RankSpecifiers.Add(items))
        End Function

        ''' <summary>
        ''' The initializer including the braces.
        ''' </summary>
        Public  ReadOnly Property Initializer As CollectionInitializerSyntax
            Get
                Return GetRed(Of CollectionInitializerSyntax)(_initializer, 5)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializer property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializer(initializer as CollectionInitializerSyntax) As ArrayCreationExpressionSyntax
            return Update(Me.NewKeyword, Me.Attributes, Me.Type, Me.ArrayBounds, Me.RankSpecifiers, initializer)
        End Function

        Public Shadows Function AddInitializerInitializers(ParamArray items As ExpressionSyntax()) As ArrayCreationExpressionSyntax
            Dim _child = If (Me.Initializer IsNot Nothing, Me.Initializer, Syntax.CollectionInitializer())
            Return Me.WithInitializer(_child.AddInitializers(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._attributes
                Case 2
                    Return Me._type
                Case 3
                    Return Me._arrayBounds
                Case 4
                    Return Me._rankSpecifiers
                Case 5
                    Return Me._initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_attributes, 1)
                Case 2
                    Return Me.Type
                Case 3
                    Return Me.ArrayBounds
                Case 4
                    Return GetRed(Of SyntaxNode)(_rankSpecifiers, 4)
                Case 5
                    Return Me.Initializer
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitArrayCreationExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitArrayCreationExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ArrayCreationExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The new NewKeyword to update this ArrayCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current NewKeyword will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this ArrayCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current Attributes will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this ArrayCreationExpressionSyntaxSyntax node with. If
        ''' not specified the current Type will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The new ArrayBounds to update this ArrayCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current ArrayBounds will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="rankSpecifiers">
        ''' The new RankSpecifiers to update this ArrayCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current RankSpecifiers will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializer">
        ''' The new Initializer to update this ArrayCreationExpressionSyntaxSyntax node
        ''' with. If not specified the current Initializer will be used in the new
        ''' ArrayCreationExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, arrayBounds As ArgumentListSyntax, rankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax), initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ArrayCreationExpressionSyntax)
            If newKeyword.Node IsNot green._newKeyword OrElse attributes <> Me.Attributes OrElse type IsNot Me._type OrElse arrayBounds IsNot Me._arrayBounds OrElse rankSpecifiers <> Me.RankSpecifiers OrElse initializer IsNot Me._initializer Then
                Dim newNode = Syntax.ArrayCreationExpression(newKeyword, attributes, type, arrayBounds, rankSpecifiers, initializer)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an expression that creates a new array wihout naming the element
    ''' type.
    ''' </summary>
    Public NotInheritable Class CollectionInitializerSyntax
        Inherits ExpressionSyntax

        Friend _initializers as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openBraceToken As InternalSyntax.PunctuationSyntax, initializers As SyntaxNode, closeBraceToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.CollectionInitializerSyntax(kind, errors, annotations, openBraceToken, if(initializers IsNot Nothing, initializers.Green, Nothing), closeBraceToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "{" token.
        ''' </summary>
        Public  ReadOnly Property OpenBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CollectionInitializerSyntax)._openBraceToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenBraceToken(openBraceToken as SyntaxToken) As CollectionInitializerSyntax
            return Update(openBraceToken, Me.Initializers, Me.CloseBraceToken)
        End Function

        ''' <summary>
        ''' The list of initializers between the braces.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Initializers As SeparatedSyntaxList(Of ExpressionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_initializers, 1)
                Return new SeparatedSyntaxList(Of ExpressionSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Initializers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInitializers(initializers as SeparatedSyntaxList(Of ExpressionSyntax)) As CollectionInitializerSyntax
            return Update(Me.OpenBraceToken, initializers, Me.CloseBraceToken)
        End Function

        Public Shadows Function AddInitializers(ParamArray items As ExpressionSyntax()) As CollectionInitializerSyntax
            Return Me.WithInitializers(Me.Initializers.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "}" token.
        ''' </summary>
        Public  ReadOnly Property CloseBraceToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CollectionInitializerSyntax)._closeBraceToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseBraceToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseBraceToken(closeBraceToken as SyntaxToken) As CollectionInitializerSyntax
            return Update(Me.OpenBraceToken, Me.Initializers, closeBraceToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._initializers
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_initializers, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCollectionInitializer(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCollectionInitializer(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CollectionInitializerSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="openBraceToken">
        ''' The new OpenBraceToken to update this CollectionInitializerSyntaxSyntax node
        ''' with. If not specified the current OpenBraceToken will be used in the new
        ''' CollectionInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="initializers">
        ''' The new Initializers to update this CollectionInitializerSyntaxSyntax node
        ''' with. If not specified the current Initializers will be used in the new
        ''' CollectionInitializerSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The new CloseBraceToken to update this CollectionInitializerSyntaxSyntax node
        ''' with. If not specified the current CloseBraceToken will be used in the new
        ''' CollectionInitializerSyntaxSyntax node.
        ''' </param>
        Public Function Update(openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of ExpressionSyntax), closeBraceToken As SyntaxToken) As CollectionInitializerSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CollectionInitializerSyntax)
            If openBraceToken.Node IsNot green._openBraceToken OrElse initializers <> Me.Initializers OrElse closeBraceToken.Node IsNot green._closeBraceToken Then
                Dim newNode = Syntax.CollectionInitializer(openBraceToken, initializers, closeBraceToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a CType, DirectCast or TryCast conversion expression. The Kind
    ''' property determines which kind of cast it is.
    ''' </summary>
    Public MustInherit Class CastExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax
        Friend _type as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </summary>
        Public ReadOnly Property Keyword As SyntaxToken
            Get
                Return Me.GetKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CastExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public ReadOnly Property OpenParenToken As SyntaxToken
            Get
                Return Me.GetOpenParenTokenCore()
            End Get
        End Property

        Friend Overridable Function GetOpenParenTokenCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CastExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
        End Function


        ''' <summary>
        ''' The expression being cast.
        ''' </summary>
        Public ReadOnly Property Expression As ExpressionSyntax
            Get
                Return Me.GetExpressionCore()
            End Get
        End Property

        Friend Overridable Function GetExpressionCore() As ExpressionSyntax
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
        End Function


        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public ReadOnly Property CommaToken As SyntaxToken
            Get
                Return Me.GetCommaTokenCore()
            End Get
        End Property

        Friend Overridable Function GetCommaTokenCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CastExpressionSyntax)._commaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
        End Function


        ''' <summary>
        ''' The type the expression is being cast to.
        ''' </summary>
        Public ReadOnly Property Type As TypeSyntax
            Get
                Return Me.GetTypeCore()
            End Get
        End Property

        Friend Overridable Function GetTypeCore() As TypeSyntax
                Return GetRed(Of TypeSyntax)(_type, 4)
        End Function


        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public ReadOnly Property CloseParenToken As SyntaxToken
            Get
                Return Me.GetCloseParenTokenCore()
            End Get
        End Property

        Friend Overridable Function GetCloseParenTokenCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CastExpressionSyntax)._closeParenToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
        End Function


    End Class

    Public NotInheritable Class CTypeExpressionSyntax
        Inherits CastExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, commaToken As InternalSyntax.PunctuationSyntax, type As TypeSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.CTypeExpressionSyntax(kind, errors, annotations, keyword, openParenToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), commaToken, DirectCast(type.Green, InternalSyntax.TypeSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CTypeExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As CTypeExpressionSyntax
            return Update(keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public Shadows ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CTypeExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetOpenParenTokenCore() As SyntaxToken
            Return Me.OpenParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As CTypeExpressionSyntax
            return Update(Me.Keyword, openParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The expression being cast.
        ''' </summary>
        Public Shadows ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        Friend Overrides Function GetExpressionCore() As ExpressionSyntax
            Return Me.Expression
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As CTypeExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public Shadows ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CTypeExpressionSyntax)._commaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetCommaTokenCore() As SyntaxToken
            Return Me.CommaToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As CTypeExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, commaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The type the expression is being cast to.
        ''' </summary>
        Public Shadows ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeCore() As TypeSyntax
            Return Me.Type
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As CTypeExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public Shadows ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CTypeExpressionSyntax)._closeParenToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        Friend Overrides Function GetCloseParenTokenCore() As SyntaxToken
            Return Me.CloseParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As CTypeExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._expression
                Case 4
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Expression
                Case 4
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCTypeExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCTypeExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CTypeExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this CTypeExpressionSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' CTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this CTypeExpressionSyntaxSyntax node with. If
        ''' not specified the current OpenParenToken will be used in the new
        ''' CTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this CTypeExpressionSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' CTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this CTypeExpressionSyntaxSyntax node with. If not
        ''' specified the current CommaToken will be used in the new
        ''' CTypeExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this CTypeExpressionSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new CTypeExpressionSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this CTypeExpressionSyntaxSyntax node with.
        ''' If not specified the current CloseParenToken will be used in the new
        ''' CTypeExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As CTypeExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CTypeExpressionSyntax)
            If keyword.Node IsNot green._keyword OrElse openParenToken.Node IsNot green._openParenToken OrElse expression IsNot Me._expression OrElse commaToken.Node IsNot green._commaToken OrElse type IsNot Me._type OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.CTypeExpression(keyword, openParenToken, expression, commaToken, type, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    Public NotInheritable Class DirectCastExpressionSyntax
        Inherits CastExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, commaToken As InternalSyntax.PunctuationSyntax, type As TypeSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.DirectCastExpressionSyntax(kind, errors, annotations, keyword, openParenToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), commaToken, DirectCast(type.Green, InternalSyntax.TypeSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectCastExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As DirectCastExpressionSyntax
            return Update(keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public Shadows ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectCastExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetOpenParenTokenCore() As SyntaxToken
            Return Me.OpenParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As DirectCastExpressionSyntax
            return Update(Me.Keyword, openParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The expression being cast.
        ''' </summary>
        Public Shadows ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        Friend Overrides Function GetExpressionCore() As ExpressionSyntax
            Return Me.Expression
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As DirectCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public Shadows ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectCastExpressionSyntax)._commaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetCommaTokenCore() As SyntaxToken
            Return Me.CommaToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As DirectCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, commaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The type the expression is being cast to.
        ''' </summary>
        Public Shadows ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeCore() As TypeSyntax
            Return Me.Type
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As DirectCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public Shadows ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectCastExpressionSyntax)._closeParenToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        Friend Overrides Function GetCloseParenTokenCore() As SyntaxToken
            Return Me.CloseParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As DirectCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._expression
                Case 4
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Expression
                Case 4
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDirectCastExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDirectCastExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DirectCastExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this DirectCastExpressionSyntaxSyntax node with. If
        ''' not specified the current Keyword will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this DirectCastExpressionSyntaxSyntax node
        ''' with. If not specified the current OpenParenToken will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this DirectCastExpressionSyntaxSyntax node with.
        ''' If not specified the current Expression will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this DirectCastExpressionSyntaxSyntax node with.
        ''' If not specified the current CommaToken will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this DirectCastExpressionSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this DirectCastExpressionSyntaxSyntax node
        ''' with. If not specified the current CloseParenToken will be used in the new
        ''' DirectCastExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As DirectCastExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DirectCastExpressionSyntax)
            If keyword.Node IsNot green._keyword OrElse openParenToken.Node IsNot green._openParenToken OrElse expression IsNot Me._expression OrElse commaToken.Node IsNot green._commaToken OrElse type IsNot Me._type OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.DirectCastExpression(keyword, openParenToken, expression, commaToken, type, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    Public NotInheritable Class TryCastExpressionSyntax
        Inherits CastExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, commaToken As InternalSyntax.PunctuationSyntax, type As TypeSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.TryCastExpressionSyntax(kind, errors, annotations, keyword, openParenToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), commaToken, DirectCast(type.Green, InternalSyntax.TypeSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryCastExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As TryCastExpressionSyntax
            return Update(keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public Shadows ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryCastExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetOpenParenTokenCore() As SyntaxToken
            Return Me.OpenParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As TryCastExpressionSyntax
            return Update(Me.Keyword, openParenToken, Me.Expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The expression being cast.
        ''' </summary>
        Public Shadows ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        Friend Overrides Function GetExpressionCore() As ExpressionSyntax
            Return Me.Expression
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As TryCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, expression, Me.CommaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public Shadows ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryCastExpressionSyntax)._commaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        Friend Overrides Function GetCommaTokenCore() As SyntaxToken
            Return Me.CommaToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As TryCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, commaToken, Me.Type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The type the expression is being cast to.
        ''' </summary>
        Public Shadows ReadOnly Property Type As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_type, 4)
            End Get
        End Property

        Friend Overrides Function GetTypeCore() As TypeSyntax
            Return Me.Type
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Type property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithType(type as TypeSyntax) As TryCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, type, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public Shadows ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TryCastExpressionSyntax)._closeParenToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        Friend Overrides Function GetCloseParenTokenCore() As SyntaxToken
            Return Me.CloseParenToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As TryCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, Me.CommaToken, Me.Type, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._expression
                Case 4
                    Return Me._type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Expression
                Case 4
                    Return Me.Type
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTryCastExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTryCastExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TryCastExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this TryCastExpressionSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this TryCastExpressionSyntaxSyntax node with.
        ''' If not specified the current OpenParenToken will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this TryCastExpressionSyntaxSyntax node with. If
        ''' not specified the current Expression will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this TryCastExpressionSyntaxSyntax node with. If
        ''' not specified the current CommaToken will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="type">
        ''' The new Type to update this TryCastExpressionSyntaxSyntax node with. If not
        ''' specified the current Type will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this TryCastExpressionSyntaxSyntax node with.
        ''' If not specified the current CloseParenToken will be used in the new
        ''' TryCastExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As TryCastExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TryCastExpressionSyntax)
            If keyword.Node IsNot green._keyword OrElse openParenToken.Node IsNot green._openParenToken OrElse expression IsNot Me._expression OrElse commaToken.Node IsNot green._commaToken OrElse type IsNot Me._type OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.TryCastExpression(keyword, openParenToken, expression, commaToken, type, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a cast to a pre-defined type using a pre-defined cast expression,
    ''' such as CInt or CLng.
    ''' </summary>
    Public NotInheritable Class PredefinedCastExpressionSyntax
        Inherits ExpressionSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.PredefinedCastExpressionSyntax(kind, errors, annotations, keyword, openParenToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The keyword that was used in the cast operation.
        ''' </summary>
        Public  ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PredefinedCastExpressionSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As PredefinedCastExpressionSyntax
            return Update(keyword, Me.OpenParenToken, Me.Expression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PredefinedCastExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As PredefinedCastExpressionSyntax
            return Update(Me.Keyword, openParenToken, Me.Expression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The expression being cast.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As PredefinedCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, expression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PredefinedCastExpressionSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As PredefinedCastExpressionSyntax
            return Update(Me.Keyword, Me.OpenParenToken, Me.Expression, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPredefinedCastExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPredefinedCastExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PredefinedCastExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this PredefinedCastExpressionSyntaxSyntax node with.
        ''' If not specified the current Keyword will be used in the new
        ''' PredefinedCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this PredefinedCastExpressionSyntaxSyntax node
        ''' with. If not specified the current OpenParenToken will be used in the new
        ''' PredefinedCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this PredefinedCastExpressionSyntaxSyntax node
        ''' with. If not specified the current Expression will be used in the new
        ''' PredefinedCastExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this PredefinedCastExpressionSyntaxSyntax
        ''' node with. If not specified the current CloseParenToken will be used in the new
        ''' PredefinedCastExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As PredefinedCastExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PredefinedCastExpressionSyntax)
            If keyword.Node IsNot green._keyword OrElse openParenToken.Node IsNot green._openParenToken OrElse expression IsNot Me._expression OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.PredefinedCastExpression(keyword, openParenToken, expression, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a binary operator. The Kind property classifies the operators into
    ''' similar kind of operators (arithmetic, relational, logical or string); the
    ''' exact operation being performed is determined by the Operator property.
    ''' </summary>
    Public NotInheritable Class BinaryExpressionSyntax
        Inherits ExpressionSyntax

        Friend _left as ExpressionSyntax
        Friend _right as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), left As ExpressionSyntax, operatorToken As InternalSyntax.SyntaxToken, right As ExpressionSyntax)
            Me.New(New InternalSyntax.BinaryExpressionSyntax(kind, errors, annotations, DirectCast(left.Green, InternalSyntax.ExpressionSyntax), operatorToken, DirectCast(right.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The left operand.
        ''' </summary>
        Public  ReadOnly Property Left As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_left, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Left property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLeft(left as ExpressionSyntax) As BinaryExpressionSyntax
            return Update(left, Me.OperatorToken, Me.Right)
        End Function

        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BinaryExpressionSyntax)._operatorToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As BinaryExpressionSyntax
            return Update(Me.Left, operatorToken, Me.Right)
        End Function

        ''' <summary>
        ''' The right operand.
        ''' </summary>
        Public  ReadOnly Property Right As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_right, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Right property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRight(right as ExpressionSyntax) As BinaryExpressionSyntax
            return Update(Me.Left, Me.OperatorToken, right)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._left
                Case 2
                    Return Me._right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Left
                Case 2
                    Return Me.Right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitBinaryExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitBinaryExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new BinaryExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="left">
        ''' The new Left to update this BinaryExpressionSyntaxSyntax node with. If not
        ''' specified the current Left will be used in the new BinaryExpressionSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this BinaryExpressionSyntaxSyntax node with. If
        ''' not specified the current OperatorToken will be used in the new
        ''' BinaryExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="right">
        ''' The new Right to update this BinaryExpressionSyntaxSyntax node with. If not
        ''' specified the current Right will be used in the new
        ''' BinaryExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.BinaryExpressionSyntax)
            If left IsNot Me._left OrElse operatorToken.Node IsNot green._operatorToken OrElse right IsNot Me._right Then
                Dim newNode = Syntax.BinaryExpression(Me.Kind, left, operatorToken, right)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
    ''' </summary>
    Public NotInheritable Class UnaryExpressionSyntax
        Inherits ExpressionSyntax

        Friend _operand as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), operatorToken As InternalSyntax.SyntaxToken, operand As ExpressionSyntax)
            Me.New(New InternalSyntax.UnaryExpressionSyntax(kind, errors, annotations, operatorToken, DirectCast(operand.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The token that is the operator.
        ''' </summary>
        Public  ReadOnly Property OperatorToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.UnaryExpressionSyntax)._operatorToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OperatorToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperatorToken(operatorToken as SyntaxToken) As UnaryExpressionSyntax
            return Update(operatorToken, Me.Operand)
        End Function

        ''' <summary>
        ''' The expression being operated on.
        ''' </summary>
        Public  ReadOnly Property Operand As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_operand, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Operand property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOperand(operand as ExpressionSyntax) As UnaryExpressionSyntax
            return Update(Me.OperatorToken, operand)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._operand
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Operand
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitUnaryExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitUnaryExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new UnaryExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The new OperatorToken to update this UnaryExpressionSyntaxSyntax node with. If
        ''' not specified the current OperatorToken will be used in the new
        ''' UnaryExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="operand">
        ''' The new Operand to update this UnaryExpressionSyntaxSyntax node with. If not
        ''' specified the current Operand will be used in the new
        ''' UnaryExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.UnaryExpressionSyntax)
            If operatorToken.Node IsNot green._operatorToken OrElse operand IsNot Me._operand Then
                Dim newNode = Syntax.UnaryExpression(Me.Kind, operatorToken, operand)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
    ''' If(expr, nothing-expr).
    ''' </summary>
    Public NotInheritable Class BinaryConditionalExpressionSyntax
        Inherits ExpressionSyntax

        Friend _firstExpression as ExpressionSyntax
        Friend _secondExpression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), ifKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, firstExpression As ExpressionSyntax, commaToken As InternalSyntax.PunctuationSyntax, secondExpression As ExpressionSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.BinaryConditionalExpressionSyntax(kind, errors, annotations, ifKeyword, openParenToken, DirectCast(firstExpression.Green, InternalSyntax.ExpressionSyntax), commaToken, DirectCast(secondExpression.Green, InternalSyntax.ExpressionSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "If" keyword
        ''' </summary>
        Public  ReadOnly Property IfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BinaryConditionalExpressionSyntax)._ifKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfKeyword(ifKeyword as SyntaxToken) As BinaryConditionalExpressionSyntax
            return Update(ifKeyword, Me.OpenParenToken, Me.FirstExpression, Me.CommaToken, Me.SecondExpression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BinaryConditionalExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As BinaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, openParenToken, Me.FirstExpression, Me.CommaToken, Me.SecondExpression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The first expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property FirstExpression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_firstExpression, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FirstExpression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFirstExpression(firstExpression as ExpressionSyntax) As BinaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, firstExpression, Me.CommaToken, Me.SecondExpression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public  ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BinaryConditionalExpressionSyntax)._commaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As BinaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.FirstExpression, commaToken, Me.SecondExpression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The second expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property SecondExpression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_secondExpression, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SecondExpression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSecondExpression(secondExpression as ExpressionSyntax) As BinaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.FirstExpression, Me.CommaToken, secondExpression, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BinaryConditionalExpressionSyntax)._closeParenToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As BinaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.FirstExpression, Me.CommaToken, Me.SecondExpression, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._firstExpression
                Case 4
                    Return Me._secondExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.FirstExpression
                Case 4
                    Return Me.SecondExpression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitBinaryConditionalExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitBinaryConditionalExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new BinaryConditionalExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="ifKeyword">
        ''' The new IfKeyword to update this BinaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current IfKeyword will be used in the new
        ''' BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this BinaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current OpenParenToken will be used in the new
        ''' BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="firstExpression">
        ''' The new FirstExpression to update this BinaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current FirstExpression will be used in the new
        ''' BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this BinaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current CommaToken will be used in the new
        ''' BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="secondExpression">
        ''' The new SecondExpression to update this BinaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current SecondExpression will be used in the
        ''' new BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this BinaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current CloseParenToken will be used in the new
        ''' BinaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(ifKeyword As SyntaxToken, openParenToken As SyntaxToken, firstExpression As ExpressionSyntax, commaToken As SyntaxToken, secondExpression As ExpressionSyntax, closeParenToken As SyntaxToken) As BinaryConditionalExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.BinaryConditionalExpressionSyntax)
            If ifKeyword.Node IsNot green._ifKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse firstExpression IsNot Me._firstExpression OrElse commaToken.Node IsNot green._commaToken OrElse secondExpression IsNot Me._secondExpression OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.BinaryConditionalExpression(ifKeyword, openParenToken, firstExpression, commaToken, secondExpression, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
    ''' If(expr, nothing-expr).
    ''' </summary>
    Public NotInheritable Class TernaryConditionalExpressionSyntax
        Inherits ExpressionSyntax

        Friend _condition as ExpressionSyntax
        Friend _whenTrue as ExpressionSyntax
        Friend _whenFalse as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), ifKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, condition As ExpressionSyntax, firstCommaToken As InternalSyntax.PunctuationSyntax, whenTrue As ExpressionSyntax, secondCommaToken As InternalSyntax.PunctuationSyntax, whenFalse As ExpressionSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.TernaryConditionalExpressionSyntax(kind, errors, annotations, ifKeyword, openParenToken, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax), firstCommaToken, DirectCast(whenTrue.Green, InternalSyntax.ExpressionSyntax), secondCommaToken, DirectCast(whenFalse.Green, InternalSyntax.ExpressionSyntax), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "If" keyword
        ''' </summary>
        Public  ReadOnly Property IfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)._ifKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfKeyword(ifKeyword as SyntaxToken) As TernaryConditionalExpressionSyntax
            return Update(ifKeyword, Me.OpenParenToken, Me.Condition, Me.FirstCommaToken, Me.WhenTrue, Me.SecondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, openParenToken, Me.Condition, Me.FirstCommaToken, Me.WhenTrue, Me.SecondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The first expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, condition, Me.FirstCommaToken, Me.WhenTrue, Me.SecondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public  ReadOnly Property FirstCommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)._firstCommaToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FirstCommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFirstCommaToken(firstCommaToken as SyntaxToken) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.Condition, firstCommaToken, Me.WhenTrue, Me.SecondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The second expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property WhenTrue As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_whenTrue, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhenTrue property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhenTrue(whenTrue as ExpressionSyntax) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.Condition, Me.FirstCommaToken, whenTrue, Me.SecondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "," token.
        ''' </summary>
        Public  ReadOnly Property SecondCommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)._secondCommaToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SecondCommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSecondCommaToken(secondCommaToken as SyntaxToken) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.Condition, Me.FirstCommaToken, Me.WhenTrue, secondCommaToken, Me.WhenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The second expression inside the parentheses.
        ''' </summary>
        Public  ReadOnly Property WhenFalse As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_whenFalse, 6)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhenFalse property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhenFalse(whenFalse as ExpressionSyntax) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.Condition, Me.FirstCommaToken, Me.WhenTrue, Me.SecondCommaToken, whenFalse, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)._closeParenToken, Me.GetChildPosition(7), Me.GetChildIndex(7))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As TernaryConditionalExpressionSyntax
            return Update(Me.IfKeyword, Me.OpenParenToken, Me.Condition, Me.FirstCommaToken, Me.WhenTrue, Me.SecondCommaToken, Me.WhenFalse, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._condition
                Case 4
                    Return Me._whenTrue
                Case 6
                    Return Me._whenFalse
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Condition
                Case 4
                    Return Me.WhenTrue
                Case 6
                    Return Me.WhenFalse
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 8
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTernaryConditionalExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTernaryConditionalExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TernaryConditionalExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="ifKeyword">
        ''' The new IfKeyword to update this TernaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current IfKeyword will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this TernaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current OpenParenToken will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this TernaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current Condition will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="firstCommaToken">
        ''' The new FirstCommaToken to update this TernaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current FirstCommaToken will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="whenTrue">
        ''' The new WhenTrue to update this TernaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current WhenTrue will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="secondCommaToken">
        ''' The new SecondCommaToken to update this
        ''' TernaryConditionalExpressionSyntaxSyntax node with. If not specified the
        ''' current SecondCommaToken will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="whenFalse">
        ''' The new WhenFalse to update this TernaryConditionalExpressionSyntaxSyntax node
        ''' with. If not specified the current WhenFalse will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this TernaryConditionalExpressionSyntaxSyntax
        ''' node with. If not specified the current CloseParenToken will be used in the new
        ''' TernaryConditionalExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(ifKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, firstCommaToken As SyntaxToken, whenTrue As ExpressionSyntax, secondCommaToken As SyntaxToken, whenFalse As ExpressionSyntax, closeParenToken As SyntaxToken) As TernaryConditionalExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TernaryConditionalExpressionSyntax)
            If ifKeyword.Node IsNot green._ifKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse condition IsNot Me._condition OrElse firstCommaToken.Node IsNot green._firstCommaToken OrElse whenTrue IsNot Me._whenTrue OrElse secondCommaToken.Node IsNot green._secondCommaToken OrElse whenFalse IsNot Me._whenFalse OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.TernaryConditionalExpression(ifKeyword, openParenToken, condition, firstCommaToken, whenTrue, secondCommaToken, whenFalse, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a lambda expression, either single line or multi-line.
    ''' </summary>
    Public MustInherit Class LambdaExpressionSyntax
        Inherits ExpressionSyntax

        Friend _begin as LambdaHeaderSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </summary>
        Public ReadOnly Property Begin As LambdaHeaderSyntax
            Get
                Return Me.GetBeginCore()
            End Get
        End Property

        Friend Overridable Function GetBeginCore() As LambdaHeaderSyntax
                Return GetRed(Of LambdaHeaderSyntax)(_begin, 0)
        End Function


        ''' <summary>
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public ReadOnly Property BeginTerminator As SyntaxToken
            Get
                Return Me.GetBeginTerminatorCore()
            End Get
        End Property

        Friend Overridable Function GetBeginTerminatorCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LambdaExpressionSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
        End Function


    End Class

    ''' <summary>
    ''' Represents a single line lambda expression.
    ''' </summary>
    Public NotInheritable Class SingleLineLambdaExpressionSyntax
        Inherits LambdaExpressionSyntax

        Friend _body as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As LambdaHeaderSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, body As SyntaxNode)
            Me.New(New InternalSyntax.SingleLineLambdaExpressionSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.LambdaHeaderSyntax), beginTerminator, DirectCast(body.Green, InternalSyntax.SyntaxNode)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As LambdaHeaderSyntax
            Get
                Return GetRed(Of LambdaHeaderSyntax)(_begin, 0)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As LambdaHeaderSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as LambdaHeaderSyntax) As SingleLineLambdaExpressionSyntax
            return Update(begin, Me.BeginTerminator, Me.Body)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SingleLineLambdaExpressionSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As SingleLineLambdaExpressionSyntax
            return Update(Me.Begin, beginTerminator, Me.Body)
        End Function

        ''' <summary>
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </summary>
        Public  ReadOnly Property Body As SyntaxNode
            Get
                Return GetRed(Of SyntaxNode)(_body, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Body property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBody(body as SyntaxNode) As SingleLineLambdaExpressionSyntax
            return Update(Me.Begin, Me.BeginTerminator, body)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._body
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return Me.Body
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSingleLineLambdaExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSingleLineLambdaExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SingleLineLambdaExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this SingleLineLambdaExpressionSyntaxSyntax node with.
        ''' If not specified the current Begin will be used in the new
        ''' SingleLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this SingleLineLambdaExpressionSyntaxSyntax
        ''' node with. If not specified the current BeginTerminator will be used in the new
        ''' SingleLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="body">
        ''' The new Body to update this SingleLineLambdaExpressionSyntaxSyntax node with.
        ''' If not specified the current Body will be used in the new
        ''' SingleLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SingleLineLambdaExpressionSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse body IsNot Me._body Then
                Dim newNode = Syntax.SingleLineLambdaExpression(Me.Kind, begin, beginTerminator, body)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a multi-line lambda expression.
    ''' </summary>
    Public NotInheritable Class MultiLineLambdaExpressionSyntax
        Inherits LambdaExpressionSyntax

        Friend _statements as SyntaxNode
        Friend _end as EndBlockStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), begin As LambdaHeaderSyntax, beginTerminator As InternalSyntax.PunctuationSyntax, statements As SyntaxNode, [end] As EndBlockStatementSyntax)
            Me.New(New InternalSyntax.MultiLineLambdaExpressionSyntax(kind, errors, annotations, DirectCast(begin.Green, InternalSyntax.LambdaHeaderSyntax), beginTerminator, if(statements IsNot Nothing, statements.Green, Nothing), DirectCast([end].Green, InternalSyntax.EndBlockStatementSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </summary>
        Public Shadows ReadOnly Property Begin As LambdaHeaderSyntax
            Get
                Return GetRed(Of LambdaHeaderSyntax)(_begin, 0)
            End Get
        End Property

        Friend Overrides Function GetBeginCore() As LambdaHeaderSyntax
            Return Me.Begin
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Begin property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBegin(begin as LambdaHeaderSyntax) As MultiLineLambdaExpressionSyntax
            return Update(begin, Me.BeginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property BeginTerminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.MultiLineLambdaExpressionSyntax)._beginTerminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetBeginTerminatorCore() As SyntaxToken
            Return Me.BeginTerminator
        End Function

        ''' <summary>
        ''' Creates a new node and sets the BeginTerminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginTerminator(beginTerminator as SyntaxToken) As MultiLineLambdaExpressionSyntax
            return Update(Me.Begin, beginTerminator, Me.Statements, Me.End)
        End Function

        ''' <summary>
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
        ''' Expression (single-line Function). This might be an empty list.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Statements As SeparatedSyntaxList(Of StatementSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_statements, 2)
                Return new SeparatedSyntaxList(Of StatementSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Statements property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStatements(statements as SeparatedSyntaxList(Of StatementSyntax)) As MultiLineLambdaExpressionSyntax
            return Update(Me.Begin, Me.BeginTerminator, statements, Me.End)
        End Function

        Public Shadows Function AddStatements(ParamArray items As StatementSyntax()) As MultiLineLambdaExpressionSyntax
            Return Me.WithStatements(Me.Statements.Add(SyntaxKind.StatementTerminatorToken, True, items))
        End Function

        ''' <summary>
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </summary>
        Public  ReadOnly Property [End] As EndBlockStatementSyntax
            Get
                Return GetRed(Of EndBlockStatementSyntax)(_end, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the [End] property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEnd([end] as EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            return Update(Me.Begin, Me.BeginTerminator, Me.Statements, [end])
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._begin
                Case 2
                    Return Me._statements
                Case 3
                    Return Me._end
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Begin
                Case 2
                    Return GetRed(Of SyntaxNode)(_statements, 2)
                Case 3
                    Return Me.[End]
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitMultiLineLambdaExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitMultiLineLambdaExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new MultiLineLambdaExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="begin">
        ''' The new Begin to update this MultiLineLambdaExpressionSyntaxSyntax node with.
        ''' If not specified the current Begin will be used in the new
        ''' MultiLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The new BeginTerminator to update this MultiLineLambdaExpressionSyntaxSyntax
        ''' node with. If not specified the current BeginTerminator will be used in the new
        ''' MultiLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="statements">
        ''' The new Statements to update this MultiLineLambdaExpressionSyntaxSyntax node
        ''' with. If not specified the current Statements will be used in the new
        ''' MultiLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="end">
        ''' The new End to update this MultiLineLambdaExpressionSyntaxSyntax node with. If
        ''' not specified the current End will be used in the new
        ''' MultiLineLambdaExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.MultiLineLambdaExpressionSyntax)
            If begin IsNot Me._begin OrElse beginTerminator.Node IsNot green._beginTerminator OrElse statements <> Me.Statements OrElse [end] IsNot Me._end Then
                Dim newNode = Syntax.MultiLineLambdaExpression(Me.Kind, begin, beginTerminator, statements, [end])
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the header part of a lambda expression
    ''' </summary>
    Public NotInheritable Class LambdaHeaderSyntax
        Inherits MethodBaseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), attributes As SyntaxNode, modifiers As InternalSyntax.SyntaxNode, keyword As InternalSyntax.KeywordSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax)
            Me.New(New InternalSyntax.LambdaHeaderSyntax(kind, errors, annotations, if(attributes IsNot Nothing, attributes.Green, Nothing), modifiers, keyword, if(parameterList IsNot Nothing , DirectCast(parameterList.Green, InternalSyntax.ParameterListSyntax), Nothing) , if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.AsClauseSyntax), Nothing) ), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Attributes As SyntaxList(Of AttributeBlockSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 0)
                Return new SyntaxList(Of AttributeBlockSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAttributesCore() As SyntaxList(Of AttributeBlockSyntax)
            Return Me.Attributes
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of AttributeBlockSyntax)) As LambdaHeaderSyntax
            return Update(attributes, Me.Modifiers, Me.Keyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As AttributeBlockSyntax()) As LambdaHeaderSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        ''' <summary>
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property Modifiers As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.LambdaHeaderSyntax)._modifiers, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetModifiersCore() As SyntaxTokenList
            Return Me.Modifiers
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Modifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithModifiers(modifiers as SyntaxTokenList) As LambdaHeaderSyntax
            return Update(Me.Attributes, modifiers, Me.Keyword, Me.ParameterList, Me.AsClause)
        End Function

        Public Shadows Function AddModifiers(ParamArray items As SyntaxToken()) As LambdaHeaderSyntax
            Return Me.WithModifiers(Me.Modifiers.Add(items))
        End Function

        ''' <summary>
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </summary>
        Public Shadows ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LambdaHeaderSyntax)._keyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        Friend Overrides Function GetKeywordCore() As SyntaxToken
            Return Me.Keyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As LambdaHeaderSyntax
            return Update(Me.Attributes, Me.Modifiers, keyword, Me.ParameterList, Me.AsClause)
        End Function

        ''' <summary>
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property ParameterList As ParameterListSyntax
            Get
                Return GetRed(Of ParameterListSyntax)(_parameterList, 3)
            End Get
        End Property

        Friend Overrides Function GetParameterListCore() As ParameterListSyntax
            Return Me.ParameterList
        End Function

        ''' <summary>
        ''' Creates a new node and sets the ParameterList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithParameterList(parameterList as ParameterListSyntax) As LambdaHeaderSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, parameterList, Me.AsClause)
        End Function

        Public Shadows Function AddParameterListParameters(ParamArray items As ParameterSyntax()) As LambdaHeaderSyntax
            Dim _child = If (Me.ParameterList IsNot Nothing, Me.ParameterList, Syntax.ParameterList())
            Return Me.WithParameterList(_child.AddParameters(items))
        End Function

        ''' <summary>
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AsClause As AsClauseSyntax
            Get
                Return GetRed(Of AsClauseSyntax)(_asClause, 4)
            End Get
        End Property

        Friend Overrides Function GetAsClauseCore() As AsClauseSyntax
            Return Me.AsClause
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as AsClauseSyntax) As LambdaHeaderSyntax
            return Update(Me.Attributes, Me.Modifiers, Me.Keyword, Me.ParameterList, asClause)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._attributes
                Case 3
                    Return Me._parameterList
                Case 4
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return GetRed(Of SyntaxNode)(_attributes, 0)
                Case 3
                    Return Me.ParameterList
                Case 4
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLambdaHeader(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLambdaHeader(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LambdaHeaderSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="attributes">
        ''' The new Attributes to update this LambdaHeaderSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' LambdaHeaderSyntaxSyntax node.
        ''' </param>
        ''' <param name="modifiers">
        ''' The new Modifiers to update this LambdaHeaderSyntaxSyntax node with. If not
        ''' specified the current Modifiers will be used in the new
        ''' LambdaHeaderSyntaxSyntax node.
        ''' </param>
        ''' <param name="keyword">
        ''' The new Keyword to update this LambdaHeaderSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new LambdaHeaderSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="parameterList">
        ''' The new ParameterList to update this LambdaHeaderSyntaxSyntax node with. If not
        ''' specified the current ParameterList will be used in the new
        ''' LambdaHeaderSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this LambdaHeaderSyntaxSyntax node with. If not
        ''' specified the current AsClause will be used in the new LambdaHeaderSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LambdaHeaderSyntax)
            If attributes <> Me.Attributes OrElse modifiers <> Me.Modifiers OrElse keyword.Node IsNot green._keyword OrElse parameterList IsNot Me._parameterList OrElse asClause IsNot Me._asClause Then
                Dim newNode = Syntax.LambdaHeader(Me.Kind, attributes, modifiers, keyword, parameterList, asClause)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a parenthesized argument list.
    ''' </summary>
    Public NotInheritable Class ArgumentListSyntax
        Inherits SyntaxNode

        Friend _arguments as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, arguments As SyntaxNode, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ArgumentListSyntax(kind, errors, annotations, openParenToken, if(arguments IsNot Nothing, arguments.Green, Nothing), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ArgumentListSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ArgumentListSyntax
            return Update(openParenToken, Me.Arguments, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The list of arguments. This may be empty. Ommitted argument are represented by
        ''' an OmittedArgumentSyntax node.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Arguments As SeparatedSyntaxList(Of ArgumentSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_arguments, 1)
                Return new SeparatedSyntaxList(Of ArgumentSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Arguments property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArguments(arguments as SeparatedSyntaxList(Of ArgumentSyntax)) As ArgumentListSyntax
            return Update(Me.OpenParenToken, arguments, Me.CloseParenToken)
        End Function

        Public Shadows Function AddArguments(ParamArray items As ArgumentSyntax()) As ArgumentListSyntax
            Return Me.WithArguments(Me.Arguments.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ArgumentListSyntax)._closeParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ArgumentListSyntax
            return Update(Me.OpenParenToken, Me.Arguments, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._arguments
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_arguments, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitArgumentList(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitArgumentList(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ArgumentListSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ArgumentListSyntaxSyntax node with. If
        ''' not specified the current OpenParenToken will be used in the new
        ''' ArgumentListSyntaxSyntax node.
        ''' </param>
        ''' <param name="arguments">
        ''' The new Arguments to update this ArgumentListSyntaxSyntax node with. If not
        ''' specified the current Arguments will be used in the new
        ''' ArgumentListSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ArgumentListSyntaxSyntax node with. If
        ''' not specified the current CloseParenToken will be used in the new
        ''' ArgumentListSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeParenToken As SyntaxToken) As ArgumentListSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ArgumentListSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse arguments <> Me.Arguments OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ArgumentList(openParenToken, arguments, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Base class for the possible kinds of arguments that can appear in an argument
    ''' list.
    ''' </summary>
    Public MustInherit Class ArgumentSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents an omitted argument in an argument list. An omitted argument is not
    ''' considered a syntax error but a valid case when no argument is required.
    ''' </summary>
    Public NotInheritable Class OmittedArgumentSyntax
        Inherits ArgumentSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), empty As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.OmittedArgumentSyntax(kind, errors, annotations, empty), Nothing, 0)
        End Sub

        ''' <summary>
        ''' An empty token because all non terminals must have a token.
        ''' </summary>
        Public  ReadOnly Property Empty As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OmittedArgumentSyntax)._empty, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Empty property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEmpty(empty as SyntaxToken) As OmittedArgumentSyntax
            return Update(empty)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOmittedArgument(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOmittedArgument(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OmittedArgumentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="empty">
        ''' The new Empty to update this OmittedArgumentSyntaxSyntax node with. If not
        ''' specified the current Empty will be used in the new OmittedArgumentSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(empty As SyntaxToken) As OmittedArgumentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OmittedArgumentSyntax)
            If empty.Node IsNot green._empty Then
                Dim newNode = Syntax.OmittedArgument(empty)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a simple argument that is just an expression.
    ''' </summary>
    Public NotInheritable Class SimpleArgumentSyntax
        Inherits ArgumentSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), expression As ExpressionSyntax)
            Me.New(New InternalSyntax.SimpleArgumentSyntax(kind, errors, annotations, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The expression that is the argument.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As SimpleArgumentSyntax
            return Update(expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._expression
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me.Expression
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSimpleArgument(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSimpleArgument(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SimpleArgumentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="expression">
        ''' The new Expression to update this SimpleArgumentSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' SimpleArgumentSyntaxSyntax node.
        ''' </param>
        Public Function Update(expression As ExpressionSyntax) As SimpleArgumentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SimpleArgumentSyntax)
            If expression IsNot Me._expression Then
                Dim newNode = Syntax.SimpleArgument(expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a named argument, such as "Value:=7".
    ''' </summary>
    Public NotInheritable Class NamedArgumentSyntax
        Inherits ArgumentSyntax

        Friend _identifierName as IdentifierNameSyntax
        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifierName As IdentifierNameSyntax, colonEqualsToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.NamedArgumentSyntax(kind, errors, annotations, DirectCast(identifierName.Green, InternalSyntax.IdentifierNameSyntax), colonEqualsToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The name used to identify the named argument.
        ''' </summary>
        Public  ReadOnly Property IdentifierName As IdentifierNameSyntax
            Get
                Return GetRed(Of IdentifierNameSyntax)(_identifierName, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IdentifierName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifierName(identifierName as IdentifierNameSyntax) As NamedArgumentSyntax
            return Update(identifierName, Me.ColonEqualsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The ":=" token.
        ''' </summary>
        Public  ReadOnly Property ColonEqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NamedArgumentSyntax)._colonEqualsToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ColonEqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithColonEqualsToken(colonEqualsToken as SyntaxToken) As NamedArgumentSyntax
            return Update(Me.IdentifierName, colonEqualsToken, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression that is the named argument.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As NamedArgumentSyntax
            return Update(Me.IdentifierName, Me.ColonEqualsToken, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._identifierName
                Case 2
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.IdentifierName
                Case 2
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNamedArgument(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNamedArgument(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NamedArgumentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="identifierName">
        ''' The new IdentifierName to update this NamedArgumentSyntaxSyntax node with. If
        ''' not specified the current IdentifierName will be used in the new
        ''' NamedArgumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="colonEqualsToken">
        ''' The new ColonEqualsToken to update this NamedArgumentSyntaxSyntax node with. If
        ''' not specified the current ColonEqualsToken will be used in the new
        ''' NamedArgumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this NamedArgumentSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new
        ''' NamedArgumentSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifierName As IdentifierNameSyntax, colonEqualsToken As SyntaxToken, expression As ExpressionSyntax) As NamedArgumentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NamedArgumentSyntax)
            If identifierName IsNot Me._identifierName OrElse colonEqualsToken.Node IsNot green._colonEqualsToken OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.NamedArgument(identifierName, colonEqualsToken, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a range argument, such as "0 to 5", used in array bounds. The
    ''' "Value" property represents the upper bound of the range.
    ''' </summary>
    Public NotInheritable Class RangeArgumentSyntax
        Inherits ArgumentSyntax

        Friend _lowerBound as ExpressionSyntax
        Friend _upperBound as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lowerBound As ExpressionSyntax, toKeyword As InternalSyntax.KeywordSyntax, upperBound As ExpressionSyntax)
            Me.New(New InternalSyntax.RangeArgumentSyntax(kind, errors, annotations, DirectCast(lowerBound.Green, InternalSyntax.ExpressionSyntax), toKeyword, DirectCast(upperBound.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The lower bound of the range. This is typically the integer constant zero.
        ''' </summary>
        Public  ReadOnly Property LowerBound As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_lowerBound, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LowerBound property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLowerBound(lowerBound as ExpressionSyntax) As RangeArgumentSyntax
            return Update(lowerBound, Me.ToKeyword, Me.UpperBound)
        End Function

        ''' <summary>
        ''' The "To" keyword.
        ''' </summary>
        Public  ReadOnly Property ToKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.RangeArgumentSyntax)._toKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ToKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithToKeyword(toKeyword as SyntaxToken) As RangeArgumentSyntax
            return Update(Me.LowerBound, toKeyword, Me.UpperBound)
        End Function

        ''' <summary>
        ''' The upper bound of the range.
        ''' </summary>
        Public  ReadOnly Property UpperBound As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_upperBound, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the UpperBound property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithUpperBound(upperBound as ExpressionSyntax) As RangeArgumentSyntax
            return Update(Me.LowerBound, Me.ToKeyword, upperBound)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._lowerBound
                Case 2
                    Return Me._upperBound
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.LowerBound
                Case 2
                    Return Me.UpperBound
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitRangeArgument(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitRangeArgument(Me)
        End Sub


        ''' <summary>
        ''' Creates a new RangeArgumentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The new LowerBound to update this RangeArgumentSyntaxSyntax node with. If not
        ''' specified the current LowerBound will be used in the new
        ''' RangeArgumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The new ToKeyword to update this RangeArgumentSyntaxSyntax node with. If not
        ''' specified the current ToKeyword will be used in the new
        ''' RangeArgumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="upperBound">
        ''' The new UpperBound to update this RangeArgumentSyntaxSyntax node with. If not
        ''' specified the current UpperBound will be used in the new
        ''' RangeArgumentSyntaxSyntax node.
        ''' </param>
        Public Function Update(lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As RangeArgumentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.RangeArgumentSyntax)
            If lowerBound IsNot Me._lowerBound OrElse toKeyword.Node IsNot green._toKeyword OrElse upperBound IsNot Me._upperBound Then
                Dim newNode = Syntax.RangeArgument(lowerBound, toKeyword, upperBound)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' This class represents a query expression. A query expression is composed of one
    ''' or more query operators in a row. The first query operator must be a From or
    ''' Aggregate.
    ''' </summary>
    Public NotInheritable Class QueryExpressionSyntax
        Inherits ExpressionSyntax

        Friend _clauses as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), clauses As SyntaxNode)
            Me.New(New InternalSyntax.QueryExpressionSyntax(kind, errors, annotations, if(clauses IsNot Nothing, clauses.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all the query operators in this query expression. This list always
        ''' contains at least one operator.
        ''' </summary>
        Public  ReadOnly Property Clauses As SyntaxList(Of QueryClauseSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_clauses, 0)
                Return new SyntaxList(Of QueryClauseSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Clauses property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithClauses(clauses as SyntaxList(Of QueryClauseSyntax)) As QueryExpressionSyntax
            return Update(clauses)
        End Function

        Public Shadows Function AddClauses(ParamArray items As QueryClauseSyntax()) As QueryExpressionSyntax
            Return Me.WithClauses(Me.Clauses.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._clauses
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
               Return GetRed(Of SyntaxNode)(_clauses, 0)
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitQueryExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitQueryExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new QueryExpressionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="clauses">
        ''' The new Clauses to update this QueryExpressionSyntaxSyntax node with. If not
        ''' specified the current Clauses will be used in the new
        ''' QueryExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(clauses As SyntaxList(of QueryClauseSyntax)) As QueryExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.QueryExpressionSyntax)
            If clauses <> Me.Clauses Then
                Dim newNode = Syntax.QueryExpression(clauses)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' This is a base class for all query operators.
    ''' </summary>
    Public MustInherit Class QueryClauseSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Describes a single variable of the form "x [As Type] In expression" for use in
    ''' query expressions.
    ''' </summary>
    Public NotInheritable Class CollectionRangeVariableSyntax
        Inherits SyntaxNode

        Friend _identifier as ModifiedIdentifierSyntax
        Friend _asClause as SimpleAsClauseSyntax
        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, inKeyword As InternalSyntax.KeywordSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.CollectionRangeVariableSyntax(kind, errors, annotations, DirectCast(identifier.Green, InternalSyntax.ModifiedIdentifierSyntax), if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.SimpleAsClauseSyntax), Nothing) , inKeyword, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The name of the range variable being defined.
        ''' </summary>
        Public  ReadOnly Property Identifier As ModifiedIdentifierSyntax
            Get
                Return GetRed(Of ModifiedIdentifierSyntax)(_identifier, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as ModifiedIdentifierSyntax) As CollectionRangeVariableSyntax
            return Update(identifier, Me.AsClause, Me.InKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' Describes the type of the variable being defined.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AsClause As SimpleAsClauseSyntax
            Get
                Return GetRed(Of SimpleAsClauseSyntax)(_asClause, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as SimpleAsClauseSyntax) As CollectionRangeVariableSyntax
            return Update(Me.Identifier, asClause, Me.InKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The "In" keyword.
        ''' </summary>
        Public  ReadOnly Property InKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.CollectionRangeVariableSyntax)._inKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the InKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithInKeyword(inKeyword as SyntaxToken) As CollectionRangeVariableSyntax
            return Update(Me.Identifier, Me.AsClause, inKeyword, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression that serves as the source of items for the range variable.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As CollectionRangeVariableSyntax
            return Update(Me.Identifier, Me.AsClause, Me.InKeyword, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._identifier
                Case 1
                    Return Me._asClause
                Case 3
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Identifier
                Case 1
                    Return Me.AsClause
                Case 3
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitCollectionRangeVariable(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitCollectionRangeVariable(Me)
        End Sub


        ''' <summary>
        ''' Creates a new CollectionRangeVariableSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="identifier">
        ''' The new Identifier to update this CollectionRangeVariableSyntaxSyntax node
        ''' with. If not specified the current Identifier will be used in the new
        ''' CollectionRangeVariableSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this CollectionRangeVariableSyntaxSyntax node with.
        ''' If not specified the current AsClause will be used in the new
        ''' CollectionRangeVariableSyntaxSyntax node.
        ''' </param>
        ''' <param name="inKeyword">
        ''' The new InKeyword to update this CollectionRangeVariableSyntaxSyntax node with.
        ''' If not specified the current InKeyword will be used in the new
        ''' CollectionRangeVariableSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this CollectionRangeVariableSyntaxSyntax node
        ''' with. If not specified the current Expression will be used in the new
        ''' CollectionRangeVariableSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, inKeyword As SyntaxToken, expression As ExpressionSyntax) As CollectionRangeVariableSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.CollectionRangeVariableSyntax)
            If identifier IsNot Me._identifier OrElse asClause IsNot Me._asClause OrElse inKeyword.Node IsNot green._inKeyword OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.CollectionRangeVariable(identifier, asClause, inKeyword, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Describes a single variable of the form "[x [As Type] =] expression" for use in
    ''' query expressions.
    ''' </summary>
    Public NotInheritable Class ExpressionRangeVariableSyntax
        Inherits SyntaxNode

        Friend _nameEquals as VariableNameEqualsSyntax
        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), nameEquals As VariableNameEqualsSyntax, expression As ExpressionSyntax)
            Me.New(New InternalSyntax.ExpressionRangeVariableSyntax(kind, errors, annotations, if(nameEquals IsNot Nothing , DirectCast(nameEquals.Green, InternalSyntax.VariableNameEqualsSyntax), Nothing) , DirectCast(expression.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The optional name and type of the expression range variable. If ommitted, the
        ''' name of the expression range variable is inferred from the expression.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property NameEquals As VariableNameEqualsSyntax
            Get
                Return GetRed(Of VariableNameEqualsSyntax)(_nameEquals, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NameEquals property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNameEquals(nameEquals as VariableNameEqualsSyntax) As ExpressionRangeVariableSyntax
            return Update(nameEquals, Me.Expression)
        End Function

        ''' <summary>
        ''' The expression used to initialize the expression variable.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As ExpressionRangeVariableSyntax
            return Update(Me.NameEquals, expression)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._nameEquals
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.NameEquals
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitExpressionRangeVariable(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitExpressionRangeVariable(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ExpressionRangeVariableSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="nameEquals">
        ''' The new NameEquals to update this ExpressionRangeVariableSyntaxSyntax node
        ''' with. If not specified the current NameEquals will be used in the new
        ''' ExpressionRangeVariableSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this ExpressionRangeVariableSyntaxSyntax node
        ''' with. If not specified the current Expression will be used in the new
        ''' ExpressionRangeVariableSyntaxSyntax node.
        ''' </param>
        Public Function Update(nameEquals As VariableNameEqualsSyntax, expression As ExpressionSyntax) As ExpressionRangeVariableSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ExpressionRangeVariableSyntax)
            If nameEquals IsNot Me._nameEquals OrElse expression IsNot Me._expression Then
                Dim newNode = Syntax.ExpressionRangeVariable(nameEquals, expression)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Describes a single variable of the form "[x [As Type] =] aggregation-function"
    ''' for use in the Into clause of Aggregate or Group By or Group Join query
    ''' operators.
    ''' </summary>
    Public NotInheritable Class AggregationRangeVariableSyntax
        Inherits SyntaxNode

        Friend _nameEquals as VariableNameEqualsSyntax
        Friend _aggregation as AggregationSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), nameEquals As VariableNameEqualsSyntax, aggregation As AggregationSyntax)
            Me.New(New InternalSyntax.AggregationRangeVariableSyntax(kind, errors, annotations, if(nameEquals IsNot Nothing , DirectCast(nameEquals.Green, InternalSyntax.VariableNameEqualsSyntax), Nothing) , DirectCast(aggregation.Green, InternalSyntax.AggregationSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The optional name and type of the expression range variable. If ommitted, the
        ''' name of the expression range variable is inferred from the aggregation
        ''' expression.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property NameEquals As VariableNameEqualsSyntax
            Get
                Return GetRed(Of VariableNameEqualsSyntax)(_nameEquals, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the NameEquals property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithNameEquals(nameEquals as VariableNameEqualsSyntax) As AggregationRangeVariableSyntax
            return Update(nameEquals, Me.Aggregation)
        End Function

        ''' <summary>
        ''' The name of the aggregation function. The "Group" aggregation function is
        ''' represented by the identifier "Group".
        ''' </summary>
        Public  ReadOnly Property Aggregation As AggregationSyntax
            Get
                Return GetRed(Of AggregationSyntax)(_aggregation, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Aggregation property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAggregation(aggregation as AggregationSyntax) As AggregationRangeVariableSyntax
            return Update(Me.NameEquals, aggregation)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._nameEquals
                Case 1
                    Return Me._aggregation
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.NameEquals
                Case 1
                    Return Me.Aggregation
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAggregationRangeVariable(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAggregationRangeVariable(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AggregationRangeVariableSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="nameEquals">
        ''' The new NameEquals to update this AggregationRangeVariableSyntaxSyntax node
        ''' with. If not specified the current NameEquals will be used in the new
        ''' AggregationRangeVariableSyntaxSyntax node.
        ''' </param>
        ''' <param name="aggregation">
        ''' The new Aggregation to update this AggregationRangeVariableSyntaxSyntax node
        ''' with. If not specified the current Aggregation will be used in the new
        ''' AggregationRangeVariableSyntaxSyntax node.
        ''' </param>
        Public Function Update(nameEquals As VariableNameEqualsSyntax, aggregation As AggregationSyntax) As AggregationRangeVariableSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AggregationRangeVariableSyntax)
            If nameEquals IsNot Me._nameEquals OrElse aggregation IsNot Me._aggregation Then
                Dim newNode = Syntax.AggregationRangeVariable(nameEquals, aggregation)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the name and optional type of an expression range variable.
    ''' </summary>
    Public NotInheritable Class VariableNameEqualsSyntax
        Inherits SyntaxNode

        Friend _identifier as ModifiedIdentifierSyntax
        Friend _asClause as SimpleAsClauseSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, equalsToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.VariableNameEqualsSyntax(kind, errors, annotations, DirectCast(identifier.Green, InternalSyntax.ModifiedIdentifierSyntax), if(asClause IsNot Nothing , DirectCast(asClause.Green, InternalSyntax.SimpleAsClauseSyntax), Nothing) , equalsToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The name of the variable being defined.
        ''' </summary>
        Public  ReadOnly Property Identifier As ModifiedIdentifierSyntax
            Get
                Return GetRed(Of ModifiedIdentifierSyntax)(_identifier, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as ModifiedIdentifierSyntax) As VariableNameEqualsSyntax
            return Update(identifier, Me.AsClause, Me.EqualsToken)
        End Function

        ''' <summary>
        ''' Describes the type of the variable being defined.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AsClause As SimpleAsClauseSyntax
            Get
                Return GetRed(Of SimpleAsClauseSyntax)(_asClause, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AsClause property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAsClause(asClause as SimpleAsClauseSyntax) As VariableNameEqualsSyntax
            return Update(Me.Identifier, asClause, Me.EqualsToken)
        End Function

        ''' <summary>
        ''' The "=" token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.VariableNameEqualsSyntax)._equalsToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As VariableNameEqualsSyntax
            return Update(Me.Identifier, Me.AsClause, equalsToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._identifier
                Case 1
                    Return Me._asClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Identifier
                Case 1
                    Return Me.AsClause
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitVariableNameEquals(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitVariableNameEquals(Me)
        End Sub


        ''' <summary>
        ''' Creates a new VariableNameEqualsSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="identifier">
        ''' The new Identifier to update this VariableNameEqualsSyntaxSyntax node with. If
        ''' not specified the current Identifier will be used in the new
        ''' VariableNameEqualsSyntaxSyntax node.
        ''' </param>
        ''' <param name="asClause">
        ''' The new AsClause to update this VariableNameEqualsSyntaxSyntax node with. If
        ''' not specified the current AsClause will be used in the new
        ''' VariableNameEqualsSyntaxSyntax node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this VariableNameEqualsSyntaxSyntax node with. If
        ''' not specified the current EqualsToken will be used in the new
        ''' VariableNameEqualsSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, equalsToken As SyntaxToken) As VariableNameEqualsSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.VariableNameEqualsSyntax)
            If identifier IsNot Me._identifier OrElse asClause IsNot Me._asClause OrElse equalsToken.Node IsNot green._equalsToken Then
                Dim newNode = Syntax.VariableNameEquals(identifier, asClause, equalsToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents aggregation in aggregation range variable declaration of a Group By,
    ''' Group Join or Aggregate query operator.
    ''' </summary>
    Public MustInherit Class AggregationSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents an invocation of an Aggregation function in the aggregation range
    ''' variable declaration of a Group By, Group Join or Aggregate query operator.
    ''' </summary>
    Public NotInheritable Class FunctionAggregationSyntax
        Inherits AggregationSyntax

        Friend _argument as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), functionName As InternalSyntax.IdentifierTokenSyntax, openParenToken As InternalSyntax.PunctuationSyntax, argument As ExpressionSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.FunctionAggregationSyntax(kind, errors, annotations, functionName, openParenToken, if(argument IsNot Nothing , DirectCast(argument.Green, InternalSyntax.ExpressionSyntax), Nothing) , closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The name of the aggregation function.
        ''' </summary>
        Public  ReadOnly Property FunctionName As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FunctionAggregationSyntax)._functionName, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FunctionName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFunctionName(functionName as SyntaxToken) As FunctionAggregationSyntax
            return Update(functionName, Me.OpenParenToken, Me.Argument, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "(" token if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FunctionAggregationSyntax)._openParenToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As FunctionAggregationSyntax
            return Update(Me.FunctionName, openParenToken, Me.Argument, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The argument to the aggregation function.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Argument As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_argument, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Argument property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArgument(argument as ExpressionSyntax) As FunctionAggregationSyntax
            return Update(Me.FunctionName, Me.OpenParenToken, argument, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The ")" token, if present.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FunctionAggregationSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As FunctionAggregationSyntax
            return Update(Me.FunctionName, Me.OpenParenToken, Me.Argument, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._argument
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Argument
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitFunctionAggregation(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitFunctionAggregation(Me)
        End Sub


        ''' <summary>
        ''' Creates a new FunctionAggregationSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="functionName">
        ''' The new FunctionName to update this FunctionAggregationSyntaxSyntax node with.
        ''' If not specified the current FunctionName will be used in the new
        ''' FunctionAggregationSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this FunctionAggregationSyntaxSyntax node
        ''' with. If not specified the current OpenParenToken will be used in the new
        ''' FunctionAggregationSyntaxSyntax node.
        ''' </param>
        ''' <param name="argument">
        ''' The new Argument to update this FunctionAggregationSyntaxSyntax node with. If
        ''' not specified the current Argument will be used in the new
        ''' FunctionAggregationSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this FunctionAggregationSyntaxSyntax node
        ''' with. If not specified the current CloseParenToken will be used in the new
        ''' FunctionAggregationSyntaxSyntax node.
        ''' </param>
        Public Function Update(functionName As SyntaxToken, openParenToken As SyntaxToken, argument As ExpressionSyntax, closeParenToken As SyntaxToken) As FunctionAggregationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.FunctionAggregationSyntax)
            If functionName.Node IsNot green._functionName OrElse openParenToken.Node IsNot green._openParenToken OrElse argument IsNot Me._argument OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.FunctionAggregation(functionName, openParenToken, argument, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the use of "Group" as the aggregation function in the in the
    ''' aggregation range variable declaration of a Group By or Group Join query
    ''' operator.
    ''' </summary>
    Public NotInheritable Class GroupAggregationSyntax
        Inherits AggregationSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), groupKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.GroupAggregationSyntax(kind, errors, annotations, groupKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Group" keyword.
        ''' </summary>
        Public  ReadOnly Property GroupKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupAggregationSyntax)._groupKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GroupKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGroupKeyword(groupKeyword as SyntaxToken) As GroupAggregationSyntax
            return Update(groupKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGroupAggregation(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGroupAggregation(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GroupAggregationSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The new GroupKeyword to update this GroupAggregationSyntaxSyntax node with. If
        ''' not specified the current GroupKeyword will be used in the new
        ''' GroupAggregationSyntaxSyntax node.
        ''' </param>
        Public Function Update(groupKeyword As SyntaxToken) As GroupAggregationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GroupAggregationSyntax)
            If groupKeyword.Node IsNot green._groupKeyword Then
                Dim newNode = Syntax.GroupAggregation(groupKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "From" query operator. If this is the beginning of a query, the
    ''' Source will be Nothing. Otherwise, the Source will be the part of the query to
    ''' the left of the From.
    ''' </summary>
    Public NotInheritable Class FromClauseSyntax
        Inherits QueryClauseSyntax

        Friend _variables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), fromKeyword As InternalSyntax.KeywordSyntax, variables As SyntaxNode)
            Me.New(New InternalSyntax.FromClauseSyntax(kind, errors, annotations, fromKeyword, if(variables IsNot Nothing, variables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "From" keyword.
        ''' </summary>
        Public  ReadOnly Property FromKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.FromClauseSyntax)._fromKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FromKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFromKeyword(fromKeyword as SyntaxToken) As FromClauseSyntax
            return Update(fromKeyword, Me.Variables)
        End Function

        ''' <summary>
        ''' The list of collection variables declared by this From operator.
        ''' </summary>
        Public  ReadOnly Property Variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_variables, 1)
                Return new SeparatedSyntaxList(Of CollectionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Variables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVariables(variables as SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax
            return Update(Me.FromKeyword, variables)
        End Function

        Public Shadows Function AddVariables(ParamArray items As CollectionRangeVariableSyntax()) As FromClauseSyntax
            Return Me.WithVariables(Me.Variables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._variables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_variables, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitFromClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitFromClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new FromClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="fromKeyword">
        ''' The new FromKeyword to update this FromClauseSyntaxSyntax node with. If not
        ''' specified the current FromKeyword will be used in the new
        ''' FromClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="variables">
        ''' The new Variables to update this FromClauseSyntaxSyntax node with. If not
        ''' specified the current Variables will be used in the new FromClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(fromKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.FromClauseSyntax)
            If fromKeyword.Node IsNot green._fromKeyword OrElse variables <> Me.Variables Then
                Dim newNode = Syntax.FromClause(fromKeyword, variables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Let" query operator.
    ''' </summary>
    Public NotInheritable Class LetClauseSyntax
        Inherits QueryClauseSyntax

        Friend _variables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), letKeyword As InternalSyntax.KeywordSyntax, variables As SyntaxNode)
            Me.New(New InternalSyntax.LetClauseSyntax(kind, errors, annotations, letKeyword, if(variables IsNot Nothing, variables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Let" keyword.
        ''' </summary>
        Public  ReadOnly Property LetKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.LetClauseSyntax)._letKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LetKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLetKeyword(letKeyword as SyntaxToken) As LetClauseSyntax
            return Update(letKeyword, Me.Variables)
        End Function

        ''' <summary>
        ''' The list of expression range variable being defined by the Let operator.
        ''' </summary>
        Public  ReadOnly Property Variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_variables, 1)
                Return new SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Variables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVariables(variables as SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax
            return Update(Me.LetKeyword, variables)
        End Function

        Public Shadows Function AddVariables(ParamArray items As ExpressionRangeVariableSyntax()) As LetClauseSyntax
            Return Me.WithVariables(Me.Variables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._variables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_variables, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitLetClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitLetClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new LetClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="letKeyword">
        ''' The new LetKeyword to update this LetClauseSyntaxSyntax node with. If not
        ''' specified the current LetKeyword will be used in the new LetClauseSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="variables">
        ''' The new Variables to update this LetClauseSyntaxSyntax node with. If not
        ''' specified the current Variables will be used in the new LetClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(letKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.LetClauseSyntax)
            If letKeyword.Node IsNot green._letKeyword OrElse variables <> Me.Variables Then
                Dim newNode = Syntax.LetClause(letKeyword, variables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an Aggregate query operator.
    ''' </summary>
    Public NotInheritable Class AggregateClauseSyntax
        Inherits QueryClauseSyntax

        Friend _variables as SyntaxNode
        Friend _additionalQueryOperators as SyntaxNode
        Friend _aggregationVariables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), aggregateKeyword As InternalSyntax.KeywordSyntax, variables As SyntaxNode, additionalQueryOperators As SyntaxNode, intoKeyword As InternalSyntax.KeywordSyntax, aggregationVariables As SyntaxNode)
            Me.New(New InternalSyntax.AggregateClauseSyntax(kind, errors, annotations, aggregateKeyword, if(variables IsNot Nothing, variables.Green, Nothing), if(additionalQueryOperators IsNot Nothing, additionalQueryOperators.Green, Nothing), intoKeyword, if(aggregationVariables IsNot Nothing, aggregationVariables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Aggregate" keyword.
        ''' </summary>
        Public  ReadOnly Property AggregateKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AggregateClauseSyntax)._aggregateKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AggregateKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAggregateKeyword(aggregateKeyword as SyntaxToken) As AggregateClauseSyntax
            return Update(aggregateKeyword, Me.Variables, Me.AdditionalQueryOperators, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The list of collection range variables declared by this Aggregate operator.
        ''' </summary>
        Public  ReadOnly Property Variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_variables, 1)
                Return new SeparatedSyntaxList(Of CollectionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Variables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVariables(variables as SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As AggregateClauseSyntax
            return Update(Me.AggregateKeyword, variables, Me.AdditionalQueryOperators, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddVariables(ParamArray items As CollectionRangeVariableSyntax()) As AggregateClauseSyntax
            Return Me.WithVariables(Me.Variables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' A list of additional query operators. It may be empty.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property AdditionalQueryOperators As SyntaxList(Of QueryClauseSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_additionalQueryOperators, 2)
                Return new SyntaxList(Of QueryClauseSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AdditionalQueryOperators property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAdditionalQueryOperators(additionalQueryOperators as SyntaxList(Of QueryClauseSyntax)) As AggregateClauseSyntax
            return Update(Me.AggregateKeyword, Me.Variables, additionalQueryOperators, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddAdditionalQueryOperators(ParamArray items As QueryClauseSyntax()) As AggregateClauseSyntax
            Return Me.WithAdditionalQueryOperators(Me.AdditionalQueryOperators.Add(items))
        End Function

        ''' <summary>
        ''' The "Into" keyword.
        ''' </summary>
        Public  ReadOnly Property IntoKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.AggregateClauseSyntax)._intoKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IntoKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIntoKeyword(intoKeyword as SyntaxToken) As AggregateClauseSyntax
            return Update(Me.AggregateKeyword, Me.Variables, Me.AdditionalQueryOperators, intoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The list of new variables being defined by the aggregation.
        ''' </summary>
        Public  ReadOnly Property AggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_aggregationVariables, 4)
                Return new SeparatedSyntaxList(Of AggregationRangeVariableSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AggregationVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAggregationVariables(aggregationVariables as SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax
            return Update(Me.AggregateKeyword, Me.Variables, Me.AdditionalQueryOperators, Me.IntoKeyword, aggregationVariables)
        End Function

        Public Shadows Function AddAggregationVariables(ParamArray items As AggregationRangeVariableSyntax()) As AggregateClauseSyntax
            Return Me.WithAggregationVariables(Me.AggregationVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._variables
                Case 2
                    Return Me._additionalQueryOperators
                Case 4
                    Return Me._aggregationVariables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_variables, 1)
                Case 2
                    Return GetRed(Of SyntaxNode)(_additionalQueryOperators, 2)
                Case 4
                    Return GetRed(Of SyntaxNode)(_aggregationVariables, 4)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitAggregateClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitAggregateClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new AggregateClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="aggregateKeyword">
        ''' The new AggregateKeyword to update this AggregateClauseSyntaxSyntax node with.
        ''' If not specified the current AggregateKeyword will be used in the new
        ''' AggregateClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="variables">
        ''' The new Variables to update this AggregateClauseSyntaxSyntax node with. If not
        ''' specified the current Variables will be used in the new
        ''' AggregateClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="additionalQueryOperators">
        ''' The new AdditionalQueryOperators to update this AggregateClauseSyntaxSyntax
        ''' node with. If not specified the current AdditionalQueryOperators will be used
        ''' in the new AggregateClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="intoKeyword">
        ''' The new IntoKeyword to update this AggregateClauseSyntaxSyntax node with. If
        ''' not specified the current IntoKeyword will be used in the new
        ''' AggregateClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The new AggregationVariables to update this AggregateClauseSyntaxSyntax node
        ''' with. If not specified the current AggregationVariables will be used in the new
        ''' AggregateClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(aggregateKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalQueryOperators As SyntaxList(of QueryClauseSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.AggregateClauseSyntax)
            If aggregateKeyword.Node IsNot green._aggregateKeyword OrElse variables <> Me.Variables OrElse additionalQueryOperators <> Me.AdditionalQueryOperators OrElse intoKeyword.Node IsNot green._intoKeyword OrElse aggregationVariables <> Me.AggregationVariables Then
                Dim newNode = Syntax.AggregateClause(aggregateKeyword, variables, additionalQueryOperators, intoKeyword, aggregationVariables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Distinct" query operator.
    ''' </summary>
    Public NotInheritable Class DistinctClauseSyntax
        Inherits QueryClauseSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), distinctKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.DistinctClauseSyntax(kind, errors, annotations, distinctKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Distinct" keyword.
        ''' </summary>
        Public  ReadOnly Property DistinctKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DistinctClauseSyntax)._distinctKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DistinctKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDistinctKeyword(distinctKeyword as SyntaxToken) As DistinctClauseSyntax
            return Update(distinctKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDistinctClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDistinctClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DistinctClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="distinctKeyword">
        ''' The new DistinctKeyword to update this DistinctClauseSyntaxSyntax node with. If
        ''' not specified the current DistinctKeyword will be used in the new
        ''' DistinctClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(distinctKeyword As SyntaxToken) As DistinctClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DistinctClauseSyntax)
            If distinctKeyword.Node IsNot green._distinctKeyword Then
                Dim newNode = Syntax.DistinctClause(distinctKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Where" query operator.
    ''' </summary>
    Public NotInheritable Class WhereClauseSyntax
        Inherits QueryClauseSyntax

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), whereKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax)
            Me.New(New InternalSyntax.WhereClauseSyntax(kind, errors, annotations, whereKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Where" keyword.
        ''' </summary>
        Public  ReadOnly Property WhereKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.WhereClauseSyntax)._whereKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhereKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhereKeyword(whereKeyword as SyntaxToken) As WhereClauseSyntax
            return Update(whereKeyword, Me.Condition)
        End Function

        ''' <summary>
        ''' The boolean expression used for filtering.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As WhereClauseSyntax
            return Update(Me.WhereKeyword, condition)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitWhereClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitWhereClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new WhereClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="whereKeyword">
        ''' The new WhereKeyword to update this WhereClauseSyntaxSyntax node with. If not
        ''' specified the current WhereKeyword will be used in the new
        ''' WhereClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this WhereClauseSyntaxSyntax node with. If not
        ''' specified the current Condition will be used in the new WhereClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(whereKeyword As SyntaxToken, condition As ExpressionSyntax) As WhereClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.WhereClauseSyntax)
            If whereKeyword.Node IsNot green._whereKeyword OrElse condition IsNot Me._condition Then
                Dim newNode = Syntax.WhereClause(whereKeyword, condition)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Skip While" or "Take While" query operator. The Kind property
    ''' tells which.
    ''' </summary>
    Public NotInheritable Class PartitionWhileClauseSyntax
        Inherits QueryClauseSyntax

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), skipOrTakeKeyword As InternalSyntax.KeywordSyntax, whileKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax)
            Me.New(New InternalSyntax.PartitionWhileClauseSyntax(kind, errors, annotations, skipOrTakeKeyword, whileKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Skip" or "Take" keyword.
        ''' </summary>
        Public  ReadOnly Property SkipOrTakeKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PartitionWhileClauseSyntax)._skipOrTakeKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SkipOrTakeKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSkipOrTakeKeyword(skipOrTakeKeyword as SyntaxToken) As PartitionWhileClauseSyntax
            return Update(skipOrTakeKeyword, Me.WhileKeyword, Me.Condition)
        End Function

        ''' <summary>
        ''' The "While" keyword.
        ''' </summary>
        Public  ReadOnly Property WhileKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PartitionWhileClauseSyntax)._whileKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the WhileKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithWhileKeyword(whileKeyword as SyntaxToken) As PartitionWhileClauseSyntax
            return Update(Me.SkipOrTakeKeyword, whileKeyword, Me.Condition)
        End Function

        ''' <summary>
        ''' The boolean expression used for partitioning.
        ''' </summary>
        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As PartitionWhileClauseSyntax
            return Update(Me.SkipOrTakeKeyword, Me.WhileKeyword, condition)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPartitionWhileClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPartitionWhileClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PartitionWhileClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The new SkipOrTakeKeyword to update this PartitionWhileClauseSyntaxSyntax node
        ''' with. If not specified the current SkipOrTakeKeyword will be used in the new
        ''' PartitionWhileClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="whileKeyword">
        ''' The new WhileKeyword to update this PartitionWhileClauseSyntaxSyntax node with.
        ''' If not specified the current WhileKeyword will be used in the new
        ''' PartitionWhileClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this PartitionWhileClauseSyntaxSyntax node with. If
        ''' not specified the current Condition will be used in the new
        ''' PartitionWhileClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PartitionWhileClauseSyntax)
            If skipOrTakeKeyword.Node IsNot green._skipOrTakeKeyword OrElse whileKeyword.Node IsNot green._whileKeyword OrElse condition IsNot Me._condition Then
                Dim newNode = Syntax.PartitionWhileClause(Me.Kind, skipOrTakeKeyword, whileKeyword, condition)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
    ''' </summary>
    Public NotInheritable Class PartitionClauseSyntax
        Inherits QueryClauseSyntax

        Friend _count as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), skipOrTakeKeyword As InternalSyntax.KeywordSyntax, count As ExpressionSyntax)
            Me.New(New InternalSyntax.PartitionClauseSyntax(kind, errors, annotations, skipOrTakeKeyword, DirectCast(count.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Skip" or "Take" keyword.
        ''' </summary>
        Public  ReadOnly Property SkipOrTakeKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PartitionClauseSyntax)._skipOrTakeKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SkipOrTakeKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSkipOrTakeKeyword(skipOrTakeKeyword as SyntaxToken) As PartitionClauseSyntax
            return Update(skipOrTakeKeyword, Me.Count)
        End Function

        ''' <summary>
        ''' Represents the expression with the number of items to take or skip.
        ''' </summary>
        Public  ReadOnly Property Count As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_count, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Count property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCount(count as ExpressionSyntax) As PartitionClauseSyntax
            return Update(Me.SkipOrTakeKeyword, count)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._count
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Count
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPartitionClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPartitionClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PartitionClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The new SkipOrTakeKeyword to update this PartitionClauseSyntaxSyntax node with.
        ''' If not specified the current SkipOrTakeKeyword will be used in the new
        ''' PartitionClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="count">
        ''' The new Count to update this PartitionClauseSyntaxSyntax node with. If not
        ''' specified the current Count will be used in the new PartitionClauseSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PartitionClauseSyntax)
            If skipOrTakeKeyword.Node IsNot green._skipOrTakeKeyword OrElse count IsNot Me._count Then
                Dim newNode = Syntax.PartitionClause(Me.Kind, skipOrTakeKeyword, count)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Group By" query operator.
    ''' </summary>
    Public NotInheritable Class GroupByClauseSyntax
        Inherits QueryClauseSyntax

        Friend _items as SyntaxNode
        Friend _keys as SyntaxNode
        Friend _aggregationVariables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), groupKeyword As InternalSyntax.KeywordSyntax, items As SyntaxNode, byKeyword As InternalSyntax.KeywordSyntax, keys As SyntaxNode, intoKeyword As InternalSyntax.KeywordSyntax, aggregationVariables As SyntaxNode)
            Me.New(New InternalSyntax.GroupByClauseSyntax(kind, errors, annotations, groupKeyword, if(items IsNot Nothing, items.Green, Nothing), byKeyword, if(keys IsNot Nothing, keys.Green, Nothing), intoKeyword, if(aggregationVariables IsNot Nothing, aggregationVariables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Group" keyword.
        ''' </summary>
        Public  ReadOnly Property GroupKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupByClauseSyntax)._groupKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GroupKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGroupKeyword(groupKeyword as SyntaxToken) As GroupByClauseSyntax
            return Update(groupKeyword, Me.Items, Me.ByKeyword, Me.Keys, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The optional list of variables being grouped; the contents of the Group clause.
        ''' If none were specified, an empty list is returned.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_items, 1)
                Return new SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Items property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithItems(items as SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As GroupByClauseSyntax
            return Update(Me.GroupKeyword, items, Me.ByKeyword, Me.Keys, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddItems(ParamArray items As ExpressionRangeVariableSyntax()) As GroupByClauseSyntax
            Return Me.WithItems(Me.Items.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The "By" keyword.
        ''' </summary>
        Public  ReadOnly Property ByKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupByClauseSyntax)._byKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ByKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithByKeyword(byKeyword as SyntaxToken) As GroupByClauseSyntax
            return Update(Me.GroupKeyword, Me.Items, byKeyword, Me.Keys, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The key values being used for grouping.
        ''' </summary>
        Public  ReadOnly Property Keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_keys, 3)
                Return new SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)(listNode, GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Keys property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeys(keys as SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As GroupByClauseSyntax
            return Update(Me.GroupKeyword, Me.Items, Me.ByKeyword, keys, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddKeys(ParamArray items As ExpressionRangeVariableSyntax()) As GroupByClauseSyntax
            Return Me.WithKeys(Me.Keys.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Public  ReadOnly Property IntoKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupByClauseSyntax)._intoKeyword, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IntoKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIntoKeyword(intoKeyword as SyntaxToken) As GroupByClauseSyntax
            return Update(Me.GroupKeyword, Me.Items, Me.ByKeyword, Me.Keys, intoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The list of new variables that calculate aggregations.
        ''' </summary>
        Public  ReadOnly Property AggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_aggregationVariables, 5)
                Return new SeparatedSyntaxList(Of AggregationRangeVariableSyntax)(listNode, GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AggregationVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAggregationVariables(aggregationVariables as SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax
            return Update(Me.GroupKeyword, Me.Items, Me.ByKeyword, Me.Keys, Me.IntoKeyword, aggregationVariables)
        End Function

        Public Shadows Function AddAggregationVariables(ParamArray items As AggregationRangeVariableSyntax()) As GroupByClauseSyntax
            Return Me.WithAggregationVariables(Me.AggregationVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._items
                Case 3
                    Return Me._keys
                Case 5
                    Return Me._aggregationVariables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_items, 1)
                Case 3
                    Return GetRed(Of SyntaxNode)(_keys, 3)
                Case 5
                    Return GetRed(Of SyntaxNode)(_aggregationVariables, 5)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGroupByClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGroupByClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GroupByClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The new GroupKeyword to update this GroupByClauseSyntaxSyntax node with. If not
        ''' specified the current GroupKeyword will be used in the new
        ''' GroupByClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="items">
        ''' The new Items to update this GroupByClauseSyntaxSyntax node with. If not
        ''' specified the current Items will be used in the new GroupByClauseSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="byKeyword">
        ''' The new ByKeyword to update this GroupByClauseSyntaxSyntax node with. If not
        ''' specified the current ByKeyword will be used in the new
        ''' GroupByClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="keys">
        ''' The new Keys to update this GroupByClauseSyntaxSyntax node with. If not
        ''' specified the current Keys will be used in the new GroupByClauseSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="intoKeyword">
        ''' The new IntoKeyword to update this GroupByClauseSyntaxSyntax node with. If not
        ''' specified the current IntoKeyword will be used in the new
        ''' GroupByClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The new AggregationVariables to update this GroupByClauseSyntaxSyntax node
        ''' with. If not specified the current AggregationVariables will be used in the new
        ''' GroupByClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(groupKeyword As SyntaxToken, items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), byKeyword As SyntaxToken, keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GroupByClauseSyntax)
            If groupKeyword.Node IsNot green._groupKeyword OrElse items <> Me.Items OrElse byKeyword.Node IsNot green._byKeyword OrElse keys <> Me.Keys OrElse intoKeyword.Node IsNot green._intoKeyword OrElse aggregationVariables <> Me.AggregationVariables Then
                Dim newNode = Syntax.GroupByClause(groupKeyword, items, byKeyword, keys, intoKeyword, aggregationVariables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a Join query operator.
    ''' </summary>
    Public Class JoinClauseSyntax
        Inherits QueryClauseSyntax

        Friend _joinedVariables as SyntaxNode
        Friend _additionalJoins as SyntaxNode
        Friend _joinConditions as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), joinKeyword As InternalSyntax.KeywordSyntax, joinedVariables As SyntaxNode, additionalJoins As SyntaxNode, onKeyword As InternalSyntax.KeywordSyntax, joinConditions As SyntaxNode)
            Me.New(New InternalSyntax.JoinClauseSyntax(kind, errors, annotations, joinKeyword, if(joinedVariables IsNot Nothing, joinedVariables.Green, Nothing), if(additionalJoins IsNot Nothing, additionalJoins.Green, Nothing), onKeyword, if(joinConditions IsNot Nothing, joinConditions.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Join" keyword.
        ''' </summary>
        Public ReadOnly Property JoinKeyword As SyntaxToken
            Get
                Return Me.GetJoinKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetJoinKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.JoinClauseSyntax)._joinKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function

        ''' <summary>
        ''' Creates a new node and sets the JoinKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinKeyword(joinKeyword as SyntaxToken) As JoinClauseSyntax
            return Update(joinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions)
        End Function

        ''' <summary>
        ''' Defines the collection range variables being joined to.
        ''' </summary>
        Public Overridable ReadOnly Property JoinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_joinedVariables, 1)
                Return new SeparatedSyntaxList(Of CollectionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the JoinedVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinedVariables(joinedVariables as SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As JoinClauseSyntax
            return Update(Me.JoinKeyword, joinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions)
        End Function

        Public Shadows Function AddJoinedVariables(ParamArray items As CollectionRangeVariableSyntax()) As JoinClauseSyntax
            Return Me.WithJoinedVariables(Me.JoinedVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' An additional Join or Group Join query operator.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public ReadOnly Property AdditionalJoins As SyntaxList(Of JoinClauseSyntax)
            Get
                Return Me.GetAdditionalJoinsCore()
            End Get
        End Property

        Friend Overridable Function GetAdditionalJoinsCore() As SyntaxList(Of JoinClauseSyntax)
                Dim listNode = GetRed(Of SyntaxNode)(_additionalJoins, 2)
                Return new SyntaxList(Of JoinClauseSyntax)(listNode)
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AdditionalJoins property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAdditionalJoins(additionalJoins as SyntaxList(Of JoinClauseSyntax)) As JoinClauseSyntax
            return Update(Me.JoinKeyword, Me.JoinedVariables, additionalJoins, Me.OnKeyword, Me.JoinConditions)
        End Function

        Public Shadows Function AddAdditionalJoins(ParamArray items As JoinClauseSyntax()) As JoinClauseSyntax
            Return Me.WithAdditionalJoins(Me.AdditionalJoins.Add(items))
        End Function

        ''' <summary>
        ''' The "On" keyword.
        ''' </summary>
        Public ReadOnly Property OnKeyword As SyntaxToken
            Get
                Return Me.GetOnKeywordCore()
            End Get
        End Property

        Friend Overridable Function GetOnKeywordCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.JoinClauseSyntax)._onKeyword, Me.GetChildPosition(3), Me.GetChildIndex(3))
        End Function

        ''' <summary>
        ''' Creates a new node and sets the OnKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOnKeyword(onKeyword as SyntaxToken) As JoinClauseSyntax
            return Update(Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, onKeyword, Me.JoinConditions)
        End Function

        ''' <summary>
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </summary>
        Public Overridable ReadOnly Property JoinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_joinConditions, 4)
                Return new SeparatedSyntaxList(Of JoinConditionSyntax)(listNode, GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the JoinConditions property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinConditions(joinConditions as SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax
            return Update(Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, joinConditions)
        End Function

        Public Shadows Function AddJoinConditions(ParamArray items As JoinConditionSyntax()) As JoinClauseSyntax
            Return Me.WithJoinConditions(Me.JoinConditions.Add(SyntaxKind.AndKeyword, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._joinedVariables
                Case 2
                    Return Me._additionalJoins
                Case 4
                    Return Me._joinConditions
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_joinedVariables, 1)
                Case 2
                    Return GetRed(Of SyntaxNode)(_additionalJoins, 2)
                Case 4
                    Return GetRed(Of SyntaxNode)(_joinConditions, 4)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitJoinClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitJoinClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new JoinClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="joinKeyword">
        ''' The new JoinKeyword to update this JoinClauseSyntaxSyntax node with. If not
        ''' specified the current JoinKeyword will be used in the new
        ''' JoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="joinedVariables">
        ''' The new JoinedVariables to update this JoinClauseSyntaxSyntax node with. If not
        ''' specified the current JoinedVariables will be used in the new
        ''' JoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' The new AdditionalJoins to update this JoinClauseSyntaxSyntax node with. If not
        ''' specified the current AdditionalJoins will be used in the new
        ''' JoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="onKeyword">
        ''' The new OnKeyword to update this JoinClauseSyntaxSyntax node with. If not
        ''' specified the current OnKeyword will be used in the new JoinClauseSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The new JoinConditions to update this JoinClauseSyntaxSyntax node with. If not
        ''' specified the current JoinConditions will be used in the new
        ''' JoinClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.JoinClauseSyntax)
            If joinKeyword.Node IsNot green._joinKeyword OrElse joinedVariables <> Me.JoinedVariables OrElse additionalJoins <> Me.AdditionalJoins OrElse onKeyword.Node IsNot green._onKeyword OrElse joinConditions <> Me.JoinConditions Then
                Dim newNode = Syntax.JoinClause(joinKeyword, joinedVariables, additionalJoins, onKeyword, joinConditions)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "expression Equals expression" condition in a Join.
    ''' </summary>
    Public NotInheritable Class JoinConditionSyntax
        Inherits SyntaxNode

        Friend _left as ExpressionSyntax
        Friend _right as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), left As ExpressionSyntax, equalsKeyword As InternalSyntax.KeywordSyntax, right As ExpressionSyntax)
            Me.New(New InternalSyntax.JoinConditionSyntax(kind, errors, annotations, DirectCast(left.Green, InternalSyntax.ExpressionSyntax), equalsKeyword, DirectCast(right.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The left expression in the Join condition.
        ''' </summary>
        Public  ReadOnly Property Left As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_left, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Left property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLeft(left as ExpressionSyntax) As JoinConditionSyntax
            return Update(left, Me.EqualsKeyword, Me.Right)
        End Function

        ''' <summary>
        ''' The "Equals" keyword.
        ''' </summary>
        Public  ReadOnly Property EqualsKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.JoinConditionSyntax)._equalsKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsKeyword(equalsKeyword as SyntaxToken) As JoinConditionSyntax
            return Update(Me.Left, equalsKeyword, Me.Right)
        End Function

        ''' <summary>
        ''' The right expression in the Join condition.
        ''' </summary>
        Public  ReadOnly Property Right As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_right, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Right property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRight(right as ExpressionSyntax) As JoinConditionSyntax
            return Update(Me.Left, Me.EqualsKeyword, right)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._left
                Case 2
                    Return Me._right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Left
                Case 2
                    Return Me.Right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitJoinCondition(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitJoinCondition(Me)
        End Sub


        ''' <summary>
        ''' Creates a new JoinConditionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="left">
        ''' The new Left to update this JoinConditionSyntaxSyntax node with. If not
        ''' specified the current Left will be used in the new JoinConditionSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="equalsKeyword">
        ''' The new EqualsKeyword to update this JoinConditionSyntaxSyntax node with. If
        ''' not specified the current EqualsKeyword will be used in the new
        ''' JoinConditionSyntaxSyntax node.
        ''' </param>
        ''' <param name="right">
        ''' The new Right to update this JoinConditionSyntaxSyntax node with. If not
        ''' specified the current Right will be used in the new JoinConditionSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(left As ExpressionSyntax, equalsKeyword As SyntaxToken, right As ExpressionSyntax) As JoinConditionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.JoinConditionSyntax)
            If left IsNot Me._left OrElse equalsKeyword.Node IsNot green._equalsKeyword OrElse right IsNot Me._right Then
                Dim newNode = Syntax.JoinCondition(left, equalsKeyword, right)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Group Join" query operator.
    ''' </summary>
    Public NotInheritable Class GroupJoinClauseSyntax
        Inherits JoinClauseSyntax

        Friend _aggregationVariables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), groupKeyword As InternalSyntax.KeywordSyntax, joinKeyword As InternalSyntax.KeywordSyntax, joinedVariables As SyntaxNode, additionalJoins As SyntaxNode, onKeyword As InternalSyntax.KeywordSyntax, joinConditions As SyntaxNode, intoKeyword As InternalSyntax.KeywordSyntax, aggregationVariables As SyntaxNode)
            Me.New(New InternalSyntax.GroupJoinClauseSyntax(kind, errors, annotations, groupKeyword, joinKeyword, if(joinedVariables IsNot Nothing, joinedVariables.Green, Nothing), if(additionalJoins IsNot Nothing, additionalJoins.Green, Nothing), onKeyword, if(joinConditions IsNot Nothing, joinConditions.Green, Nothing), intoKeyword, if(aggregationVariables IsNot Nothing, aggregationVariables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Group" keyword.
        ''' </summary>
        Public  ReadOnly Property GroupKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupJoinClauseSyntax)._groupKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GroupKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGroupKeyword(groupKeyword as SyntaxToken) As GroupJoinClauseSyntax
            return Update(groupKeyword, Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The "Join" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property JoinKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupJoinClauseSyntax)._joinKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        Friend Overrides Function GetJoinKeywordCore() As SyntaxToken
            Return Me.JoinKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the JoinKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinKeyword(joinKeyword as SyntaxToken) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, joinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' Defines the collection range variables being joined to.
        ''' </summary>
        Public Overrides ReadOnly Property JoinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_joinedVariables, 2)
                Return new SeparatedSyntaxList(Of CollectionRangeVariableSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the JoinedVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinedVariables(joinedVariables as SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, joinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddJoinedVariables(ParamArray items As CollectionRangeVariableSyntax()) As GroupJoinClauseSyntax
            Return Me.WithJoinedVariables(Me.JoinedVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' An additional Join or Group Join query operator.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public Shadows ReadOnly Property AdditionalJoins As SyntaxList(Of JoinClauseSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_additionalJoins, 3)
                Return new SyntaxList(Of JoinClauseSyntax)(listNode)
            End Get
        End Property

        Friend Overrides Function GetAdditionalJoinsCore() As SyntaxList(Of JoinClauseSyntax)
            Return Me.AdditionalJoins
        End Function

        ''' <summary>
        ''' Creates a new node and sets the AdditionalJoins property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAdditionalJoins(additionalJoins as SyntaxList(Of JoinClauseSyntax)) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, Me.JoinedVariables, additionalJoins, Me.OnKeyword, Me.JoinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddAdditionalJoins(ParamArray items As JoinClauseSyntax()) As GroupJoinClauseSyntax
            Return Me.WithAdditionalJoins(Me.AdditionalJoins.Add(items))
        End Function

        ''' <summary>
        ''' The "On" keyword.
        ''' </summary>
        Public Shadows ReadOnly Property OnKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupJoinClauseSyntax)._onKeyword, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        Friend Overrides Function GetOnKeywordCore() As SyntaxToken
            Return Me.OnKeyword
        End Function

        ''' <summary>
        ''' Creates a new node and sets the OnKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOnKeyword(onKeyword as SyntaxToken) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, onKeyword, Me.JoinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </summary>
        Public Overrides ReadOnly Property JoinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_joinConditions, 5)
                Return new SeparatedSyntaxList(Of JoinConditionSyntax)(listNode, GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the JoinConditions property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithJoinConditions(joinConditions as SeparatedSyntaxList(Of JoinConditionSyntax)) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, joinConditions, Me.IntoKeyword, Me.AggregationVariables)
        End Function

        Public Shadows Function AddJoinConditions(ParamArray items As JoinConditionSyntax()) As GroupJoinClauseSyntax
            Return Me.WithJoinConditions(Me.JoinConditions.Add(SyntaxKind.AndKeyword, False, items))
        End Function

        ''' <summary>
        ''' The "Into" keyword.
        ''' </summary>
        Public  ReadOnly Property IntoKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GroupJoinClauseSyntax)._intoKeyword, Me.GetChildPosition(6), Me.GetChildIndex(6))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IntoKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIntoKeyword(intoKeyword as SyntaxToken) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions, intoKeyword, Me.AggregationVariables)
        End Function

        ''' <summary>
        ''' The list of new variables that calculate aggregations.
        ''' </summary>
        Public  ReadOnly Property AggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_aggregationVariables, 7)
                Return new SeparatedSyntaxList(Of AggregationRangeVariableSyntax)(listNode, GetChildIndex(7))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AggregationVariables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAggregationVariables(aggregationVariables as SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax
            return Update(Me.GroupKeyword, Me.JoinKeyword, Me.JoinedVariables, Me.AdditionalJoins, Me.OnKeyword, Me.JoinConditions, Me.IntoKeyword, aggregationVariables)
        End Function

        Public Shadows Function AddAggregationVariables(ParamArray items As AggregationRangeVariableSyntax()) As GroupJoinClauseSyntax
            Return Me.WithAggregationVariables(Me.AggregationVariables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._joinedVariables
                Case 3
                    Return Me._additionalJoins
                Case 5
                    Return Me._joinConditions
                Case 7
                    Return Me._aggregationVariables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_joinedVariables, 2)
                Case 3
                    Return GetRed(Of SyntaxNode)(_additionalJoins, 3)
                Case 5
                    Return GetRed(Of SyntaxNode)(_joinConditions, 5)
                Case 7
                    Return GetRed(Of SyntaxNode)(_aggregationVariables, 7)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 8
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGroupJoinClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGroupJoinClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GroupJoinClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The new GroupKeyword to update this GroupJoinClauseSyntaxSyntax node with. If
        ''' not specified the current GroupKeyword will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="joinKeyword">
        ''' The new JoinKeyword to update this GroupJoinClauseSyntaxSyntax node with. If
        ''' not specified the current JoinKeyword will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="joinedVariables">
        ''' The new JoinedVariables to update this GroupJoinClauseSyntaxSyntax node with.
        ''' If not specified the current JoinedVariables will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' The new AdditionalJoins to update this GroupJoinClauseSyntaxSyntax node with.
        ''' If not specified the current AdditionalJoins will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="onKeyword">
        ''' The new OnKeyword to update this GroupJoinClauseSyntaxSyntax node with. If not
        ''' specified the current OnKeyword will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The new JoinConditions to update this GroupJoinClauseSyntaxSyntax node with. If
        ''' not specified the current JoinConditions will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="intoKeyword">
        ''' The new IntoKeyword to update this GroupJoinClauseSyntaxSyntax node with. If
        ''' not specified the current IntoKeyword will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The new AggregationVariables to update this GroupJoinClauseSyntaxSyntax node
        ''' with. If not specified the current AggregationVariables will be used in the new
        ''' GroupJoinClauseSyntaxSyntax node.
        ''' </param>
        Public Shadows Function Update(groupKeyword As SyntaxToken, joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GroupJoinClauseSyntax)
            If groupKeyword.Node IsNot green._groupKeyword OrElse joinKeyword.Node IsNot green._joinKeyword OrElse joinedVariables <> Me.JoinedVariables OrElse additionalJoins <> Me.AdditionalJoins OrElse onKeyword.Node IsNot green._onKeyword OrElse joinConditions <> Me.JoinConditions OrElse intoKeyword.Node IsNot green._intoKeyword OrElse aggregationVariables <> Me.AggregationVariables Then
                Dim newNode = Syntax.GroupJoinClause(groupKeyword, joinKeyword, joinedVariables, additionalJoins, onKeyword, joinConditions, intoKeyword, aggregationVariables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Order By" query operator.
    ''' </summary>
    Public NotInheritable Class OrderByClauseSyntax
        Inherits QueryClauseSyntax

        Friend _orderings as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), orderKeyword As InternalSyntax.KeywordSyntax, byKeyword As InternalSyntax.KeywordSyntax, orderings As SyntaxNode)
            Me.New(New InternalSyntax.OrderByClauseSyntax(kind, errors, annotations, orderKeyword, byKeyword, if(orderings IsNot Nothing, orderings.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Order" keyword
        ''' </summary>
        Public  ReadOnly Property OrderKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OrderByClauseSyntax)._orderKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OrderKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOrderKeyword(orderKeyword as SyntaxToken) As OrderByClauseSyntax
            return Update(orderKeyword, Me.ByKeyword, Me.Orderings)
        End Function

        ''' <summary>
        ''' The "By" keyword.
        ''' </summary>
        Public  ReadOnly Property ByKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OrderByClauseSyntax)._byKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ByKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithByKeyword(byKeyword as SyntaxToken) As OrderByClauseSyntax
            return Update(Me.OrderKeyword, byKeyword, Me.Orderings)
        End Function

        ''' <summary>
        ''' The list of OrderExpression's to sort by.
        ''' </summary>
        Public  ReadOnly Property Orderings As SeparatedSyntaxList(Of OrderingSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_orderings, 2)
                Return new SeparatedSyntaxList(Of OrderingSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Orderings property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOrderings(orderings as SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax
            return Update(Me.OrderKeyword, Me.ByKeyword, orderings)
        End Function

        Public Shadows Function AddOrderings(ParamArray items As OrderingSyntax()) As OrderByClauseSyntax
            Return Me.WithOrderings(Me.Orderings.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._orderings
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_orderings, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOrderByClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOrderByClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OrderByClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="orderKeyword">
        ''' The new OrderKeyword to update this OrderByClauseSyntaxSyntax node with. If not
        ''' specified the current OrderKeyword will be used in the new
        ''' OrderByClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="byKeyword">
        ''' The new ByKeyword to update this OrderByClauseSyntaxSyntax node with. If not
        ''' specified the current ByKeyword will be used in the new
        ''' OrderByClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="orderings">
        ''' The new Orderings to update this OrderByClauseSyntaxSyntax node with. If not
        ''' specified the current Orderings will be used in the new
        ''' OrderByClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(orderKeyword As SyntaxToken, byKeyword As SyntaxToken, orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OrderByClauseSyntax)
            If orderKeyword.Node IsNot green._orderKeyword OrElse byKeyword.Node IsNot green._byKeyword OrElse orderings <> Me.Orderings Then
                Dim newNode = Syntax.OrderByClause(orderKeyword, byKeyword, orderings)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' An expression to order by, plus an optional ordering. The Kind indicates
    ''' whether to order in ascending or descending order.
    ''' </summary>
    Public NotInheritable Class OrderingSyntax
        Inherits SyntaxNode

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), expression As ExpressionSyntax, ascendingOrDescendingKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.OrderingSyntax(kind, errors, annotations, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), ascendingOrDescendingKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The expression to sort by.
        ''' </summary>
        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As OrderingSyntax
            return Update(expression, Me.AscendingOrDescendingKeyword)
        End Function

        ''' <summary>
        ''' The "Ascending" or "Descending" keyword, if present. To determine whether to
        ''' sort in ascending or descending order, checking the Kind property is easier.
        ''' </summary>
        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property AscendingOrDescendingKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.OrderingSyntax)._ascendingOrDescendingKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the AscendingOrDescendingKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAscendingOrDescendingKeyword(ascendingOrDescendingKeyword as SyntaxToken) As OrderingSyntax
            return Update(Me.Expression, ascendingOrDescendingKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitOrdering(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitOrdering(Me)
        End Sub


        ''' <summary>
        ''' Creates a new OrderingSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="expression">
        ''' The new Expression to update this OrderingSyntaxSyntax node with. If not
        ''' specified the current Expression will be used in the new OrderingSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="ascendingOrDescendingKeyword">
        ''' The new AscendingOrDescendingKeyword to update this OrderingSyntaxSyntax node
        ''' with. If not specified the current AscendingOrDescendingKeyword will be used in
        ''' the new OrderingSyntaxSyntax node.
        ''' </param>
        Public Function Update(expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.OrderingSyntax)
            If expression IsNot Me._expression OrElse ascendingOrDescendingKeyword.Node IsNot green._ascendingOrDescendingKeyword Then
                Dim newNode = Syntax.Ordering(Me.Kind, expression, ascendingOrDescendingKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the "Select" query operator.
    ''' </summary>
    Public NotInheritable Class SelectClauseSyntax
        Inherits QueryClauseSyntax

        Friend _variables as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), selectKeyword As InternalSyntax.KeywordSyntax, variables As SyntaxNode)
            Me.New(New InternalSyntax.SelectClauseSyntax(kind, errors, annotations, selectKeyword, if(variables IsNot Nothing, variables.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Select" keyword.
        ''' </summary>
        Public  ReadOnly Property SelectKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SelectClauseSyntax)._selectKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SelectKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSelectKeyword(selectKeyword as SyntaxToken) As SelectClauseSyntax
            return Update(selectKeyword, Me.Variables)
        End Function

        ''' <summary>
        ''' The list of expression range variables being defined by the Select query
        ''' operator.
        ''' </summary>
        Public  ReadOnly Property Variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_variables, 1)
                Return new SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)(listNode, GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Variables property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVariables(variables as SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax
            return Update(Me.SelectKeyword, variables)
        End Function

        Public Shadows Function AddVariables(ParamArray items As ExpressionRangeVariableSyntax()) As SelectClauseSyntax
            Return Me.WithVariables(Me.Variables.Add(SyntaxKind.CommaToken, False, items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._variables
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return GetRed(Of SyntaxNode)(_variables, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSelectClause(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSelectClause(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SelectClauseSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="selectKeyword">
        ''' The new SelectKeyword to update this SelectClauseSyntaxSyntax node with. If not
        ''' specified the current SelectKeyword will be used in the new
        ''' SelectClauseSyntaxSyntax node.
        ''' </param>
        ''' <param name="variables">
        ''' The new Variables to update this SelectClauseSyntaxSyntax node with. If not
        ''' specified the current Variables will be used in the new
        ''' SelectClauseSyntaxSyntax node.
        ''' </param>
        Public Function Update(selectKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SelectClauseSyntax)
            If selectKeyword.Node IsNot green._selectKeyword OrElse variables <> Me.Variables Then
                Dim newNode = Syntax.SelectClause(selectKeyword, variables)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' This is the base class for all XML expression syntax nodes (XmlDocument and
    ''' XmlElement).
    ''' </summary>
    Public MustInherit Class XmlNodeSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents and XML Document literal expression.
    ''' </summary>
    Public NotInheritable Class XmlDocumentSyntax
        Inherits XmlNodeSyntax

        Friend _declaration as XmlDeclarationSyntax
        Friend _precedingMisc as SyntaxNode
        Friend _root as XmlNodeSyntax
        Friend _followingMisc as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), declaration As XmlDeclarationSyntax, precedingMisc As SyntaxNode, root As XmlNodeSyntax, followingMisc As SyntaxNode)
            Me.New(New InternalSyntax.XmlDocumentSyntax(kind, errors, annotations, DirectCast(declaration.Green, InternalSyntax.XmlDeclarationSyntax), if(precedingMisc IsNot Nothing, precedingMisc.Green, Nothing), DirectCast(root.Green, InternalSyntax.XmlNodeSyntax), if(followingMisc IsNot Nothing, followingMisc.Green, Nothing)), Nothing, 0)
        End Sub

        Public  ReadOnly Property Declaration As XmlDeclarationSyntax
            Get
                Return GetRed(Of XmlDeclarationSyntax)(_declaration, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Declaration property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDeclaration(declaration as XmlDeclarationSyntax) As XmlDocumentSyntax
            return Update(declaration, Me.PrecedingMisc, Me.Root, Me.FollowingMisc)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property PrecedingMisc As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_precedingMisc, 1)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the PrecedingMisc property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithPrecedingMisc(precedingMisc as SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax
            return Update(Me.Declaration, precedingMisc, Me.Root, Me.FollowingMisc)
        End Function

        Public Shadows Function AddPrecedingMisc(ParamArray items As XmlNodeSyntax()) As XmlDocumentSyntax
            Return Me.WithPrecedingMisc(Me.PrecedingMisc.Add(items))
        End Function

        Public  ReadOnly Property Root As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_root, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Root property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRoot(root as XmlNodeSyntax) As XmlDocumentSyntax
            return Update(Me.Declaration, Me.PrecedingMisc, root, Me.FollowingMisc)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property FollowingMisc As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_followingMisc, 3)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FollowingMisc property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFollowingMisc(followingMisc as SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax
            return Update(Me.Declaration, Me.PrecedingMisc, Me.Root, followingMisc)
        End Function

        Public Shadows Function AddFollowingMisc(ParamArray items As XmlNodeSyntax()) As XmlDocumentSyntax
            Return Me.WithFollowingMisc(Me.FollowingMisc.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._declaration
                Case 1
                    Return Me._precedingMisc
                Case 2
                    Return Me._root
                Case 3
                    Return Me._followingMisc
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Declaration
                Case 1
                    Return GetRed(Of SyntaxNode)(_precedingMisc, 1)
                Case 2
                    Return Me.Root
                Case 3
                    Return GetRed(Of SyntaxNode)(_followingMisc, 3)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlDocument(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlDocument(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlDocumentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="declaration">
        ''' The new Declaration to update this XmlDocumentSyntaxSyntax node with. If not
        ''' specified the current Declaration will be used in the new
        ''' XmlDocumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="precedingMisc">
        ''' The new PrecedingMisc to update this XmlDocumentSyntaxSyntax node with. If not
        ''' specified the current PrecedingMisc will be used in the new
        ''' XmlDocumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="root">
        ''' The new Root to update this XmlDocumentSyntaxSyntax node with. If not specified
        ''' the current Root will be used in the new XmlDocumentSyntaxSyntax node.
        ''' </param>
        ''' <param name="followingMisc">
        ''' The new FollowingMisc to update this XmlDocumentSyntaxSyntax node with. If not
        ''' specified the current FollowingMisc will be used in the new
        ''' XmlDocumentSyntaxSyntax node.
        ''' </param>
        Public Function Update(declaration As XmlDeclarationSyntax, precedingMisc As SyntaxList(of XmlNodeSyntax), root As XmlNodeSyntax, followingMisc As SyntaxList(of XmlNodeSyntax)) As XmlDocumentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlDocumentSyntax)
            If declaration IsNot Me._declaration OrElse precedingMisc <> Me.PrecedingMisc OrElse root IsNot Me._root OrElse followingMisc <> Me.FollowingMisc Then
                Dim newNode = Syntax.XmlDocument(declaration, precedingMisc, root, followingMisc)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the XML declaration prologue in an XML literal expression.
    ''' </summary>
    Public NotInheritable Class XmlDeclarationSyntax
        Inherits SyntaxNode

        Friend _version as XmlDeclarationOptionSyntax
        Friend _encoding as XmlDeclarationOptionSyntax
        Friend _standalone as XmlDeclarationOptionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanQuestionToken As InternalSyntax.PunctuationSyntax, xmlKeyword As InternalSyntax.KeywordSyntax, version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax, questionGreaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlDeclarationSyntax(kind, errors, annotations, lessThanQuestionToken, xmlKeyword, DirectCast(version.Green, InternalSyntax.XmlDeclarationOptionSyntax), if(encoding IsNot Nothing , DirectCast(encoding.Green, InternalSyntax.XmlDeclarationOptionSyntax), Nothing) , if(standalone IsNot Nothing , DirectCast(standalone.Green, InternalSyntax.XmlDeclarationOptionSyntax), Nothing) , questionGreaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanQuestionToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlDeclarationSyntax)._lessThanQuestionToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanQuestionToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanQuestionToken(lessThanQuestionToken as SyntaxToken) As XmlDeclarationSyntax
            return Update(lessThanQuestionToken, Me.XmlKeyword, Me.Version, Me.Encoding, Me.Standalone, Me.QuestionGreaterThanToken)
        End Function

        Public  ReadOnly Property XmlKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlDeclarationSyntax)._xmlKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the XmlKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithXmlKeyword(xmlKeyword as SyntaxToken) As XmlDeclarationSyntax
            return Update(Me.LessThanQuestionToken, xmlKeyword, Me.Version, Me.Encoding, Me.Standalone, Me.QuestionGreaterThanToken)
        End Function

        Public  ReadOnly Property Version As XmlDeclarationOptionSyntax
            Get
                Return GetRed(Of XmlDeclarationOptionSyntax)(_version, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Version property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithVersion(version as XmlDeclarationOptionSyntax) As XmlDeclarationSyntax
            return Update(Me.LessThanQuestionToken, Me.XmlKeyword, version, Me.Encoding, Me.Standalone, Me.QuestionGreaterThanToken)
        End Function

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Encoding As XmlDeclarationOptionSyntax
            Get
                Return GetRed(Of XmlDeclarationOptionSyntax)(_encoding, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Encoding property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEncoding(encoding as XmlDeclarationOptionSyntax) As XmlDeclarationSyntax
            return Update(Me.LessThanQuestionToken, Me.XmlKeyword, Me.Version, encoding, Me.Standalone, Me.QuestionGreaterThanToken)
        End Function

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Standalone As XmlDeclarationOptionSyntax
            Get
                Return GetRed(Of XmlDeclarationOptionSyntax)(_standalone, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Standalone property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStandalone(standalone as XmlDeclarationOptionSyntax) As XmlDeclarationSyntax
            return Update(Me.LessThanQuestionToken, Me.XmlKeyword, Me.Version, Me.Encoding, standalone, Me.QuestionGreaterThanToken)
        End Function

        Public  ReadOnly Property QuestionGreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlDeclarationSyntax)._questionGreaterThanToken, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the QuestionGreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithQuestionGreaterThanToken(questionGreaterThanToken as SyntaxToken) As XmlDeclarationSyntax
            return Update(Me.LessThanQuestionToken, Me.XmlKeyword, Me.Version, Me.Encoding, Me.Standalone, questionGreaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._version
                Case 3
                    Return Me._encoding
                Case 4
                    Return Me._standalone
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Version
                Case 3
                    Return Me.Encoding
                Case 4
                    Return Me.Standalone
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 6
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlDeclaration(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlDeclaration(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlDeclarationSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanQuestionToken">
        ''' The new LessThanQuestionToken to update this XmlDeclarationSyntaxSyntax node
        ''' with. If not specified the current LessThanQuestionToken will be used in the
        ''' new XmlDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="xmlKeyword">
        ''' The new XmlKeyword to update this XmlDeclarationSyntaxSyntax node with. If not
        ''' specified the current XmlKeyword will be used in the new
        ''' XmlDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="version">
        ''' The new Version to update this XmlDeclarationSyntaxSyntax node with. If not
        ''' specified the current Version will be used in the new
        ''' XmlDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="encoding">
        ''' The new Encoding to update this XmlDeclarationSyntaxSyntax node with. If not
        ''' specified the current Encoding will be used in the new
        ''' XmlDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="standalone">
        ''' The new Standalone to update this XmlDeclarationSyntaxSyntax node with. If not
        ''' specified the current Standalone will be used in the new
        ''' XmlDeclarationSyntaxSyntax node.
        ''' </param>
        ''' <param name="questionGreaterThanToken">
        ''' The new QuestionGreaterThanToken to update this XmlDeclarationSyntaxSyntax node
        ''' with. If not specified the current QuestionGreaterThanToken will be used in the
        ''' new XmlDeclarationSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanQuestionToken As SyntaxToken, xmlKeyword As SyntaxToken, version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax, questionGreaterThanToken As SyntaxToken) As XmlDeclarationSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlDeclarationSyntax)
            If lessThanQuestionToken.Node IsNot green._lessThanQuestionToken OrElse xmlKeyword.Node IsNot green._xmlKeyword OrElse version IsNot Me._version OrElse encoding IsNot Me._encoding OrElse standalone IsNot Me._standalone OrElse questionGreaterThanToken.Node IsNot green._questionGreaterThanToken Then
                Dim newNode = Syntax.XmlDeclaration(lessThanQuestionToken, xmlKeyword, version, encoding, standalone, questionGreaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML document prologue option - version, encoding, standalone or
    ''' whitespace in an XML literal expression.
    ''' </summary>
    Public NotInheritable Class XmlDeclarationOptionSyntax
        Inherits SyntaxNode

        Friend _value as XmlStringSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), name As InternalSyntax.XmlNameTokenSyntax, equals As InternalSyntax.PunctuationSyntax, value As XmlStringSyntax)
            Me.New(New InternalSyntax.XmlDeclarationOptionSyntax(kind, errors, annotations, name, equals, DirectCast(value.Green, InternalSyntax.XmlStringSyntax)), Nothing, 0)
        End Sub

        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlDeclarationOptionSyntax)._name, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As XmlDeclarationOptionSyntax
            return Update(name, Me.Equals, Me.Value)
        End Function

        Public Shadows  ReadOnly Property Equals As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlDeclarationOptionSyntax)._equals, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Equals property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEquals(equals as SyntaxToken) As XmlDeclarationOptionSyntax
            return Update(Me.Name, equals, Me.Value)
        End Function

        Public  ReadOnly Property Value As XmlStringSyntax
            Get
                Return GetRed(Of XmlStringSyntax)(_value, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as XmlStringSyntax) As XmlDeclarationOptionSyntax
            return Update(Me.Name, Me.Equals, value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me.Value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlDeclarationOption(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlDeclarationOption(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlDeclarationOptionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="name">
        ''' The new Name to update this XmlDeclarationOptionSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new
        ''' XmlDeclarationOptionSyntaxSyntax node.
        ''' </param>
        ''' <param name="equals">
        ''' The new Equals to update this XmlDeclarationOptionSyntaxSyntax node with. If
        ''' not specified the current Equals will be used in the new
        ''' XmlDeclarationOptionSyntaxSyntax node.
        ''' </param>
        ''' <param name="value">
        ''' The new Value to update this XmlDeclarationOptionSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new
        ''' XmlDeclarationOptionSyntaxSyntax node.
        ''' </param>
        Public Function Update(name As SyntaxToken, equals As SyntaxToken, value As XmlStringSyntax) As XmlDeclarationOptionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlDeclarationOptionSyntax)
            If name.Node IsNot green._name OrElse equals.Node IsNot green._equals OrElse value IsNot Me._value Then
                Dim newNode = Syntax.XmlDeclarationOption(name, equals, value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML element with content in an XML literal expression.
    ''' </summary>
    Public NotInheritable Class XmlElementSyntax
        Inherits XmlNodeSyntax

        Friend _startTag as XmlElementStartTagSyntax
        Friend _content as SyntaxNode
        Friend _endTag as XmlElementEndTagSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), startTag As XmlElementStartTagSyntax, content As SyntaxNode, endTag As XmlElementEndTagSyntax)
            Me.New(New InternalSyntax.XmlElementSyntax(kind, errors, annotations, DirectCast(startTag.Green, InternalSyntax.XmlElementStartTagSyntax), if(content IsNot Nothing, content.Green, Nothing), DirectCast(endTag.Green, InternalSyntax.XmlElementEndTagSyntax)), Nothing, 0)
        End Sub

        Public  ReadOnly Property StartTag As XmlElementStartTagSyntax
            Get
                Return GetRed(Of XmlElementStartTagSyntax)(_startTag, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StartTag property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStartTag(startTag as XmlElementStartTagSyntax) As XmlElementSyntax
            return Update(startTag, Me.Content, Me.EndTag)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Content As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_content, 1)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Content property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithContent(content as SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax
            return Update(Me.StartTag, content, Me.EndTag)
        End Function

        Public Shadows Function AddContent(ParamArray items As XmlNodeSyntax()) As XmlElementSyntax
            Return Me.WithContent(Me.Content.Add(items))
        End Function

        Public  ReadOnly Property EndTag As XmlElementEndTagSyntax
            Get
                Return GetRed(Of XmlElementEndTagSyntax)(_endTag, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndTag property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndTag(endTag as XmlElementEndTagSyntax) As XmlElementSyntax
            return Update(Me.StartTag, Me.Content, endTag)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._startTag
                Case 1
                    Return Me._content
                Case 2
                    Return Me._endTag
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.StartTag
                Case 1
                    Return GetRed(Of SyntaxNode)(_content, 1)
                Case 2
                    Return Me.EndTag
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlElement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlElement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlElementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="startTag">
        ''' The new StartTag to update this XmlElementSyntaxSyntax node with. If not
        ''' specified the current StartTag will be used in the new XmlElementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="content">
        ''' The new Content to update this XmlElementSyntaxSyntax node with. If not
        ''' specified the current Content will be used in the new XmlElementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="endTag">
        ''' The new EndTag to update this XmlElementSyntaxSyntax node with. If not
        ''' specified the current EndTag will be used in the new XmlElementSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(startTag As XmlElementStartTagSyntax, content As SyntaxList(of XmlNodeSyntax), endTag As XmlElementEndTagSyntax) As XmlElementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlElementSyntax)
            If startTag IsNot Me._startTag OrElse content <> Me.Content OrElse endTag IsNot Me._endTag Then
                Dim newNode = Syntax.XmlElement(startTag, content, endTag)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents Xml text.
    ''' </summary>
    Public NotInheritable Class XmlTextSyntax
        Inherits XmlNodeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), textTokens As InternalSyntax.SyntaxNode)
            Me.New(New InternalSyntax.XmlTextSyntax(kind, errors, annotations, textTokens), Nothing, 0)
        End Sub

        ''' <summary>
        ''' A list of all the text tokens in the Xml text. This list always contains at
        ''' least one token.
        ''' </summary>
        Public  ReadOnly Property TextTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.XmlTextSyntax)._textTokens, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TextTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTextTokens(textTokens as SyntaxTokenList) As XmlTextSyntax
            return Update(textTokens)
        End Function

        Public Shadows Function AddTextTokens(ParamArray items As SyntaxToken()) As XmlTextSyntax
            Return Me.WithTextTokens(Me.TextTokens.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlText(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlText(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlTextSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="textTokens">
        ''' The new TextTokens to update this XmlTextSyntaxSyntax node with. If not
        ''' specified the current TextTokens will be used in the new XmlTextSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(textTokens As SyntaxTokenList) As XmlTextSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlTextSyntax)
            If textTokens <> Me.TextTokens Then
                Dim newNode = Syntax.XmlText(textTokens)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the start tag of an XML element of the form &lt;element&gt;.
    ''' </summary>
    Public NotInheritable Class XmlElementStartTagSyntax
        Inherits XmlNodeSyntax

        Friend _name as XmlNodeSyntax
        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanToken As InternalSyntax.PunctuationSyntax, name As XmlNodeSyntax, attributes As SyntaxNode, greaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlElementStartTagSyntax(kind, errors, annotations, lessThanToken, DirectCast(name.Green, InternalSyntax.XmlNodeSyntax), if(attributes IsNot Nothing, attributes.Green, Nothing), greaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlElementStartTagSyntax)._lessThanToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanToken(lessThanToken as SyntaxToken) As XmlElementStartTagSyntax
            return Update(lessThanToken, Me.Name, Me.Attributes, Me.GreaterThanToken)
        End Function

        Public  ReadOnly Property Name As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNodeSyntax) As XmlElementStartTagSyntax
            return Update(Me.LessThanToken, name, Me.Attributes, Me.GreaterThanToken)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 2)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of XmlNodeSyntax)) As XmlElementStartTagSyntax
            return Update(Me.LessThanToken, Me.Name, attributes, Me.GreaterThanToken)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As XmlNodeSyntax()) As XmlElementStartTagSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        Public  ReadOnly Property GreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlElementStartTagSyntax)._greaterThanToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGreaterThanToken(greaterThanToken as SyntaxToken) As XmlElementStartTagSyntax
            return Update(Me.LessThanToken, Me.Name, Me.Attributes, greaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._name
                Case 2
                    Return Me._attributes
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Name
                Case 2
                    Return GetRed(Of SyntaxNode)(_attributes, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlElementStartTag(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlElementStartTag(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlElementStartTagSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The new LessThanToken to update this XmlElementStartTagSyntaxSyntax node with.
        ''' If not specified the current LessThanToken will be used in the new
        ''' XmlElementStartTagSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlElementStartTagSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new
        ''' XmlElementStartTagSyntaxSyntax node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this XmlElementStartTagSyntaxSyntax node with. If
        ''' not specified the current Attributes will be used in the new
        ''' XmlElementStartTagSyntaxSyntax node.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The new GreaterThanToken to update this XmlElementStartTagSyntaxSyntax node
        ''' with. If not specified the current GreaterThanToken will be used in the new
        ''' XmlElementStartTagSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax), greaterThanToken As SyntaxToken) As XmlElementStartTagSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlElementStartTagSyntax)
            If lessThanToken.Node IsNot green._lessThanToken OrElse name IsNot Me._name OrElse attributes <> Me.Attributes OrElse greaterThanToken.Node IsNot green._greaterThanToken Then
                Dim newNode = Syntax.XmlElementStartTag(lessThanToken, name, attributes, greaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the end tag of an XML element of the form &lt;/element&gt;.
    ''' </summary>
    Public NotInheritable Class XmlElementEndTagSyntax
        Inherits XmlNodeSyntax

        Friend _name as XmlNameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanSlashToken As InternalSyntax.PunctuationSyntax, name As XmlNameSyntax, greaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlElementEndTagSyntax(kind, errors, annotations, lessThanSlashToken, if(name IsNot Nothing , DirectCast(name.Green, InternalSyntax.XmlNameSyntax), Nothing) , greaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanSlashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlElementEndTagSyntax)._lessThanSlashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanSlashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanSlashToken(lessThanSlashToken as SyntaxToken) As XmlElementEndTagSyntax
            return Update(lessThanSlashToken, Me.Name, Me.GreaterThanToken)
        End Function

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Name As XmlNameSyntax
            Get
                Return GetRed(Of XmlNameSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNameSyntax) As XmlElementEndTagSyntax
            return Update(Me.LessThanSlashToken, name, Me.GreaterThanToken)
        End Function

        Public  ReadOnly Property GreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlElementEndTagSyntax)._greaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGreaterThanToken(greaterThanToken as SyntaxToken) As XmlElementEndTagSyntax
            return Update(Me.LessThanSlashToken, Me.Name, greaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlElementEndTag(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlElementEndTag(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlElementEndTagSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanSlashToken">
        ''' The new LessThanSlashToken to update this XmlElementEndTagSyntaxSyntax node
        ''' with. If not specified the current LessThanSlashToken will be used in the new
        ''' XmlElementEndTagSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlElementEndTagSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new XmlElementEndTagSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The new GreaterThanToken to update this XmlElementEndTagSyntaxSyntax node with.
        ''' If not specified the current GreaterThanToken will be used in the new
        ''' XmlElementEndTagSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanSlashToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlElementEndTagSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlElementEndTagSyntax)
            If lessThanSlashToken.Node IsNot green._lessThanSlashToken OrElse name IsNot Me._name OrElse greaterThanToken.Node IsNot green._greaterThanToken Then
                Dim newNode = Syntax.XmlElementEndTag(lessThanSlashToken, name, greaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an empty XML element of the form &lt;element /&gt;
    ''' </summary>
    Public NotInheritable Class XmlEmptyElementSyntax
        Inherits XmlNodeSyntax

        Friend _name as XmlNodeSyntax
        Friend _attributes as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanToken As InternalSyntax.PunctuationSyntax, name As XmlNodeSyntax, attributes As SyntaxNode, slashGreaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlEmptyElementSyntax(kind, errors, annotations, lessThanToken, DirectCast(name.Green, InternalSyntax.XmlNodeSyntax), if(attributes IsNot Nothing, attributes.Green, Nothing), slashGreaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlEmptyElementSyntax)._lessThanToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanToken(lessThanToken as SyntaxToken) As XmlEmptyElementSyntax
            return Update(lessThanToken, Me.Name, Me.Attributes, Me.SlashGreaterThanToken)
        End Function

        Public  ReadOnly Property Name As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNodeSyntax) As XmlEmptyElementSyntax
            return Update(Me.LessThanToken, name, Me.Attributes, Me.SlashGreaterThanToken)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Attributes As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_attributes, 2)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Attributes property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithAttributes(attributes as SyntaxList(Of XmlNodeSyntax)) As XmlEmptyElementSyntax
            return Update(Me.LessThanToken, Me.Name, attributes, Me.SlashGreaterThanToken)
        End Function

        Public Shadows Function AddAttributes(ParamArray items As XmlNodeSyntax()) As XmlEmptyElementSyntax
            Return Me.WithAttributes(Me.Attributes.Add(items))
        End Function

        Public  ReadOnly Property SlashGreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlEmptyElementSyntax)._slashGreaterThanToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SlashGreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSlashGreaterThanToken(slashGreaterThanToken as SyntaxToken) As XmlEmptyElementSyntax
            return Update(Me.LessThanToken, Me.Name, Me.Attributes, slashGreaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._name
                Case 2
                    Return Me._attributes
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Name
                Case 2
                    Return GetRed(Of SyntaxNode)(_attributes, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlEmptyElement(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlEmptyElement(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlEmptyElementSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The new LessThanToken to update this XmlEmptyElementSyntaxSyntax node with. If
        ''' not specified the current LessThanToken will be used in the new
        ''' XmlEmptyElementSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlEmptyElementSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new XmlEmptyElementSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="attributes">
        ''' The new Attributes to update this XmlEmptyElementSyntaxSyntax node with. If not
        ''' specified the current Attributes will be used in the new
        ''' XmlEmptyElementSyntaxSyntax node.
        ''' </param>
        ''' <param name="slashGreaterThanToken">
        ''' The new SlashGreaterThanToken to update this XmlEmptyElementSyntaxSyntax node
        ''' with. If not specified the current SlashGreaterThanToken will be used in the
        ''' new XmlEmptyElementSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax), slashGreaterThanToken As SyntaxToken) As XmlEmptyElementSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlEmptyElementSyntax)
            If lessThanToken.Node IsNot green._lessThanToken OrElse name IsNot Me._name OrElse attributes <> Me.Attributes OrElse slashGreaterThanToken.Node IsNot green._slashGreaterThanToken Then
                Dim newNode = Syntax.XmlEmptyElement(lessThanToken, name, attributes, slashGreaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML attribute in an XML literal expression.
    ''' </summary>
    Public NotInheritable Class XmlAttributeSyntax
        Inherits XmlNodeSyntax

        Friend _name as XmlNodeSyntax
        Friend _value as XmlNodeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), name As XmlNodeSyntax, equalsToken As InternalSyntax.PunctuationSyntax, value As XmlNodeSyntax)
            Me.New(New InternalSyntax.XmlAttributeSyntax(kind, errors, annotations, DirectCast(name.Green, InternalSyntax.XmlNodeSyntax), equalsToken, DirectCast(value.Green, InternalSyntax.XmlNodeSyntax)), Nothing, 0)
        End Sub

        Public  ReadOnly Property Name As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_name, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNodeSyntax) As XmlAttributeSyntax
            return Update(name, Me.EqualsToken, Me.Value)
        End Function

        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlAttributeSyntax)._equalsToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As XmlAttributeSyntax
            return Update(Me.Name, equalsToken, Me.Value)
        End Function

        Public  ReadOnly Property Value As XmlNodeSyntax
            Get
                Return GetRed(Of XmlNodeSyntax)(_value, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as XmlNodeSyntax) As XmlAttributeSyntax
            return Update(Me.Name, Me.EqualsToken, value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._name
                Case 2
                    Return Me._value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Name
                Case 2
                    Return Me.Value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlAttribute(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlAttribute(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlAttributeSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="name">
        ''' The new Name to update this XmlAttributeSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new XmlAttributeSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this XmlAttributeSyntaxSyntax node with. If not
        ''' specified the current EqualsToken will be used in the new
        ''' XmlAttributeSyntaxSyntax node.
        ''' </param>
        ''' <param name="value">
        ''' The new Value to update this XmlAttributeSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new XmlAttributeSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(name As XmlNodeSyntax, equalsToken As SyntaxToken, value As XmlNodeSyntax) As XmlAttributeSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlAttributeSyntax)
            If name IsNot Me._name OrElse equalsToken.Node IsNot green._equalsToken OrElse value IsNot Me._value Then
                Dim newNode = Syntax.XmlAttribute(name, equalsToken, value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a string of XML characters embedded as the content of an XML
    ''' element.
    ''' </summary>
    Public NotInheritable Class XmlStringSyntax
        Inherits XmlNodeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), startQuoteToken As InternalSyntax.PunctuationSyntax, textTokens As InternalSyntax.SyntaxNode, endQuoteToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlStringSyntax(kind, errors, annotations, startQuoteToken, textTokens, endQuoteToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property StartQuoteToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlStringSyntax)._startQuoteToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the StartQuoteToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithStartQuoteToken(startQuoteToken as SyntaxToken) As XmlStringSyntax
            return Update(startQuoteToken, Me.TextTokens, Me.EndQuoteToken)
        End Function

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property TextTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.XmlStringSyntax)._textTokens, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TextTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTextTokens(textTokens as SyntaxTokenList) As XmlStringSyntax
            return Update(Me.StartQuoteToken, textTokens, Me.EndQuoteToken)
        End Function

        Public Shadows Function AddTextTokens(ParamArray items As SyntaxToken()) As XmlStringSyntax
            Return Me.WithTextTokens(Me.TextTokens.Add(items))
        End Function

        Public  ReadOnly Property EndQuoteToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlStringSyntax)._endQuoteToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndQuoteToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndQuoteToken(endQuoteToken as SyntaxToken) As XmlStringSyntax
            return Update(Me.StartQuoteToken, Me.TextTokens, endQuoteToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlString(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlString(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlStringSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="startQuoteToken">
        ''' The new StartQuoteToken to update this XmlStringSyntaxSyntax node with. If not
        ''' specified the current StartQuoteToken will be used in the new
        ''' XmlStringSyntaxSyntax node.
        ''' </param>
        ''' <param name="textTokens">
        ''' The new TextTokens to update this XmlStringSyntaxSyntax node with. If not
        ''' specified the current TextTokens will be used in the new XmlStringSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="endQuoteToken">
        ''' The new EndQuoteToken to update this XmlStringSyntaxSyntax node with. If not
        ''' specified the current EndQuoteToken will be used in the new
        ''' XmlStringSyntaxSyntax node.
        ''' </param>
        Public Function Update(startQuoteToken As SyntaxToken, textTokens As SyntaxTokenList, endQuoteToken As SyntaxToken) As XmlStringSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlStringSyntax)
            If startQuoteToken.Node IsNot green._startQuoteToken OrElse textTokens <> Me.TextTokens OrElse endQuoteToken.Node IsNot green._endQuoteToken Then
                Dim newNode = Syntax.XmlString(startQuoteToken, textTokens, endQuoteToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML name of the form 'name' or 'namespace:name' appearing in
    ''' source as part of an XML literal or member access expression or an XML
    ''' namespace import clause.
    ''' </summary>
    Public NotInheritable Class XmlNameSyntax
        Inherits XmlNodeSyntax

        Friend _prefix as XmlPrefixSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), prefix As XmlPrefixSyntax, localName As InternalSyntax.XmlNameTokenSyntax)
            Me.New(New InternalSyntax.XmlNameSyntax(kind, errors, annotations, if(prefix IsNot Nothing , DirectCast(prefix.Green, InternalSyntax.XmlPrefixSyntax), Nothing) , localName), Nothing, 0)
        End Sub

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property Prefix As XmlPrefixSyntax
            Get
                Return GetRed(Of XmlPrefixSyntax)(_prefix, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Prefix property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithPrefix(prefix as XmlPrefixSyntax) As XmlNameSyntax
            return Update(prefix, Me.LocalName)
        End Function

        Public  ReadOnly Property LocalName As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlNameSyntax)._localName, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LocalName property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLocalName(localName as SyntaxToken) As XmlNameSyntax
            return Update(Me.Prefix, localName)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._prefix
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Prefix
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="prefix">
        ''' The new Prefix to update this XmlNameSyntaxSyntax node with. If not specified
        ''' the current Prefix will be used in the new XmlNameSyntaxSyntax node.
        ''' </param>
        ''' <param name="localName">
        ''' The new LocalName to update this XmlNameSyntaxSyntax node with. If not
        ''' specified the current LocalName will be used in the new XmlNameSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(prefix As XmlPrefixSyntax, localName As SyntaxToken) As XmlNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlNameSyntax)
            If prefix IsNot Me._prefix OrElse localName.Node IsNot green._localName Then
                Dim newNode = Syntax.XmlName(prefix, localName)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
    ''' of an XML literal or member access expression or an XML namespace import
    ''' clause.
    ''' </summary>
    Public NotInheritable Class XmlBracketedNameSyntax
        Inherits XmlNodeSyntax

        Friend _name as XmlNameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanToken As InternalSyntax.PunctuationSyntax, name As XmlNameSyntax, greaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlBracketedNameSyntax(kind, errors, annotations, lessThanToken, DirectCast(name.Green, InternalSyntax.XmlNameSyntax), greaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlBracketedNameSyntax)._lessThanToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanToken(lessThanToken as SyntaxToken) As XmlBracketedNameSyntax
            return Update(lessThanToken, Me.Name, Me.GreaterThanToken)
        End Function

        Public  ReadOnly Property Name As XmlNameSyntax
            Get
                Return GetRed(Of XmlNameSyntax)(_name, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as XmlNameSyntax) As XmlBracketedNameSyntax
            return Update(Me.LessThanToken, name, Me.GreaterThanToken)
        End Function

        Public  ReadOnly Property GreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlBracketedNameSyntax)._greaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGreaterThanToken(greaterThanToken as SyntaxToken) As XmlBracketedNameSyntax
            return Update(Me.LessThanToken, Me.Name, greaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Name
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlBracketedName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlBracketedName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlBracketedNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The new LessThanToken to update this XmlBracketedNameSyntaxSyntax node with. If
        ''' not specified the current LessThanToken will be used in the new
        ''' XmlBracketedNameSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlBracketedNameSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new XmlBracketedNameSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The new GreaterThanToken to update this XmlBracketedNameSyntaxSyntax node with.
        ''' If not specified the current GreaterThanToken will be used in the new
        ''' XmlBracketedNameSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlBracketedNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlBracketedNameSyntax)
            If lessThanToken.Node IsNot green._lessThanToken OrElse name IsNot Me._name OrElse greaterThanToken.Node IsNot green._greaterThanToken Then
                Dim newNode = Syntax.XmlBracketedName(lessThanToken, name, greaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents and XML namespace prefix of the form 'prefix:' as in xml:ns="".
    ''' </summary>
    Public NotInheritable Class XmlPrefixSyntax
        Inherits SyntaxNode


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), name As InternalSyntax.XmlNameTokenSyntax, colonToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlPrefixSyntax(kind, errors, annotations, name, colonToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlPrefixSyntax)._name, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As XmlPrefixSyntax
            return Update(name, Me.ColonToken)
        End Function

        Public  ReadOnly Property ColonToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlPrefixSyntax)._colonToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ColonToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithColonToken(colonToken as SyntaxToken) As XmlPrefixSyntax
            return Update(Me.Name, colonToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlPrefix(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlPrefix(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlPrefixSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="name">
        ''' The new Name to update this XmlPrefixSyntaxSyntax node with. If not specified
        ''' the current Name will be used in the new XmlPrefixSyntaxSyntax node.
        ''' </param>
        ''' <param name="colonToken">
        ''' The new ColonToken to update this XmlPrefixSyntaxSyntax node with. If not
        ''' specified the current ColonToken will be used in the new XmlPrefixSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(name As SyntaxToken, colonToken As SyntaxToken) As XmlPrefixSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlPrefixSyntax)
            If name.Node IsNot green._name OrElse colonToken.Node IsNot green._colonToken Then
                Dim newNode = Syntax.XmlPrefix(name, colonToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML comment of the form &lt;-- Comment --&gt; appearing in an XML
    ''' literal expression.
    ''' </summary>
    Public NotInheritable Class XmlCommentSyntax
        Inherits XmlNodeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanMinusMinusToken As InternalSyntax.PunctuationSyntax, textTokens As InternalSyntax.SyntaxNode, minusMinusGreaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlCommentSyntax(kind, errors, annotations, lessThanMinusMinusToken, textTokens, minusMinusGreaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanMinusMinusToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlCommentSyntax)._lessThanMinusMinusToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanMinusMinusToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanMinusMinusToken(lessThanMinusMinusToken as SyntaxToken) As XmlCommentSyntax
            return Update(lessThanMinusMinusToken, Me.TextTokens, Me.MinusMinusGreaterThanToken)
        End Function

        Public  ReadOnly Property TextTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.XmlCommentSyntax)._textTokens, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TextTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTextTokens(textTokens as SyntaxTokenList) As XmlCommentSyntax
            return Update(Me.LessThanMinusMinusToken, textTokens, Me.MinusMinusGreaterThanToken)
        End Function

        Public Shadows Function AddTextTokens(ParamArray items As SyntaxToken()) As XmlCommentSyntax
            Return Me.WithTextTokens(Me.TextTokens.Add(items))
        End Function

        Public  ReadOnly Property MinusMinusGreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlCommentSyntax)._minusMinusGreaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the MinusMinusGreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithMinusMinusGreaterThanToken(minusMinusGreaterThanToken as SyntaxToken) As XmlCommentSyntax
            return Update(Me.LessThanMinusMinusToken, Me.TextTokens, minusMinusGreaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlComment(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlComment(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlCommentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="lessThanMinusMinusToken">
        ''' The new LessThanMinusMinusToken to update this XmlCommentSyntaxSyntax node
        ''' with. If not specified the current LessThanMinusMinusToken will be used in the
        ''' new XmlCommentSyntaxSyntax node.
        ''' </param>
        ''' <param name="textTokens">
        ''' The new TextTokens to update this XmlCommentSyntaxSyntax node with. If not
        ''' specified the current TextTokens will be used in the new XmlCommentSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="minusMinusGreaterThanToken">
        ''' The new MinusMinusGreaterThanToken to update this XmlCommentSyntaxSyntax node
        ''' with. If not specified the current MinusMinusGreaterThanToken will be used in
        ''' the new XmlCommentSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanMinusMinusToken As SyntaxToken, textTokens As SyntaxTokenList, minusMinusGreaterThanToken As SyntaxToken) As XmlCommentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlCommentSyntax)
            If lessThanMinusMinusToken.Node IsNot green._lessThanMinusMinusToken OrElse textTokens <> Me.TextTokens OrElse minusMinusGreaterThanToken.Node IsNot green._minusMinusGreaterThanToken Then
                Dim newNode = Syntax.XmlComment(lessThanMinusMinusToken, textTokens, minusMinusGreaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
    ''' XMLProcessingValue ?&gt;'.
    ''' </summary>
    Public NotInheritable Class XmlProcessingInstructionSyntax
        Inherits XmlNodeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanQuestionToken As InternalSyntax.PunctuationSyntax, name As InternalSyntax.XmlNameTokenSyntax, textTokens As InternalSyntax.SyntaxNode, questionGreaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlProcessingInstructionSyntax(kind, errors, annotations, lessThanQuestionToken, name, textTokens, questionGreaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanQuestionToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlProcessingInstructionSyntax)._lessThanQuestionToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanQuestionToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanQuestionToken(lessThanQuestionToken as SyntaxToken) As XmlProcessingInstructionSyntax
            return Update(lessThanQuestionToken, Me.Name, Me.TextTokens, Me.QuestionGreaterThanToken)
        End Function

        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlProcessingInstructionSyntax)._name, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As XmlProcessingInstructionSyntax
            return Update(Me.LessThanQuestionToken, name, Me.TextTokens, Me.QuestionGreaterThanToken)
        End Function

        Public  ReadOnly Property TextTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.XmlProcessingInstructionSyntax)._textTokens, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TextTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTextTokens(textTokens as SyntaxTokenList) As XmlProcessingInstructionSyntax
            return Update(Me.LessThanQuestionToken, Me.Name, textTokens, Me.QuestionGreaterThanToken)
        End Function

        Public Shadows Function AddTextTokens(ParamArray items As SyntaxToken()) As XmlProcessingInstructionSyntax
            Return Me.WithTextTokens(Me.TextTokens.Add(items))
        End Function

        Public  ReadOnly Property QuestionGreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlProcessingInstructionSyntax)._questionGreaterThanToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the QuestionGreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithQuestionGreaterThanToken(questionGreaterThanToken as SyntaxToken) As XmlProcessingInstructionSyntax
            return Update(Me.LessThanQuestionToken, Me.Name, Me.TextTokens, questionGreaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlProcessingInstruction(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlProcessingInstruction(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlProcessingInstructionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="lessThanQuestionToken">
        ''' The new LessThanQuestionToken to update this
        ''' XmlProcessingInstructionSyntaxSyntax node with. If not specified the current
        ''' LessThanQuestionToken will be used in the new
        ''' XmlProcessingInstructionSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this XmlProcessingInstructionSyntaxSyntax node with. If
        ''' not specified the current Name will be used in the new
        ''' XmlProcessingInstructionSyntaxSyntax node.
        ''' </param>
        ''' <param name="textTokens">
        ''' The new TextTokens to update this XmlProcessingInstructionSyntaxSyntax node
        ''' with. If not specified the current TextTokens will be used in the new
        ''' XmlProcessingInstructionSyntaxSyntax node.
        ''' </param>
        ''' <param name="questionGreaterThanToken">
        ''' The new QuestionGreaterThanToken to update this
        ''' XmlProcessingInstructionSyntaxSyntax node with. If not specified the current
        ''' QuestionGreaterThanToken will be used in the new
        ''' XmlProcessingInstructionSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanQuestionToken As SyntaxToken, name As SyntaxToken, textTokens As SyntaxTokenList, questionGreaterThanToken As SyntaxToken) As XmlProcessingInstructionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlProcessingInstructionSyntax)
            If lessThanQuestionToken.Node IsNot green._lessThanQuestionToken OrElse name.Node IsNot green._name OrElse textTokens <> Me.TextTokens OrElse questionGreaterThanToken.Node IsNot green._questionGreaterThanToken Then
                Dim newNode = Syntax.XmlProcessingInstruction(lessThanQuestionToken, name, textTokens, questionGreaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an XML CDATA section in an XML literal expression.
    ''' </summary>
    Public NotInheritable Class XmlCDataSectionSyntax
        Inherits XmlNodeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), beginCDataToken As InternalSyntax.PunctuationSyntax, textTokens As InternalSyntax.SyntaxNode, endCDataToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlCDataSectionSyntax(kind, errors, annotations, beginCDataToken, textTokens, endCDataToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property BeginCDataToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlCDataSectionSyntax)._beginCDataToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the BeginCDataToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithBeginCDataToken(beginCDataToken as SyntaxToken) As XmlCDataSectionSyntax
            return Update(beginCDataToken, Me.TextTokens, Me.EndCDataToken)
        End Function

        Public  ReadOnly Property TextTokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.XmlCDataSectionSyntax)._textTokens, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TextTokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTextTokens(textTokens as SyntaxTokenList) As XmlCDataSectionSyntax
            return Update(Me.BeginCDataToken, textTokens, Me.EndCDataToken)
        End Function

        Public Shadows Function AddTextTokens(ParamArray items As SyntaxToken()) As XmlCDataSectionSyntax
            Return Me.WithTextTokens(Me.TextTokens.Add(items))
        End Function

        Public  ReadOnly Property EndCDataToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlCDataSectionSyntax)._endCDataToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndCDataToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndCDataToken(endCDataToken as SyntaxToken) As XmlCDataSectionSyntax
            return Update(Me.BeginCDataToken, Me.TextTokens, endCDataToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlCDataSection(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlCDataSection(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlCDataSectionSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="beginCDataToken">
        ''' The new BeginCDataToken to update this XmlCDataSectionSyntaxSyntax node with.
        ''' If not specified the current BeginCDataToken will be used in the new
        ''' XmlCDataSectionSyntaxSyntax node.
        ''' </param>
        ''' <param name="textTokens">
        ''' The new TextTokens to update this XmlCDataSectionSyntaxSyntax node with. If not
        ''' specified the current TextTokens will be used in the new
        ''' XmlCDataSectionSyntaxSyntax node.
        ''' </param>
        ''' <param name="endCDataToken">
        ''' The new EndCDataToken to update this XmlCDataSectionSyntaxSyntax node with. If
        ''' not specified the current EndCDataToken will be used in the new
        ''' XmlCDataSectionSyntaxSyntax node.
        ''' </param>
        Public Function Update(beginCDataToken As SyntaxToken, textTokens As SyntaxTokenList, endCDataToken As SyntaxToken) As XmlCDataSectionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlCDataSectionSyntax)
            If beginCDataToken.Node IsNot green._beginCDataToken OrElse textTokens <> Me.TextTokens OrElse endCDataToken.Node IsNot green._endCDataToken Then
                Dim newNode = Syntax.XmlCDataSection(beginCDataToken, textTokens, endCDataToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
    ''' obj.Name =%&gt;&lt;/name&gt;'.
    ''' </summary>
    Public NotInheritable Class XmlEmbeddedExpressionSyntax
        Inherits XmlNodeSyntax

        Friend _expression as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), lessThanPercentEqualsToken As InternalSyntax.PunctuationSyntax, expression As ExpressionSyntax, percentGreaterThanToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.XmlEmbeddedExpressionSyntax(kind, errors, annotations, lessThanPercentEqualsToken, DirectCast(expression.Green, InternalSyntax.ExpressionSyntax), percentGreaterThanToken), Nothing, 0)
        End Sub

        Public  ReadOnly Property LessThanPercentEqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlEmbeddedExpressionSyntax)._lessThanPercentEqualsToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LessThanPercentEqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLessThanPercentEqualsToken(lessThanPercentEqualsToken as SyntaxToken) As XmlEmbeddedExpressionSyntax
            return Update(lessThanPercentEqualsToken, Me.Expression, Me.PercentGreaterThanToken)
        End Function

        Public  ReadOnly Property Expression As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_expression, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Expression property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExpression(expression as ExpressionSyntax) As XmlEmbeddedExpressionSyntax
            return Update(Me.LessThanPercentEqualsToken, expression, Me.PercentGreaterThanToken)
        End Function

        Public  ReadOnly Property PercentGreaterThanToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.XmlEmbeddedExpressionSyntax)._percentGreaterThanToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the PercentGreaterThanToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithPercentGreaterThanToken(percentGreaterThanToken as SyntaxToken) As XmlEmbeddedExpressionSyntax
            return Update(Me.LessThanPercentEqualsToken, Me.Expression, percentGreaterThanToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.Expression
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitXmlEmbeddedExpression(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitXmlEmbeddedExpression(Me)
        End Sub


        ''' <summary>
        ''' Creates a new XmlEmbeddedExpressionSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="lessThanPercentEqualsToken">
        ''' The new LessThanPercentEqualsToken to update this
        ''' XmlEmbeddedExpressionSyntaxSyntax node with. If not specified the current
        ''' LessThanPercentEqualsToken will be used in the new
        ''' XmlEmbeddedExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="expression">
        ''' The new Expression to update this XmlEmbeddedExpressionSyntaxSyntax node with.
        ''' If not specified the current Expression will be used in the new
        ''' XmlEmbeddedExpressionSyntaxSyntax node.
        ''' </param>
        ''' <param name="percentGreaterThanToken">
        ''' The new PercentGreaterThanToken to update this
        ''' XmlEmbeddedExpressionSyntaxSyntax node with. If not specified the current
        ''' PercentGreaterThanToken will be used in the new
        ''' XmlEmbeddedExpressionSyntaxSyntax node.
        ''' </param>
        Public Function Update(lessThanPercentEqualsToken As SyntaxToken, expression As ExpressionSyntax, percentGreaterThanToken As SyntaxToken) As XmlEmbeddedExpressionSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.XmlEmbeddedExpressionSyntax)
            If lessThanPercentEqualsToken.Node IsNot green._lessThanPercentEqualsToken OrElse expression IsNot Me._expression OrElse percentGreaterThanToken.Node IsNot green._percentGreaterThanToken Then
                Dim newNode = Syntax.XmlEmbeddedExpression(lessThanPercentEqualsToken, expression, percentGreaterThanToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract node class that represents the textual description of a type, possibly
    ''' include generic type arguments, qualified names, array specifiers, nullable
    ''' specifier and the like.
    ''' </summary>
    Public MustInherit Class TypeSyntax
        Inherits ExpressionSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Represents an array type, such as "A() or "A(,)", without bounds specified for
    ''' the array.
    ''' </summary>
    Public NotInheritable Class ArrayTypeSyntax
        Inherits TypeSyntax

        Friend _elementType as TypeSyntax
        Friend _rankSpecifiers as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), elementType As TypeSyntax, rankSpecifiers As SyntaxNode)
            Me.New(New InternalSyntax.ArrayTypeSyntax(kind, errors, annotations, DirectCast(elementType.Green, InternalSyntax.TypeSyntax), if(rankSpecifiers IsNot Nothing, rankSpecifiers.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The type of the elements of the array.
        ''' </summary>
        Public  ReadOnly Property ElementType As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_elementType, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElementType property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElementType(elementType as TypeSyntax) As ArrayTypeSyntax
            return Update(elementType, Me.RankSpecifiers)
        End Function

        ''' <summary>
        ''' Represents the list of "()" or "(,,)" modifiers on the array type.
        ''' </summary>
        Public  ReadOnly Property RankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_rankSpecifiers, 1)
                Return new SyntaxList(Of ArrayRankSpecifierSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the RankSpecifiers property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRankSpecifiers(rankSpecifiers as SyntaxList(Of ArrayRankSpecifierSyntax)) As ArrayTypeSyntax
            return Update(Me.ElementType, rankSpecifiers)
        End Function

        Public Shadows Function AddRankSpecifiers(ParamArray items As ArrayRankSpecifierSyntax()) As ArrayTypeSyntax
            Return Me.WithRankSpecifiers(Me.RankSpecifiers.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._elementType
                Case 1
                    Return Me._rankSpecifiers
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.ElementType
                Case 1
                    Return GetRed(Of SyntaxNode)(_rankSpecifiers, 1)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitArrayType(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitArrayType(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ArrayTypeSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="elementType">
        ''' The new ElementType to update this ArrayTypeSyntaxSyntax node with. If not
        ''' specified the current ElementType will be used in the new ArrayTypeSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="rankSpecifiers">
        ''' The new RankSpecifiers to update this ArrayTypeSyntaxSyntax node with. If not
        ''' specified the current RankSpecifiers will be used in the new
        ''' ArrayTypeSyntaxSyntax node.
        ''' </param>
        Public Function Update(elementType As TypeSyntax, rankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax)) As ArrayTypeSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ArrayTypeSyntax)
            If elementType IsNot Me._elementType OrElse rankSpecifiers <> Me.RankSpecifiers Then
                Dim newNode = Syntax.ArrayType(elementType, rankSpecifiers)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' A type name that represents a nullable type, such as "Integer?".
    ''' </summary>
    Public NotInheritable Class NullableTypeSyntax
        Inherits TypeSyntax

        Friend _elementType as TypeSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), elementType As TypeSyntax, questionMarkToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.NullableTypeSyntax(kind, errors, annotations, DirectCast(elementType.Green, InternalSyntax.TypeSyntax), questionMarkToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The kind of type that is this type is a nullable of. Cannot be an array type or
        ''' a nullable type.
        ''' </summary>
        Public  ReadOnly Property ElementType As TypeSyntax
            Get
                Return GetRed(Of TypeSyntax)(_elementType, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElementType property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElementType(elementType as TypeSyntax) As NullableTypeSyntax
            return Update(elementType, Me.QuestionMarkToken)
        End Function

        ''' <summary>
        ''' The "?" token.
        ''' </summary>
        Public  ReadOnly Property QuestionMarkToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.NullableTypeSyntax)._questionMarkToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the QuestionMarkToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithQuestionMarkToken(questionMarkToken as SyntaxToken) As NullableTypeSyntax
            return Update(Me.ElementType, questionMarkToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._elementType
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.ElementType
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitNullableType(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitNullableType(Me)
        End Sub


        ''' <summary>
        ''' Creates a new NullableTypeSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="elementType">
        ''' The new ElementType to update this NullableTypeSyntaxSyntax node with. If not
        ''' specified the current ElementType will be used in the new
        ''' NullableTypeSyntaxSyntax node.
        ''' </param>
        ''' <param name="questionMarkToken">
        ''' The new QuestionMarkToken to update this NullableTypeSyntaxSyntax node with. If
        ''' not specified the current QuestionMarkToken will be used in the new
        ''' NullableTypeSyntaxSyntax node.
        ''' </param>
        Public Function Update(elementType As TypeSyntax, questionMarkToken As SyntaxToken) As NullableTypeSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.NullableTypeSyntax)
            If elementType IsNot Me._elementType OrElse questionMarkToken.Node IsNot green._questionMarkToken Then
                Dim newNode = Syntax.NullableType(elementType, questionMarkToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an occurrence of a Visual Basic built-in type such as Integer or
    ''' String in source code.
    ''' </summary>
    Public NotInheritable Class PredefinedTypeSyntax
        Inherits TypeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), keyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.PredefinedTypeSyntax(kind, errors, annotations, keyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The keyword that was used to describe the built-in type.
        ''' </summary>
        Public  ReadOnly Property Keyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.PredefinedTypeSyntax)._keyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Keyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithKeyword(keyword as SyntaxToken) As PredefinedTypeSyntax
            return Update(keyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitPredefinedType(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitPredefinedType(Me)
        End Sub


        ''' <summary>
        ''' Creates a new PredefinedTypeSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="keyword">
        ''' The new Keyword to update this PredefinedTypeSyntaxSyntax node with. If not
        ''' specified the current Keyword will be used in the new
        ''' PredefinedTypeSyntaxSyntax node.
        ''' </param>
        Public Function Update(keyword As SyntaxToken) As PredefinedTypeSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.PredefinedTypeSyntax)
            If keyword.Node IsNot green._keyword Then
                Dim newNode = Syntax.PredefinedType(keyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract node class that represents a name, possibly include generic arguments
    ''' and qualified names.
    ''' </summary>
    Public MustInherit Class NameSyntax
        Inherits TypeSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

    End Class

    ''' <summary>
    ''' Abstract node class that represents a name, possibly include generic arguments.
    ''' </summary>
    Public MustInherit Class SimpleNameSyntax
        Inherits NameSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The identifier in the name.
        ''' </summary>
        Public ReadOnly Property Identifier As SyntaxToken
            Get
                Return Me.GetIdentifierCore()
            End Get
        End Property

        Friend Overridable Function GetIdentifierCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.SimpleNameSyntax)._identifier, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


    End Class

    ''' <summary>
    ''' Represents a type name consisting of a single identifier (which might include
    ''' brackets or a type character).
    ''' </summary>
    Public NotInheritable Class IdentifierNameSyntax
        Inherits SimpleNameSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifier As InternalSyntax.IdentifierTokenSyntax)
            Me.New(New InternalSyntax.IdentifierNameSyntax(kind, errors, annotations, identifier), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The identifier in the name.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IdentifierNameSyntax)._identifier, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As IdentifierNameSyntax
            return Update(identifier)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitIdentifierName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitIdentifierName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new IdentifierNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="identifier">
        ''' The new Identifier to update this IdentifierNameSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' IdentifierNameSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifier As SyntaxToken) As IdentifierNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.IdentifierNameSyntax)
            If identifier.Node IsNot green._identifier Then
                Dim newNode = Syntax.IdentifierName(identifier)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a simple type name with one or more generic arguments, such as "X(Of
    ''' Y, Z).
    ''' </summary>
    Public NotInheritable Class GenericNameSyntax
        Inherits SimpleNameSyntax

        Friend _typeArgumentList as TypeArgumentListSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), identifier As InternalSyntax.IdentifierTokenSyntax, typeArgumentList As TypeArgumentListSyntax)
            Me.New(New InternalSyntax.GenericNameSyntax(kind, errors, annotations, identifier, DirectCast(typeArgumentList.Green, InternalSyntax.TypeArgumentListSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The identifier in the name.
        ''' </summary>
        Public Shadows ReadOnly Property Identifier As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GenericNameSyntax)._identifier, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetIdentifierCore() As SyntaxToken
            Return Me.Identifier
        End Function

        ''' <summary>
        ''' Creates a new node and sets the Identifier property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIdentifier(identifier as SyntaxToken) As GenericNameSyntax
            return Update(identifier, Me.TypeArgumentList)
        End Function

        ''' <summary>
        ''' The generic argument list.
        ''' </summary>
        Public  ReadOnly Property TypeArgumentList As TypeArgumentListSyntax
            Get
                Return GetRed(Of TypeArgumentListSyntax)(_typeArgumentList, 1)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the TypeArgumentList property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTypeArgumentList(typeArgumentList as TypeArgumentListSyntax) As GenericNameSyntax
            return Update(Me.Identifier, typeArgumentList)
        End Function

        Public Shadows Function AddTypeArgumentListArguments(ParamArray items As TypeSyntax()) As GenericNameSyntax
            Dim _child = If (Me.TypeArgumentList IsNot Nothing, Me.TypeArgumentList, Syntax.TypeArgumentList())
            Return Me.WithTypeArgumentList(_child.AddArguments(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me._typeArgumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 1
                    Return Me.TypeArgumentList
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGenericName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGenericName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GenericNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="identifier">
        ''' The new Identifier to update this GenericNameSyntaxSyntax node with. If not
        ''' specified the current Identifier will be used in the new
        ''' GenericNameSyntaxSyntax node.
        ''' </param>
        ''' <param name="typeArgumentList">
        ''' The new TypeArgumentList to update this GenericNameSyntaxSyntax node with. If
        ''' not specified the current TypeArgumentList will be used in the new
        ''' GenericNameSyntaxSyntax node.
        ''' </param>
        Public Function Update(identifier As SyntaxToken, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GenericNameSyntax)
            If identifier.Node IsNot green._identifier OrElse typeArgumentList IsNot Me._typeArgumentList Then
                Dim newNode = Syntax.GenericName(identifier, typeArgumentList)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a qualified type name, for example X.Y or X(Of Z).Y.
    ''' </summary>
    Public NotInheritable Class QualifiedNameSyntax
        Inherits NameSyntax

        Friend _left as NameSyntax
        Friend _right as SimpleNameSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), left As NameSyntax, dotToken As InternalSyntax.PunctuationSyntax, right As SimpleNameSyntax)
            Me.New(New InternalSyntax.QualifiedNameSyntax(kind, errors, annotations, DirectCast(left.Green, InternalSyntax.NameSyntax), dotToken, DirectCast(right.Green, InternalSyntax.SimpleNameSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The part of the name that appears to the left of the dot. This can itself be
        ''' any name.
        ''' </summary>
        Public  ReadOnly Property Left As NameSyntax
            Get
                Return GetRed(Of NameSyntax)(_left, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Left property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLeft(left as NameSyntax) As QualifiedNameSyntax
            return Update(left, Me.DotToken, Me.Right)
        End Function

        ''' <summary>
        ''' The "." token that separates the names.
        ''' </summary>
        Public  ReadOnly Property DotToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.QualifiedNameSyntax)._dotToken, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the DotToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDotToken(dotToken as SyntaxToken) As QualifiedNameSyntax
            return Update(Me.Left, dotToken, Me.Right)
        End Function

        ''' <summary>
        ''' The part of the name that appears to the right of the dot. This must be a
        ''' simple identifier.
        ''' </summary>
        Public  ReadOnly Property Right As SimpleNameSyntax
            Get
                Return GetRed(Of SimpleNameSyntax)(_right, 2)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Right property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRight(right as SimpleNameSyntax) As QualifiedNameSyntax
            return Update(Me.Left, Me.DotToken, right)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._left
                Case 2
                    Return Me._right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Left
                Case 2
                    Return Me.Right
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitQualifiedName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitQualifiedName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new QualifiedNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="left">
        ''' The new Left to update this QualifiedNameSyntaxSyntax node with. If not
        ''' specified the current Left will be used in the new QualifiedNameSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="dotToken">
        ''' The new DotToken to update this QualifiedNameSyntaxSyntax node with. If not
        ''' specified the current DotToken will be used in the new
        ''' QualifiedNameSyntaxSyntax node.
        ''' </param>
        ''' <param name="right">
        ''' The new Right to update this QualifiedNameSyntaxSyntax node with. If not
        ''' specified the current Right will be used in the new QualifiedNameSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(left As NameSyntax, dotToken As SyntaxToken, right As SimpleNameSyntax) As QualifiedNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.QualifiedNameSyntax)
            If left IsNot Me._left OrElse dotToken.Node IsNot green._dotToken OrElse right IsNot Me._right Then
                Dim newNode = Syntax.QualifiedName(left, dotToken, right)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a name in the global namespace.
    ''' </summary>
    Public NotInheritable Class GlobalNameSyntax
        Inherits NameSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), globalKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.GlobalNameSyntax(kind, errors, annotations, globalKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "Global" keyword.
        ''' </summary>
        Public  ReadOnly Property GlobalKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.GlobalNameSyntax)._globalKeyword, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the GlobalKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGlobalKeyword(globalKeyword as SyntaxToken) As GlobalNameSyntax
            return Update(globalKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitGlobalName(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitGlobalName(Me)
        End Sub


        ''' <summary>
        ''' Creates a new GlobalNameSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="globalKeyword">
        ''' The new GlobalKeyword to update this GlobalNameSyntaxSyntax node with. If not
        ''' specified the current GlobalKeyword will be used in the new
        ''' GlobalNameSyntaxSyntax node.
        ''' </param>
        Public Function Update(globalKeyword As SyntaxToken) As GlobalNameSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.GlobalNameSyntax)
            If globalKeyword.Node IsNot green._globalKeyword Then
                Dim newNode = Syntax.GlobalName(globalKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a parenthesized list of generic type arguments.
    ''' </summary>
    Public NotInheritable Class TypeArgumentListSyntax
        Inherits SyntaxNode

        Friend _arguments as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), openParenToken As InternalSyntax.PunctuationSyntax, ofKeyword As InternalSyntax.KeywordSyntax, arguments As SyntaxNode, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.TypeArgumentListSyntax(kind, errors, annotations, openParenToken, ofKeyword, if(arguments IsNot Nothing, arguments.Green, Nothing), closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "(" token.
        ''' </summary>
        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeArgumentListSyntax)._openParenToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As TypeArgumentListSyntax
            return Update(openParenToken, Me.OfKeyword, Me.Arguments, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' The "Of" keyword.
        ''' </summary>
        Public  ReadOnly Property OfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeArgumentListSyntax)._ofKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOfKeyword(ofKeyword as SyntaxToken) As TypeArgumentListSyntax
            return Update(Me.OpenParenToken, ofKeyword, Me.Arguments, Me.CloseParenToken)
        End Function

        ''' <summary>
        ''' A list of all the type arguments.
        ''' </summary>
        Public  ReadOnly Property Arguments As SeparatedSyntaxList(Of TypeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_arguments, 2)
                Return new SeparatedSyntaxList(Of TypeSyntax)(listNode, GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Arguments property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithArguments(arguments as SeparatedSyntaxList(Of TypeSyntax)) As TypeArgumentListSyntax
            return Update(Me.OpenParenToken, Me.OfKeyword, arguments, Me.CloseParenToken)
        End Function

        Public Shadows Function AddArguments(ParamArray items As TypeSyntax()) As TypeArgumentListSyntax
            Return Me.WithArguments(Me.Arguments.Add(SyntaxKind.CommaToken, False, items))
        End Function

        ''' <summary>
        ''' The ")" token.
        ''' </summary>
        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.TypeArgumentListSyntax)._closeParenToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As TypeArgumentListSyntax
            return Update(Me.OpenParenToken, Me.OfKeyword, Me.Arguments, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return Me._arguments
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 2
                    Return GetRed(Of SyntaxNode)(_arguments, 2)
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 4
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitTypeArgumentList(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitTypeArgumentList(Me)
        End Sub


        ''' <summary>
        ''' Creates a new TypeArgumentListSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this TypeArgumentListSyntaxSyntax node with.
        ''' If not specified the current OpenParenToken will be used in the new
        ''' TypeArgumentListSyntaxSyntax node.
        ''' </param>
        ''' <param name="ofKeyword">
        ''' The new OfKeyword to update this TypeArgumentListSyntaxSyntax node with. If not
        ''' specified the current OfKeyword will be used in the new
        ''' TypeArgumentListSyntaxSyntax node.
        ''' </param>
        ''' <param name="arguments">
        ''' The new Arguments to update this TypeArgumentListSyntaxSyntax node with. If not
        ''' specified the current Arguments will be used in the new
        ''' TypeArgumentListSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this TypeArgumentListSyntaxSyntax node with.
        ''' If not specified the current CloseParenToken will be used in the new
        ''' TypeArgumentListSyntaxSyntax node.
        ''' </param>
        Public Function Update(openParenToken As SyntaxToken, ofKeyword As SyntaxToken, arguments As SeparatedSyntaxList(Of TypeSyntax), closeParenToken As SyntaxToken) As TypeArgumentListSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.TypeArgumentListSyntax)
            If openParenToken.Node IsNot green._openParenToken OrElse ofKeyword.Node IsNot green._ofKeyword OrElse arguments <> Me.Arguments OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.TypeArgumentList(openParenToken, ofKeyword, arguments, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Abstract class that represent structured trivia.
    ''' </summary>
    Public MustInherit Class StructuredTriviaSyntax
        Inherits SyntaxNode


    End Class

    ''' <summary>
    ''' Represents tokens that were skipped by the parser as part of error recovery,
    ''' and thus are not part of any syntactic structure.
    ''' </summary>
    Public NotInheritable Class SkippedTokensSyntax
        Inherits StructuredTriviaSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), tokens As InternalSyntax.SyntaxNode)
            Me.New(New InternalSyntax.SkippedTokensSyntax(kind, errors, annotations, tokens), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The list of tokens that were skipped by the parser.
        ''' </summary>
        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Tokens As SyntaxTokenList
            Get
                return new SyntaxTokenList(Me, DirectCast(Me.Green, InternalSyntax.SkippedTokensSyntax)._tokens, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Tokens property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTokens(tokens as SyntaxTokenList) As SkippedTokensSyntax
            return Update(tokens)
        End Function

        Public Shadows Function AddTokens(ParamArray items As SyntaxToken()) As SkippedTokensSyntax
            Return Me.WithTokens(Me.Tokens.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitSkippedTokens(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitSkippedTokens(Me)
        End Sub


        ''' <summary>
        ''' Creates a new SkippedTokensSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="tokens">
        ''' The new Tokens to update this SkippedTokensSyntaxSyntax node with. If not
        ''' specified the current Tokens will be used in the new SkippedTokensSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(tokens As SyntaxTokenList) As SkippedTokensSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.SkippedTokensSyntax)
            If tokens <> Me.Tokens Then
                Dim newNode = Syntax.SkippedTokens(tokens)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a documentation comment e.g. ''' &lt;Summary&gt; apearing in source.
    ''' </summary>
    Public NotInheritable Class DocumentationCommentSyntax
        Inherits StructuredTriviaSyntax

        Friend _content as SyntaxNode

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), content As SyntaxNode)
            Me.New(New InternalSyntax.DocumentationCommentSyntax(kind, errors, annotations, if(content IsNot Nothing, content.Green, Nothing)), Nothing, 0)
        End Sub

        ''' <remarks>
        ''' If nothing is present, an empty list is returned.
        ''' </remarks>
        Public  ReadOnly Property Content As SyntaxList(Of XmlNodeSyntax)
            Get
                Dim listNode = GetRed(Of SyntaxNode)(_content, 0)
                Return new SyntaxList(Of XmlNodeSyntax)(listNode)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Content property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithContent(content as SyntaxList(Of XmlNodeSyntax)) As DocumentationCommentSyntax
            return Update(content)
        End Function

        Public Shadows Function AddContent(ParamArray items As XmlNodeSyntax()) As DocumentationCommentSyntax
            Return Me.WithContent(Me.Content.Add(items))
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Me._content
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            If i = 0 Then
               Return GetRed(Of SyntaxNode)(_content, 0)
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDocumentationComment(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDocumentationComment(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DocumentationCommentSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="content">
        ''' The new Content to update this DocumentationCommentSyntaxSyntax node with. If
        ''' not specified the current Content will be used in the new
        ''' DocumentationCommentSyntaxSyntax node.
        ''' </param>
        Public Function Update(content As SyntaxList(of XmlNodeSyntax)) As DocumentationCommentSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DocumentationCommentSyntax)
            If content <> Me.Content Then
                Dim newNode = Syntax.DocumentationComment(content)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a preprocessor directive
    ''' </summary>
    Public NotInheritable Class DirectiveSyntax
        Inherits StructuredTriviaSyntax

        Friend _directive as DirectiveStatementSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), directive As DirectiveStatementSyntax, terminator As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.DirectiveSyntax(kind, errors, annotations, DirectCast(directive.Green, InternalSyntax.DirectiveStatementSyntax), terminator), Nothing, 0)
        End Sub

        Public  ReadOnly Property Directive As DirectiveStatementSyntax
            Get
                Return GetRed(Of DirectiveStatementSyntax)(_directive, 0)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Directive property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithDirective(directive as DirectiveStatementSyntax) As DirectiveSyntax
            return Update(directive, Me.Terminator)
        End Function

        ''' <summary>
        ''' The statement terminator token that ended the Directive.
        ''' </summary>
        Public  ReadOnly Property Terminator As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectiveSyntax)._terminator, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Terminator property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithTerminator(terminator as SyntaxToken) As DirectiveSyntax
            return Update(Me.Directive, terminator)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me._directive
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 0
                    Return Me.Directive
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new DirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="directive">
        ''' The new Directive to update this DirectiveSyntaxSyntax node with. If not
        ''' specified the current Directive will be used in the new DirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="terminator">
        ''' The new Terminator to update this DirectiveSyntaxSyntax node with. If not
        ''' specified the current Terminator will be used in the new DirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(directive As DirectiveStatementSyntax, terminator As SyntaxToken) As DirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.DirectiveSyntax)
            If directive IsNot Me._directive OrElse terminator.Node IsNot green._terminator Then
                Dim newNode = Syntax.Directive(directive, terminator)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents a pre-processing directive (such as #If, #Const or #Region)
    ''' appearing in source.
    ''' </summary>
    Public MustInherit Class DirectiveStatementSyntax
        Inherits StatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public ReadOnly Property HashToken As SyntaxToken
            Get
                Return Me.GetHashTokenCore()
            End Get
        End Property

        Friend Overridable Function GetHashTokenCore() As SyntaxToken
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.DirectiveStatementSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
        End Function


    End Class

    ''' <summary>
    ''' Represents a #Const pre-processing constant declaration appearing in source.
    ''' </summary>
    Public NotInheritable Class ConstDirectiveSyntax
        Inherits DirectiveStatementSyntax

        Friend _value as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, constKeyword As InternalSyntax.KeywordSyntax, name As InternalSyntax.IdentifierTokenSyntax, equalsToken As InternalSyntax.PunctuationSyntax, value As ExpressionSyntax)
            Me.New(New InternalSyntax.ConstDirectiveSyntax(kind, errors, annotations, hashToken, constKeyword, name, equalsToken, DirectCast(value.Green, InternalSyntax.ExpressionSyntax)), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As ConstDirectiveSyntax
            return Update(hashToken, Me.ConstKeyword, Me.Name, Me.EqualsToken, Me.Value)
        End Function

        ''' <summary>
        ''' The "Const" keyword.
        ''' </summary>
        Public  ReadOnly Property ConstKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstDirectiveSyntax)._constKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ConstKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithConstKeyword(constKeyword as SyntaxToken) As ConstDirectiveSyntax
            return Update(Me.HashToken, constKeyword, Me.Name, Me.EqualsToken, Me.Value)
        End Function

        ''' <summary>
        ''' The name of the pre-processing constant being defined.
        ''' </summary>
        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstDirectiveSyntax)._name, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As ConstDirectiveSyntax
            return Update(Me.HashToken, Me.ConstKeyword, name, Me.EqualsToken, Me.Value)
        End Function

        ''' <summary>
        ''' The "=" token.
        ''' </summary>
        Public  ReadOnly Property EqualsToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ConstDirectiveSyntax)._equalsToken, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EqualsToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEqualsToken(equalsToken as SyntaxToken) As ConstDirectiveSyntax
            return Update(Me.HashToken, Me.ConstKeyword, Me.Name, equalsToken, Me.Value)
        End Function

        ''' <summary>
        ''' An expression representing the value of the pre-processing constant being
        ''' defined.
        ''' </summary>
        Public  ReadOnly Property Value As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_value, 4)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Value property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithValue(value as ExpressionSyntax) As ConstDirectiveSyntax
            return Update(Me.HashToken, Me.ConstKeyword, Me.Name, Me.EqualsToken, value)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 4
                    Return Me._value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 4
                    Return Me.Value
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitConstDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitConstDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ConstDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this ConstDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new
        ''' ConstDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="constKeyword">
        ''' The new ConstKeyword to update this ConstDirectiveSyntaxSyntax node with. If
        ''' not specified the current ConstKeyword will be used in the new
        ''' ConstDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this ConstDirectiveSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new ConstDirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The new EqualsToken to update this ConstDirectiveSyntaxSyntax node with. If not
        ''' specified the current EqualsToken will be used in the new
        ''' ConstDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="value">
        ''' The new Value to update this ConstDirectiveSyntaxSyntax node with. If not
        ''' specified the current Value will be used in the new ConstDirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, constKeyword As SyntaxToken, name As SyntaxToken, equalsToken As SyntaxToken, value As ExpressionSyntax) As ConstDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ConstDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse constKeyword.Node IsNot green._constKeyword OrElse name.Node IsNot green._name OrElse equalsToken.Node IsNot green._equalsToken OrElse value IsNot Me._value Then
                Dim newNode = Syntax.ConstDirective(hashToken, constKeyword, name, equalsToken, value)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning of an #If pre-processing directive appearing in
    ''' source.
    ''' </summary>
    Public NotInheritable Class IfDirectiveSyntax
        Inherits DirectiveStatementSyntax

        Friend _condition as ExpressionSyntax

        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, elseKeyword As InternalSyntax.KeywordSyntax, ifOrElseIfKeyword As InternalSyntax.KeywordSyntax, condition As ExpressionSyntax, thenKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.IfDirectiveSyntax(kind, errors, annotations, hashToken, elseKeyword, ifOrElseIfKeyword, DirectCast(condition.Green, InternalSyntax.ExpressionSyntax), thenKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As IfDirectiveSyntax
            return Update(hashToken, Me.ElseKeyword, Me.IfOrElseIfKeyword, Me.Condition, Me.ThenKeyword)
        End Function

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ElseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfDirectiveSyntax)._elseKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseKeyword(elseKeyword as SyntaxToken) As IfDirectiveSyntax
            return Update(Me.HashToken, elseKeyword, Me.IfOrElseIfKeyword, Me.Condition, Me.ThenKeyword)
        End Function

        Public  ReadOnly Property IfOrElseIfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfDirectiveSyntax)._ifOrElseIfKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfOrElseIfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfOrElseIfKeyword(ifOrElseIfKeyword as SyntaxToken) As IfDirectiveSyntax
            return Update(Me.HashToken, Me.ElseKeyword, ifOrElseIfKeyword, Me.Condition, Me.ThenKeyword)
        End Function

        Public  ReadOnly Property Condition As ExpressionSyntax
            Get
                Return GetRed(Of ExpressionSyntax)(_condition, 3)
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Condition property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCondition(condition as ExpressionSyntax) As IfDirectiveSyntax
            return Update(Me.HashToken, Me.ElseKeyword, Me.IfOrElseIfKeyword, condition, Me.ThenKeyword)
        End Function

        ''' <remarks>
        ''' This child is optional. If it is not present, then Nothing is returned.
        ''' </remarks>
        Public  ReadOnly Property ThenKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.IfDirectiveSyntax)._thenKeyword, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ThenKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithThenKeyword(thenKeyword as SyntaxToken) As IfDirectiveSyntax
            return Update(Me.HashToken, Me.ElseKeyword, Me.IfOrElseIfKeyword, Me.Condition, thenKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case 3
                    Return Me._condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case 3
                    Return Me.Condition
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 5
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitIfDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitIfDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new IfDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this IfDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new IfDirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="elseKeyword">
        ''' The new ElseKeyword to update this IfDirectiveSyntaxSyntax node with. If not
        ''' specified the current ElseKeyword will be used in the new
        ''' IfDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="ifOrElseIfKeyword">
        ''' The new IfOrElseIfKeyword to update this IfDirectiveSyntaxSyntax node with. If
        ''' not specified the current IfOrElseIfKeyword will be used in the new
        ''' IfDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="condition">
        ''' The new Condition to update this IfDirectiveSyntaxSyntax node with. If not
        ''' specified the current Condition will be used in the new IfDirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        ''' <param name="thenKeyword">
        ''' The new ThenKeyword to update this IfDirectiveSyntaxSyntax node with. If not
        ''' specified the current ThenKeyword will be used in the new
        ''' IfDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.IfDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse elseKeyword.Node IsNot green._elseKeyword OrElse ifOrElseIfKeyword.Node IsNot green._ifOrElseIfKeyword OrElse condition IsNot Me._condition OrElse thenKeyword.Node IsNot green._thenKeyword Then
                Dim newNode = Syntax.IfDirective(hashToken, elseKeyword, ifOrElseIfKeyword, condition, thenKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #Else pre-processing directive appearing in source.
    ''' </summary>
    Public NotInheritable Class ElseDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, elseKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.ElseDirectiveSyntax(kind, errors, annotations, hashToken, elseKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ElseDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As ElseDirectiveSyntax
            return Update(hashToken, Me.ElseKeyword)
        End Function

        Public  ReadOnly Property ElseKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ElseDirectiveSyntax)._elseKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ElseKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithElseKeyword(elseKeyword as SyntaxToken) As ElseDirectiveSyntax
            return Update(Me.HashToken, elseKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 2
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitElseDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitElseDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ElseDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this ElseDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new
        ''' ElseDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="elseKeyword">
        ''' The new ElseKeyword to update this ElseDirectiveSyntaxSyntax node with. If not
        ''' specified the current ElseKeyword will be used in the new
        ''' ElseDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, elseKeyword As SyntaxToken) As ElseDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ElseDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse elseKeyword.Node IsNot green._elseKeyword Then
                Dim newNode = Syntax.ElseDirective(hashToken, elseKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #End If pre-processing directive appearing in source.
    ''' </summary>
    Public NotInheritable Class EndIfDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, endKeyword As InternalSyntax.KeywordSyntax, ifKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.EndIfDirectiveSyntax(kind, errors, annotations, hashToken, endKeyword, ifKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndIfDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As EndIfDirectiveSyntax
            return Update(hashToken, Me.EndKeyword, Me.IfKeyword)
        End Function

        Public  ReadOnly Property EndKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndIfDirectiveSyntax)._endKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndKeyword(endKeyword as SyntaxToken) As EndIfDirectiveSyntax
            return Update(Me.HashToken, endKeyword, Me.IfKeyword)
        End Function

        Public  ReadOnly Property IfKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndIfDirectiveSyntax)._ifKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the IfKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithIfKeyword(ifKeyword as SyntaxToken) As EndIfDirectiveSyntax
            return Update(Me.HashToken, Me.EndKeyword, ifKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEndIfDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEndIfDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EndIfDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this EndIfDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new
        ''' EndIfDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="endKeyword">
        ''' The new EndKeyword to update this EndIfDirectiveSyntaxSyntax node with. If not
        ''' specified the current EndKeyword will be used in the new
        ''' EndIfDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="ifKeyword">
        ''' The new IfKeyword to update this EndIfDirectiveSyntaxSyntax node with. If not
        ''' specified the current IfKeyword will be used in the new
        ''' EndIfDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, endKeyword As SyntaxToken, ifKeyword As SyntaxToken) As EndIfDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EndIfDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse endKeyword.Node IsNot green._endKeyword OrElse ifKeyword.Node IsNot green._ifKeyword Then
                Dim newNode = Syntax.EndIfDirective(hashToken, endKeyword, ifKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning of a #Region directive appearing in source.
    ''' </summary>
    Public NotInheritable Class RegionDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, regionKeyword As InternalSyntax.KeywordSyntax, name As InternalSyntax.StringLiteralTokenSyntax)
            Me.New(New InternalSyntax.RegionDirectiveSyntax(kind, errors, annotations, hashToken, regionKeyword, name), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.RegionDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As RegionDirectiveSyntax
            return Update(hashToken, Me.RegionKeyword, Me.Name)
        End Function

        ''' <summary>
        ''' The "Region" keyword.
        ''' </summary>
        Public  ReadOnly Property RegionKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.RegionDirectiveSyntax)._regionKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the RegionKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRegionKeyword(regionKeyword as SyntaxToken) As RegionDirectiveSyntax
            return Update(Me.HashToken, regionKeyword, Me.Name)
        End Function

        ''' <summary>
        ''' The label of the code region being defined.
        ''' </summary>
        Public  ReadOnly Property Name As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.RegionDirectiveSyntax)._name, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Name property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithName(name as SyntaxToken) As RegionDirectiveSyntax
            return Update(Me.HashToken, Me.RegionKeyword, name)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitRegionDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitRegionDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new RegionDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this RegionDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new
        ''' RegionDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="regionKeyword">
        ''' The new RegionKeyword to update this RegionDirectiveSyntaxSyntax node with. If
        ''' not specified the current RegionKeyword will be used in the new
        ''' RegionDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="name">
        ''' The new Name to update this RegionDirectiveSyntaxSyntax node with. If not
        ''' specified the current Name will be used in the new RegionDirectiveSyntaxSyntax
        ''' node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, regionKeyword As SyntaxToken, name As SyntaxToken) As RegionDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.RegionDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse regionKeyword.Node IsNot green._regionKeyword OrElse name.Node IsNot green._name Then
                Dim newNode = Syntax.RegionDirective(hashToken, regionKeyword, name)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #End Region directive appearing in source.
    ''' </summary>
    Public NotInheritable Class EndRegionDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, endKeyword As InternalSyntax.KeywordSyntax, regionKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.EndRegionDirectiveSyntax(kind, errors, annotations, hashToken, endKeyword, regionKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndRegionDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As EndRegionDirectiveSyntax
            return Update(hashToken, Me.EndKeyword, Me.RegionKeyword)
        End Function

        ''' <summary>
        ''' The "End" keyword.
        ''' </summary>
        Public  ReadOnly Property EndKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndRegionDirectiveSyntax)._endKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndKeyword(endKeyword as SyntaxToken) As EndRegionDirectiveSyntax
            return Update(Me.HashToken, endKeyword, Me.RegionKeyword)
        End Function

        ''' <summary>
        ''' The "Region" keyword.
        ''' </summary>
        Public  ReadOnly Property RegionKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndRegionDirectiveSyntax)._regionKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the RegionKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithRegionKeyword(regionKeyword as SyntaxToken) As EndRegionDirectiveSyntax
            return Update(Me.HashToken, Me.EndKeyword, regionKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEndRegionDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEndRegionDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EndRegionDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this EndRegionDirectiveSyntaxSyntax node with. If
        ''' not specified the current HashToken will be used in the new
        ''' EndRegionDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="endKeyword">
        ''' The new EndKeyword to update this EndRegionDirectiveSyntaxSyntax node with. If
        ''' not specified the current EndKeyword will be used in the new
        ''' EndRegionDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="regionKeyword">
        ''' The new RegionKeyword to update this EndRegionDirectiveSyntaxSyntax node with.
        ''' If not specified the current RegionKeyword will be used in the new
        ''' EndRegionDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, endKeyword As SyntaxToken, regionKeyword As SyntaxToken) As EndRegionDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.EndRegionDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse endKeyword.Node IsNot green._endKeyword OrElse regionKeyword.Node IsNot green._regionKeyword Then
                Dim newNode = Syntax.EndRegionDirective(hashToken, endKeyword, regionKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents the beginning of a #ExternalSource pre-processing directive
    ''' appearing in source.
    ''' </summary>
    Public NotInheritable Class ExternalSourceDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, externalSourceKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, externalSource As InternalSyntax.StringLiteralTokenSyntax, commaToken As InternalSyntax.PunctuationSyntax, lineStart As InternalSyntax.IntegerLiteralTokenSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ExternalSourceDirectiveSyntax(kind, errors, annotations, hashToken, externalSourceKeyword, openParenToken, externalSource, commaToken, lineStart, closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(hashToken, Me.ExternalSourceKeyword, Me.OpenParenToken, Me.ExternalSource, Me.CommaToken, Me.LineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property ExternalSourceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._externalSourceKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExternalSourceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExternalSourceKeyword(externalSourceKeyword as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, externalSourceKeyword, Me.OpenParenToken, Me.ExternalSource, Me.CommaToken, Me.LineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._openParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalSourceKeyword, openParenToken, Me.ExternalSource, Me.CommaToken, Me.LineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property ExternalSource As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._externalSource, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExternalSource property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExternalSource(externalSource as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalSourceKeyword, Me.OpenParenToken, externalSource, Me.CommaToken, Me.LineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property CommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._commaToken, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCommaToken(commaToken as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalSourceKeyword, Me.OpenParenToken, Me.ExternalSource, commaToken, Me.LineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property LineStart As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._lineStart, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the LineStart property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithLineStart(lineStart as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalSourceKeyword, Me.OpenParenToken, Me.ExternalSource, Me.CommaToken, lineStart, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)._closeParenToken, Me.GetChildPosition(6), Me.GetChildIndex(6))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ExternalSourceDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalSourceKeyword, Me.OpenParenToken, Me.ExternalSource, Me.CommaToken, Me.LineStart, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 7
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitExternalSourceDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitExternalSourceDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ExternalSourceDirectiveSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this ExternalSourceDirectiveSyntaxSyntax node with.
        ''' If not specified the current HashToken will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="externalSourceKeyword">
        ''' The new ExternalSourceKeyword to update this
        ''' ExternalSourceDirectiveSyntaxSyntax node with. If not specified the current
        ''' ExternalSourceKeyword will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ExternalSourceDirectiveSyntaxSyntax node
        ''' with. If not specified the current OpenParenToken will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="externalSource">
        ''' The new ExternalSource to update this ExternalSourceDirectiveSyntaxSyntax node
        ''' with. If not specified the current ExternalSource will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="commaToken">
        ''' The new CommaToken to update this ExternalSourceDirectiveSyntaxSyntax node
        ''' with. If not specified the current CommaToken will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="lineStart">
        ''' The new LineStart to update this ExternalSourceDirectiveSyntaxSyntax node with.
        ''' If not specified the current LineStart will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ExternalSourceDirectiveSyntaxSyntax node
        ''' with. If not specified the current CloseParenToken will be used in the new
        ''' ExternalSourceDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, externalSourceKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, commaToken As SyntaxToken, lineStart As SyntaxToken, closeParenToken As SyntaxToken) As ExternalSourceDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ExternalSourceDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse externalSourceKeyword.Node IsNot green._externalSourceKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse externalSource.Node IsNot green._externalSource OrElse commaToken.Node IsNot green._commaToken OrElse lineStart.Node IsNot green._lineStart OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ExternalSourceDirective(hashToken, externalSourceKeyword, openParenToken, externalSource, commaToken, lineStart, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #End ExternalSource pre-processing directive appearing in source.
    ''' </summary>
    Public NotInheritable Class EndExternalSourceDirective
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, endKeyword As InternalSyntax.KeywordSyntax, externalSourceKeyword As InternalSyntax.KeywordSyntax)
            Me.New(New InternalSyntax.EndExternalSourceDirective(kind, errors, annotations, hashToken, endKeyword, externalSourceKeyword), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndExternalSourceDirective)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As EndExternalSourceDirective
            return Update(hashToken, Me.EndKeyword, Me.ExternalSourceKeyword)
        End Function

        Public  ReadOnly Property EndKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndExternalSourceDirective)._endKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the EndKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithEndKeyword(endKeyword as SyntaxToken) As EndExternalSourceDirective
            return Update(Me.HashToken, endKeyword, Me.ExternalSourceKeyword)
        End Function

        Public  ReadOnly Property ExternalSourceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.EndExternalSourceDirective)._externalSourceKeyword, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExternalSourceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExternalSourceKeyword(externalSourceKeyword as SyntaxToken) As EndExternalSourceDirective
            return Update(Me.HashToken, Me.EndKeyword, externalSourceKeyword)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitEndExternalSourceDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitEndExternalSourceDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new EndExternalSourceDirectiveSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this EndExternalSourceDirectiveSyntax node with. If
        ''' not specified the current HashToken will be used in the new
        ''' EndExternalSourceDirectiveSyntax node.
        ''' </param>
        ''' <param name="endKeyword">
        ''' The new EndKeyword to update this EndExternalSourceDirectiveSyntax node with.
        ''' If not specified the current EndKeyword will be used in the new
        ''' EndExternalSourceDirectiveSyntax node.
        ''' </param>
        ''' <param name="externalSourceKeyword">
        ''' The new ExternalSourceKeyword to update this EndExternalSourceDirectiveSyntax
        ''' node with. If not specified the current ExternalSourceKeyword will be used in
        ''' the new EndExternalSourceDirectiveSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, endKeyword As SyntaxToken, externalSourceKeyword As SyntaxToken) As EndExternalSourceDirective
            Dim green = DirectCast(Me.Green, InternalSyntax.EndExternalSourceDirective)
            If hashToken.Node IsNot green._hashToken OrElse endKeyword.Node IsNot green._endKeyword OrElse externalSourceKeyword.Node IsNot green._externalSourceKeyword Then
                Dim newNode = Syntax.EndExternalSourceDirective(hashToken, endKeyword, externalSourceKeyword)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #ExternalChecksum pre-processing directive appearing in source.
    ''' </summary>
    Public NotInheritable Class ExternalChecksumDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, externalChecksumKeyword As InternalSyntax.KeywordSyntax, openParenToken As InternalSyntax.PunctuationSyntax, externalSource As InternalSyntax.StringLiteralTokenSyntax, firstCommaToken As InternalSyntax.PunctuationSyntax, guid As InternalSyntax.StringLiteralTokenSyntax, secondCommaToken As InternalSyntax.PunctuationSyntax, checksum As InternalSyntax.StringLiteralTokenSyntax, closeParenToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.ExternalChecksumDirectiveSyntax(kind, errors, annotations, hashToken, externalChecksumKeyword, openParenToken, externalSource, firstCommaToken, guid, secondCommaToken, checksum, closeParenToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(hashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property ExternalChecksumKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._externalChecksumKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExternalChecksumKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExternalChecksumKeyword(externalChecksumKeyword as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, externalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property OpenParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._openParenToken, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the OpenParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithOpenParenToken(openParenToken as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, openParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property ExternalSource As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._externalSource, Me.GetChildPosition(3), Me.GetChildIndex(3))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ExternalSource property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithExternalSource(externalSource as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, externalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property FirstCommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._firstCommaToken, Me.GetChildPosition(4), Me.GetChildIndex(4))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the FirstCommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFirstCommaToken(firstCommaToken as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, firstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property Guid As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._guid, Me.GetChildPosition(5), Me.GetChildIndex(5))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Guid property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithGuid(guid as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, guid, Me.SecondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property SecondCommaToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._secondCommaToken, Me.GetChildPosition(6), Me.GetChildIndex(6))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the SecondCommaToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithSecondCommaToken(secondCommaToken as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, secondCommaToken, Me.Checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property Checksum As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._checksum, Me.GetChildPosition(7), Me.GetChildIndex(7))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the Checksum property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithChecksum(checksum as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, checksum, Me.CloseParenToken)
        End Function

        Public  ReadOnly Property CloseParenToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)._closeParenToken, Me.GetChildPosition(8), Me.GetChildIndex(8))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the CloseParenToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithCloseParenToken(closeParenToken as SyntaxToken) As ExternalChecksumDirectiveSyntax
            return Update(Me.HashToken, Me.ExternalChecksumKeyword, Me.OpenParenToken, Me.ExternalSource, Me.FirstCommaToken, Me.Guid, Me.SecondCommaToken, Me.Checksum, closeParenToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 9
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitExternalChecksumDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitExternalChecksumDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ExternalChecksumDirectiveSyntaxSyntax node with the specified
        ''' changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this ExternalChecksumDirectiveSyntaxSyntax node
        ''' with. If not specified the current HashToken will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="externalChecksumKeyword">
        ''' The new ExternalChecksumKeyword to update this
        ''' ExternalChecksumDirectiveSyntaxSyntax node with. If not specified the current
        ''' ExternalChecksumKeyword will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The new OpenParenToken to update this ExternalChecksumDirectiveSyntaxSyntax
        ''' node with. If not specified the current OpenParenToken will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="externalSource">
        ''' The new ExternalSource to update this ExternalChecksumDirectiveSyntaxSyntax
        ''' node with. If not specified the current ExternalSource will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="firstCommaToken">
        ''' The new FirstCommaToken to update this ExternalChecksumDirectiveSyntaxSyntax
        ''' node with. If not specified the current FirstCommaToken will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="guid">
        ''' The new Guid to update this ExternalChecksumDirectiveSyntaxSyntax node with. If
        ''' not specified the current Guid will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="secondCommaToken">
        ''' The new SecondCommaToken to update this ExternalChecksumDirectiveSyntaxSyntax
        ''' node with. If not specified the current SecondCommaToken will be used in the
        ''' new ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="checksum">
        ''' The new Checksum to update this ExternalChecksumDirectiveSyntaxSyntax node
        ''' with. If not specified the current Checksum will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The new CloseParenToken to update this ExternalChecksumDirectiveSyntaxSyntax
        ''' node with. If not specified the current CloseParenToken will be used in the new
        ''' ExternalChecksumDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, externalChecksumKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, firstCommaToken As SyntaxToken, guid As SyntaxToken, secondCommaToken As SyntaxToken, checksum As SyntaxToken, closeParenToken As SyntaxToken) As ExternalChecksumDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ExternalChecksumDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse externalChecksumKeyword.Node IsNot green._externalChecksumKeyword OrElse openParenToken.Node IsNot green._openParenToken OrElse externalSource.Node IsNot green._externalSource OrElse firstCommaToken.Node IsNot green._firstCommaToken OrElse guid.Node IsNot green._guid OrElse secondCommaToken.Node IsNot green._secondCommaToken OrElse checksum.Node IsNot green._checksum OrElse closeParenToken.Node IsNot green._closeParenToken Then
                Dim newNode = Syntax.ExternalChecksumDirective(hashToken, externalChecksumKeyword, openParenToken, externalSource, firstCommaToken, guid, secondCommaToken, checksum, closeParenToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an #r directive appearing in scripts.
    ''' </summary>
    Public NotInheritable Class ReferenceDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax, referenceKeyword As InternalSyntax.KeywordSyntax, file As InternalSyntax.StringLiteralTokenSyntax)
            Me.New(New InternalSyntax.ReferenceDirectiveSyntax(kind, errors, annotations, hashToken, referenceKeyword, file), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReferenceDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As ReferenceDirectiveSyntax
            return Update(hashToken, Me.ReferenceKeyword, Me.File)
        End Function

        Public  ReadOnly Property ReferenceKeyword As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReferenceDirectiveSyntax)._referenceKeyword, Me.GetChildPosition(1), Me.GetChildIndex(1))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the ReferenceKeyword property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithReferenceKeyword(referenceKeyword as SyntaxToken) As ReferenceDirectiveSyntax
            return Update(Me.HashToken, referenceKeyword, Me.File)
        End Function

        Public  ReadOnly Property File As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.ReferenceDirectiveSyntax)._file, Me.GetChildPosition(2), Me.GetChildIndex(2))
            End Get
        End Property

        ''' <summary>
        ''' Creates a new node and sets the File property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithFile(file as SyntaxToken) As ReferenceDirectiveSyntax
            return Update(Me.HashToken, Me.ReferenceKeyword, file)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
            Select case i
                Case Else
                     Return Nothing
            End Select
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 3
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitReferenceDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitReferenceDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new ReferenceDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this ReferenceDirectiveSyntaxSyntax node with. If
        ''' not specified the current HashToken will be used in the new
        ''' ReferenceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="referenceKeyword">
        ''' The new ReferenceKeyword to update this ReferenceDirectiveSyntaxSyntax node
        ''' with. If not specified the current ReferenceKeyword will be used in the new
        ''' ReferenceDirectiveSyntaxSyntax node.
        ''' </param>
        ''' <param name="file">
        ''' The new File to update this ReferenceDirectiveSyntaxSyntax node with. If not
        ''' specified the current File will be used in the new
        ''' ReferenceDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken, referenceKeyword As SyntaxToken, file As SyntaxToken) As ReferenceDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.ReferenceDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken OrElse referenceKeyword.Node IsNot green._referenceKeyword OrElse file.Node IsNot green._file Then
                Dim newNode = Syntax.ReferenceDirective(hashToken, referenceKeyword, file)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    ''' <summary>
    ''' Represents an unrecognized pre-processing directive. This occurs when the
    ''' parser encounters a hash '#' token at the beginning of a physical line but does
    ''' recognize the text that follows as a valid Visual Basic pre-processing
    ''' directive.
    ''' </summary>
    Public NotInheritable Class BadDirectiveSyntax
        Inherits DirectiveStatementSyntax


        Friend Sub New(ByVal green As InternalSyntax.SyntaxNode, ByVal parent as SyntaxNode, ByVal startLocation As Integer)
            MyBase.New(green, parent, startLocation)
            Debug.Assert(green IsNot Nothing)
            Debug.Assert(startLocation >= 0)
        End Sub

        Friend Sub New(ByVal kind As SyntaxKind, ByVal errors as DiagnosticInfo(), ByVal annotations as SyntaxAnnotation(), hashToken As InternalSyntax.PunctuationSyntax)
            Me.New(New InternalSyntax.BadDirectiveSyntax(kind, errors, annotations, hashToken), Nothing, 0)
        End Sub

        ''' <summary>
        ''' The "#" token in a preprocessor directive.
        ''' </summary>
        Public Shadows ReadOnly Property HashToken As SyntaxToken
            Get
                return new SyntaxToken(Me, DirectCast(Me.Green, InternalSyntax.BadDirectiveSyntax)._hashToken, Me.GetChildPosition(0), Me.GetChildIndex(0))
            End Get
        End Property

        Friend Overrides Function GetHashTokenCore() As SyntaxToken
            Return Me.HashToken
        End Function

        ''' <summary>
        ''' Creates a new node and sets the HashToken property
        ''' </summary>
        ''' <remarks>
        ''' Returns a new node with the property set
        ''' </remarks>
        Public Shadows Function WithHashToken(hashToken as SyntaxToken) As BadDirectiveSyntax
            return Update(hashToken)
        End Function

        Friend Overrides Function GetCachedSlot(i as Integer) as SyntaxNode
            If i = 0 Then
                Return Nothing
            Else
                Return Nothing
            End If
        End Function

        Friend Overrides Function GetNodeSlot(i as Integer) as SyntaxNode
                Return Nothing
        End Function

        Friend Overrides ReadOnly Property SlotCount() As Integer
            Get
                Return 1
            End Get
        End Property

        Public Overrides Function Accept(Of TResult)(ByVal visitor As SyntaxVisitor(Of TResult)) As TResult
            Return visitor.VisitBadDirective(Me)
        End Function

        Public Overrides Sub Accept(ByVal visitor As SyntaxVisitor)
            visitor.VisitBadDirective(Me)
        End Sub


        ''' <summary>
        ''' Creates a new BadDirectiveSyntaxSyntax node with the specified changes.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The new HashToken to update this BadDirectiveSyntaxSyntax node with. If not
        ''' specified the current HashToken will be used in the new
        ''' BadDirectiveSyntaxSyntax node.
        ''' </param>
        Public Function Update(hashToken As SyntaxToken) As BadDirectiveSyntax
            Dim green = DirectCast(Me.Green, InternalSyntax.BadDirectiveSyntax)
            If hashToken.Node IsNot green._hashToken Then
                Dim newNode = Syntax.BadDirective(hashToken)
                Dim annotations = Me.GetAnnotations()
                If annotations IsNot Nothing AndAlso annotations.Length > 0
                    return newNode.WithAnnotations(annotations)
                End If
                Return newNode
            End If
            Return Me
        End Function

    End Class

    Public MustInherit Class SyntaxVisitor(Of TResult)
        Public Overridable Function Visit(ByVal node As SyntaxNode) As TResult
            If node Is Nothing
                Return Nothing
            End If

            Return node.Accept(Me)
        End Function
        Public Overridable Function DefaultVisit(ByVal node As SyntaxNode) As TResult
        End Function
        Public Overridable Function VisitEmptyStatement(ByVal node As EmptyStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEndBlockStatement(ByVal node As EndBlockStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCompilationUnit(ByVal node As CompilationUnitSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOptionStatement(ByVal node As OptionStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitImportsStatement(ByVal node As ImportsStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAliasImportsClause(ByVal node As AliasImportsClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMembersImportsClause(ByVal node As MembersImportsClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlNamespaceImportsClause(ByVal node As XmlNamespaceImportsClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNamespaceBlock(ByVal node As NamespaceBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNamespaceStatement(ByVal node As NamespaceStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitModuleBlock(ByVal node As ModuleBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitStructureBlock(ByVal node As StructureBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitInterfaceBlock(ByVal node As InterfaceBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitClassBlock(ByVal node As ClassBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEnumBlock(ByVal node As EnumBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitInheritsStatement(ByVal node As InheritsStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitImplementsStatement(ByVal node As ImplementsStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitModuleStatement(ByVal node As ModuleStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitStructureStatement(ByVal node As StructureStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitInterfaceStatement(ByVal node As InterfaceStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitClassStatement(ByVal node As ClassStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEnumStatement(ByVal node As EnumStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeParameterList(ByVal node As TypeParameterListSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeParameter(ByVal node As TypeParameterSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeParameterSingleConstraintClause(ByVal node As TypeParameterSingleConstraintClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeParameterMultipleConstraintClause(ByVal node As TypeParameterMultipleConstraintClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSpecialConstraint(ByVal node As SpecialConstraintSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeConstraint(ByVal node As TypeConstraintSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEnumMemberDeclaration(ByVal node As EnumMemberDeclarationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMethodBlock(ByVal node As MethodBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPropertyBlock(ByVal node As PropertyBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEventBlock(ByVal node As EventBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitParameterList(ByVal node As ParameterListSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMethodStatement(ByVal node As MethodStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitConstructorStatement(ByVal node As ConstructorStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDeclareStatement(ByVal node As DeclareStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDelegateStatement(ByVal node As DelegateStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEventStatement(ByVal node As EventStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOperatorStatement(ByVal node As OperatorStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPropertyStatement(ByVal node As PropertyStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAccessorStatement(ByVal node As AccessorStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitImplementsClause(ByVal node As ImplementsClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitHandlesClause(ByVal node As HandlesClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitHandlesClauseItem(ByVal node As HandlesClauseItemSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitIncompleteMember(ByVal node As IncompleteMemberSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitFieldDeclaration(ByVal node As FieldDeclarationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitVariableDeclarator(ByVal node As VariableDeclaratorSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSimpleAsClause(ByVal node As SimpleAsClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAsNewClause(ByVal node As AsNewClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitObjectMemberInitializer(ByVal node As ObjectMemberInitializerSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitObjectCollectionInitializer(ByVal node As ObjectCollectionInitializerSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitInferredFieldInitializer(ByVal node As InferredFieldInitializerSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNamedFieldInitializer(ByVal node As NamedFieldInitializerSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEqualsValue(ByVal node As EqualsValueSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitParameter(ByVal node As ParameterSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitModifiedIdentifier(ByVal node As ModifiedIdentifierSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitArrayRankSpecifier(ByVal node As ArrayRankSpecifierSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAttributeBlock(ByVal node As AttributeBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAttribute(ByVal node As AttributeSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAttributeTarget(ByVal node As AttributeTargetSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAttributesStatement(ByVal node As AttributesStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitExpressionStatement(ByVal node As ExpressionStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWhileBlock(ByVal node As WhileBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitUsingBlock(ByVal node As UsingBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSyncLockBlock(ByVal node As SyncLockBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWithBlock(ByVal node As WithBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLocalDeclaration(ByVal node As LocalDeclarationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLabelStatement(ByVal node As LabelStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGoToStatement(ByVal node As GoToStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLabel(ByVal node As LabelSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitStopOrEndStatement(ByVal node As StopOrEndStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitExitStatement(ByVal node As ExitStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitContinueStatement(ByVal node As ContinueStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitReturnStatement(ByVal node As ReturnStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSingleLineIfStatement(ByVal node As SingleLineIfStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSingleLineIfPart(ByVal node As SingleLineIfPartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSingleLineElsePart(ByVal node As SingleLineElsePartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMultiLineIfBlock(ByVal node As MultiLineIfBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitIfPart(ByVal node As IfPartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitElsePart(ByVal node As ElsePartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitIfStatement(ByVal node As IfStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitElseStatement(ByVal node As ElseStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTryBlock(ByVal node As TryBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTryPart(ByVal node As TryPartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCatchPart(ByVal node As CatchPartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitFinallyPart(ByVal node As FinallyPartSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTryStatement(ByVal node As TryStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCatchStatement(ByVal node As CatchStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCatchFilterClause(ByVal node As CatchFilterClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitFinallyStatement(ByVal node As FinallyStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitErrorStatement(ByVal node As ErrorStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOnErrorGoToStatement(ByVal node As OnErrorGoToStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOnErrorResumeNextStatement(ByVal node As OnErrorResumeNextStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitResumeStatement(ByVal node As ResumeStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSelectBlock(ByVal node As SelectBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSelectStatement(ByVal node As SelectStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseBlock(ByVal node As CaseBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseStatement(ByVal node As CaseStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseElseClause(ByVal node As CaseElseClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseValueClause(ByVal node As CaseValueClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseRangeClause(ByVal node As CaseRangeClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCaseRelationalClause(ByVal node As CaseRelationalClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSyncLockStatement(ByVal node As SyncLockStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDoLoopBlock(ByVal node As DoLoopBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDoStatement(ByVal node As DoStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLoopStatement(ByVal node As LoopStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWhileUntilClause(ByVal node As WhileUntilClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWhileStatement(ByVal node As WhileStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitForBlock(ByVal node As ForBlockSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitForStatement(ByVal node As ForStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitForStepClause(ByVal node As ForStepClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitForEachStatement(ByVal node As ForEachStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNextStatement(ByVal node As NextStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitUsingStatement(ByVal node As UsingStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitThrowStatement(ByVal node As ThrowStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAssignmentStatement(ByVal node As AssignmentStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCallStatement(ByVal node As CallStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAddRemoveHandlerStatement(ByVal node As AddRemoveHandlerStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitRaiseEventStatement(ByVal node As RaiseEventStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWithStatement(ByVal node As WithStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitReDimStatement(ByVal node As ReDimStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEraseStatement(ByVal node As EraseStatementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLiteralExpression(ByVal node As LiteralExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitParenthesizedExpression(ByVal node As ParenthesizedExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMeExpression(ByVal node As MeExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMyBaseExpression(ByVal node As MyBaseExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMyClassExpression(ByVal node As MyClassExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGetTypeExpression(ByVal node As GetTypeExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeOfExpression(ByVal node As TypeOfExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGetXmlNamespaceExpression(ByVal node As GetXmlNamespaceExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMemberAccessExpression(ByVal node As MemberAccessExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlMemberAccessExpression(ByVal node As XmlMemberAccessExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitInvocationExpression(ByVal node As InvocationExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitObjectCreationExpression(ByVal node As ObjectCreationExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAnonymousObjectCreationExpression(ByVal node As AnonymousObjectCreationExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitArrayCreationExpression(ByVal node As ArrayCreationExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCollectionInitializer(ByVal node As CollectionInitializerSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCTypeExpression(ByVal node As CTypeExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDirectCastExpression(ByVal node As DirectCastExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTryCastExpression(ByVal node As TryCastExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPredefinedCastExpression(ByVal node As PredefinedCastExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitBinaryExpression(ByVal node As BinaryExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitUnaryExpression(ByVal node As UnaryExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitBinaryConditionalExpression(ByVal node As BinaryConditionalExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTernaryConditionalExpression(ByVal node As TernaryConditionalExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSingleLineLambdaExpression(ByVal node As SingleLineLambdaExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitMultiLineLambdaExpression(ByVal node As MultiLineLambdaExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLambdaHeader(ByVal node As LambdaHeaderSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitArgumentList(ByVal node As ArgumentListSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOmittedArgument(ByVal node As OmittedArgumentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSimpleArgument(ByVal node As SimpleArgumentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNamedArgument(ByVal node As NamedArgumentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitRangeArgument(ByVal node As RangeArgumentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitQueryExpression(ByVal node As QueryExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitCollectionRangeVariable(ByVal node As CollectionRangeVariableSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitExpressionRangeVariable(ByVal node As ExpressionRangeVariableSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAggregationRangeVariable(ByVal node As AggregationRangeVariableSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitVariableNameEquals(ByVal node As VariableNameEqualsSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitFunctionAggregation(ByVal node As FunctionAggregationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGroupAggregation(ByVal node As GroupAggregationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitFromClause(ByVal node As FromClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitLetClause(ByVal node As LetClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitAggregateClause(ByVal node As AggregateClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDistinctClause(ByVal node As DistinctClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitWhereClause(ByVal node As WhereClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPartitionWhileClause(ByVal node As PartitionWhileClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPartitionClause(ByVal node As PartitionClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGroupByClause(ByVal node As GroupByClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitJoinClause(ByVal node As JoinClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitJoinCondition(ByVal node As JoinConditionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGroupJoinClause(ByVal node As GroupJoinClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOrderByClause(ByVal node As OrderByClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitOrdering(ByVal node As OrderingSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSelectClause(ByVal node As SelectClauseSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlDocument(ByVal node As XmlDocumentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlDeclaration(ByVal node As XmlDeclarationSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlDeclarationOption(ByVal node As XmlDeclarationOptionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlElement(ByVal node As XmlElementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlText(ByVal node As XmlTextSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlElementStartTag(ByVal node As XmlElementStartTagSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlElementEndTag(ByVal node As XmlElementEndTagSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlEmptyElement(ByVal node As XmlEmptyElementSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlAttribute(ByVal node As XmlAttributeSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlString(ByVal node As XmlStringSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlName(ByVal node As XmlNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlBracketedName(ByVal node As XmlBracketedNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlPrefix(ByVal node As XmlPrefixSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlComment(ByVal node As XmlCommentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlProcessingInstruction(ByVal node As XmlProcessingInstructionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlCDataSection(ByVal node As XmlCDataSectionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitXmlEmbeddedExpression(ByVal node As XmlEmbeddedExpressionSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitArrayType(ByVal node As ArrayTypeSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitNullableType(ByVal node As NullableTypeSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitPredefinedType(ByVal node As PredefinedTypeSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitIdentifierName(ByVal node As IdentifierNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGenericName(ByVal node As GenericNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitQualifiedName(ByVal node As QualifiedNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitGlobalName(ByVal node As GlobalNameSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitTypeArgumentList(ByVal node As TypeArgumentListSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitSkippedTokens(ByVal node As SkippedTokensSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDocumentationComment(ByVal node As DocumentationCommentSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitDirective(ByVal node As DirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitConstDirective(ByVal node As ConstDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitIfDirective(ByVal node As IfDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitElseDirective(ByVal node As ElseDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEndIfDirective(ByVal node As EndIfDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitRegionDirective(ByVal node As RegionDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEndRegionDirective(ByVal node As EndRegionDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitExternalSourceDirective(ByVal node As ExternalSourceDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitEndExternalSourceDirective(ByVal node As EndExternalSourceDirective) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitExternalChecksumDirective(ByVal node As ExternalChecksumDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitReferenceDirective(ByVal node As ReferenceDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
        Public Overridable Function VisitBadDirective(ByVal node As BadDirectiveSyntax) As TResult
            Return Me.DefaultVisit(node)
        End Function
    End Class

    Public MustInherit Class SyntaxVisitor
        Public Overridable Sub Visit(ByVal node As SyntaxNode)
            If node Is Nothing
                Return
            End If

            node.Accept(Me): Return
        End Sub
        Public Overridable Sub DefaultVisit(ByVal node As SyntaxNode)
        End Sub
        Public Overridable Sub VisitEmptyStatement(ByVal node As EmptyStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEndBlockStatement(ByVal node As EndBlockStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCompilationUnit(ByVal node As CompilationUnitSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOptionStatement(ByVal node As OptionStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitImportsStatement(ByVal node As ImportsStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAliasImportsClause(ByVal node As AliasImportsClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMembersImportsClause(ByVal node As MembersImportsClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlNamespaceImportsClause(ByVal node As XmlNamespaceImportsClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNamespaceBlock(ByVal node As NamespaceBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNamespaceStatement(ByVal node As NamespaceStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitModuleBlock(ByVal node As ModuleBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitStructureBlock(ByVal node As StructureBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitInterfaceBlock(ByVal node As InterfaceBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitClassBlock(ByVal node As ClassBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEnumBlock(ByVal node As EnumBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitInheritsStatement(ByVal node As InheritsStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitImplementsStatement(ByVal node As ImplementsStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitModuleStatement(ByVal node As ModuleStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitStructureStatement(ByVal node As StructureStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitInterfaceStatement(ByVal node As InterfaceStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitClassStatement(ByVal node As ClassStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEnumStatement(ByVal node As EnumStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeParameterList(ByVal node As TypeParameterListSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeParameter(ByVal node As TypeParameterSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeParameterSingleConstraintClause(ByVal node As TypeParameterSingleConstraintClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeParameterMultipleConstraintClause(ByVal node As TypeParameterMultipleConstraintClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSpecialConstraint(ByVal node As SpecialConstraintSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeConstraint(ByVal node As TypeConstraintSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEnumMemberDeclaration(ByVal node As EnumMemberDeclarationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMethodBlock(ByVal node As MethodBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPropertyBlock(ByVal node As PropertyBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEventBlock(ByVal node As EventBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitParameterList(ByVal node As ParameterListSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMethodStatement(ByVal node As MethodStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitConstructorStatement(ByVal node As ConstructorStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDeclareStatement(ByVal node As DeclareStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDelegateStatement(ByVal node As DelegateStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEventStatement(ByVal node As EventStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOperatorStatement(ByVal node As OperatorStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPropertyStatement(ByVal node As PropertyStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAccessorStatement(ByVal node As AccessorStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitImplementsClause(ByVal node As ImplementsClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitHandlesClause(ByVal node As HandlesClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitHandlesClauseItem(ByVal node As HandlesClauseItemSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitIncompleteMember(ByVal node As IncompleteMemberSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitFieldDeclaration(ByVal node As FieldDeclarationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitVariableDeclarator(ByVal node As VariableDeclaratorSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSimpleAsClause(ByVal node As SimpleAsClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAsNewClause(ByVal node As AsNewClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitObjectMemberInitializer(ByVal node As ObjectMemberInitializerSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitObjectCollectionInitializer(ByVal node As ObjectCollectionInitializerSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitInferredFieldInitializer(ByVal node As InferredFieldInitializerSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNamedFieldInitializer(ByVal node As NamedFieldInitializerSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEqualsValue(ByVal node As EqualsValueSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitParameter(ByVal node As ParameterSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitModifiedIdentifier(ByVal node As ModifiedIdentifierSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitArrayRankSpecifier(ByVal node As ArrayRankSpecifierSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAttributeBlock(ByVal node As AttributeBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAttribute(ByVal node As AttributeSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAttributeTarget(ByVal node As AttributeTargetSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAttributesStatement(ByVal node As AttributesStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitExpressionStatement(ByVal node As ExpressionStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWhileBlock(ByVal node As WhileBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitUsingBlock(ByVal node As UsingBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSyncLockBlock(ByVal node As SyncLockBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWithBlock(ByVal node As WithBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLocalDeclaration(ByVal node As LocalDeclarationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLabelStatement(ByVal node As LabelStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGoToStatement(ByVal node As GoToStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLabel(ByVal node As LabelSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitStopOrEndStatement(ByVal node As StopOrEndStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitExitStatement(ByVal node As ExitStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitContinueStatement(ByVal node As ContinueStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitReturnStatement(ByVal node As ReturnStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSingleLineIfStatement(ByVal node As SingleLineIfStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSingleLineIfPart(ByVal node As SingleLineIfPartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSingleLineElsePart(ByVal node As SingleLineElsePartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMultiLineIfBlock(ByVal node As MultiLineIfBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitIfPart(ByVal node As IfPartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitElsePart(ByVal node As ElsePartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitIfStatement(ByVal node As IfStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitElseStatement(ByVal node As ElseStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTryBlock(ByVal node As TryBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTryPart(ByVal node As TryPartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCatchPart(ByVal node As CatchPartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitFinallyPart(ByVal node As FinallyPartSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTryStatement(ByVal node As TryStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCatchStatement(ByVal node As CatchStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCatchFilterClause(ByVal node As CatchFilterClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitFinallyStatement(ByVal node As FinallyStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitErrorStatement(ByVal node As ErrorStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOnErrorGoToStatement(ByVal node As OnErrorGoToStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOnErrorResumeNextStatement(ByVal node As OnErrorResumeNextStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitResumeStatement(ByVal node As ResumeStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSelectBlock(ByVal node As SelectBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSelectStatement(ByVal node As SelectStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseBlock(ByVal node As CaseBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseStatement(ByVal node As CaseStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseElseClause(ByVal node As CaseElseClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseValueClause(ByVal node As CaseValueClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseRangeClause(ByVal node As CaseRangeClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCaseRelationalClause(ByVal node As CaseRelationalClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSyncLockStatement(ByVal node As SyncLockStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDoLoopBlock(ByVal node As DoLoopBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDoStatement(ByVal node As DoStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLoopStatement(ByVal node As LoopStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWhileUntilClause(ByVal node As WhileUntilClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWhileStatement(ByVal node As WhileStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitForBlock(ByVal node As ForBlockSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitForStatement(ByVal node As ForStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitForStepClause(ByVal node As ForStepClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitForEachStatement(ByVal node As ForEachStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNextStatement(ByVal node As NextStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitUsingStatement(ByVal node As UsingStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitThrowStatement(ByVal node As ThrowStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAssignmentStatement(ByVal node As AssignmentStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCallStatement(ByVal node As CallStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAddRemoveHandlerStatement(ByVal node As AddRemoveHandlerStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitRaiseEventStatement(ByVal node As RaiseEventStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWithStatement(ByVal node As WithStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitReDimStatement(ByVal node As ReDimStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEraseStatement(ByVal node As EraseStatementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLiteralExpression(ByVal node As LiteralExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitParenthesizedExpression(ByVal node As ParenthesizedExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMeExpression(ByVal node As MeExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMyBaseExpression(ByVal node As MyBaseExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMyClassExpression(ByVal node As MyClassExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGetTypeExpression(ByVal node As GetTypeExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeOfExpression(ByVal node As TypeOfExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGetXmlNamespaceExpression(ByVal node As GetXmlNamespaceExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMemberAccessExpression(ByVal node As MemberAccessExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlMemberAccessExpression(ByVal node As XmlMemberAccessExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitInvocationExpression(ByVal node As InvocationExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitObjectCreationExpression(ByVal node As ObjectCreationExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAnonymousObjectCreationExpression(ByVal node As AnonymousObjectCreationExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitArrayCreationExpression(ByVal node As ArrayCreationExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCollectionInitializer(ByVal node As CollectionInitializerSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCTypeExpression(ByVal node As CTypeExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDirectCastExpression(ByVal node As DirectCastExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTryCastExpression(ByVal node As TryCastExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPredefinedCastExpression(ByVal node As PredefinedCastExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitBinaryExpression(ByVal node As BinaryExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitUnaryExpression(ByVal node As UnaryExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitBinaryConditionalExpression(ByVal node As BinaryConditionalExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTernaryConditionalExpression(ByVal node As TernaryConditionalExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSingleLineLambdaExpression(ByVal node As SingleLineLambdaExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitMultiLineLambdaExpression(ByVal node As MultiLineLambdaExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLambdaHeader(ByVal node As LambdaHeaderSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitArgumentList(ByVal node As ArgumentListSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOmittedArgument(ByVal node As OmittedArgumentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSimpleArgument(ByVal node As SimpleArgumentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNamedArgument(ByVal node As NamedArgumentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitRangeArgument(ByVal node As RangeArgumentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitQueryExpression(ByVal node As QueryExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitCollectionRangeVariable(ByVal node As CollectionRangeVariableSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitExpressionRangeVariable(ByVal node As ExpressionRangeVariableSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAggregationRangeVariable(ByVal node As AggregationRangeVariableSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitVariableNameEquals(ByVal node As VariableNameEqualsSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitFunctionAggregation(ByVal node As FunctionAggregationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGroupAggregation(ByVal node As GroupAggregationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitFromClause(ByVal node As FromClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitLetClause(ByVal node As LetClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitAggregateClause(ByVal node As AggregateClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDistinctClause(ByVal node As DistinctClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitWhereClause(ByVal node As WhereClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPartitionWhileClause(ByVal node As PartitionWhileClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPartitionClause(ByVal node As PartitionClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGroupByClause(ByVal node As GroupByClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitJoinClause(ByVal node As JoinClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitJoinCondition(ByVal node As JoinConditionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGroupJoinClause(ByVal node As GroupJoinClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOrderByClause(ByVal node As OrderByClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitOrdering(ByVal node As OrderingSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSelectClause(ByVal node As SelectClauseSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlDocument(ByVal node As XmlDocumentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlDeclaration(ByVal node As XmlDeclarationSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlDeclarationOption(ByVal node As XmlDeclarationOptionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlElement(ByVal node As XmlElementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlText(ByVal node As XmlTextSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlElementStartTag(ByVal node As XmlElementStartTagSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlElementEndTag(ByVal node As XmlElementEndTagSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlEmptyElement(ByVal node As XmlEmptyElementSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlAttribute(ByVal node As XmlAttributeSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlString(ByVal node As XmlStringSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlName(ByVal node As XmlNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlBracketedName(ByVal node As XmlBracketedNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlPrefix(ByVal node As XmlPrefixSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlComment(ByVal node As XmlCommentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlProcessingInstruction(ByVal node As XmlProcessingInstructionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlCDataSection(ByVal node As XmlCDataSectionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitXmlEmbeddedExpression(ByVal node As XmlEmbeddedExpressionSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitArrayType(ByVal node As ArrayTypeSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitNullableType(ByVal node As NullableTypeSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitPredefinedType(ByVal node As PredefinedTypeSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitIdentifierName(ByVal node As IdentifierNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGenericName(ByVal node As GenericNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitQualifiedName(ByVal node As QualifiedNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitGlobalName(ByVal node As GlobalNameSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitTypeArgumentList(ByVal node As TypeArgumentListSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitSkippedTokens(ByVal node As SkippedTokensSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDocumentationComment(ByVal node As DocumentationCommentSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitDirective(ByVal node As DirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitConstDirective(ByVal node As ConstDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitIfDirective(ByVal node As IfDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitElseDirective(ByVal node As ElseDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEndIfDirective(ByVal node As EndIfDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitRegionDirective(ByVal node As RegionDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEndRegionDirective(ByVal node As EndRegionDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitExternalSourceDirective(ByVal node As ExternalSourceDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitEndExternalSourceDirective(ByVal node As EndExternalSourceDirective)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitExternalChecksumDirective(ByVal node As ExternalChecksumDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitReferenceDirective(ByVal node As ReferenceDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
        Public Overridable Sub VisitBadDirective(ByVal node As BadDirectiveSyntax)
            Me.DefaultVisit(node): Return
        End Sub
    End Class

    Public MustInherit Class SyntaxRewriter
        Inherits SyntaxVisitor(Of SyntaxNode)

        Public Overrides Function VisitEmptyStatement(ByVal node As EmptyStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEmpty = DirectCast(VisitToken(node.Empty).Node, InternalSyntax.PunctuationSyntax)
            If node.Empty.Node IsNot newEmpty Then anyChanges = True

            If anyChanges Then
                Return New EmptyStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEmpty)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEndBlockStatement(ByVal node As EndBlockStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEndKeyword = DirectCast(VisitToken(node.EndKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EndKeyword.Node IsNot newEndKeyword Then anyChanges = True
            Dim newBlockKeyword = DirectCast(VisitToken(node.BlockKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.BlockKeyword.Node IsNot newBlockKeyword Then anyChanges = True

            If anyChanges Then
                Return New EndBlockStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEndKeyword, newBlockKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCompilationUnit(ByVal node As CompilationUnitSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOptions = VisitList(node.Options)
            If node._options IsNot newOptions.Node Then anyChanges = True
            Dim newImports = VisitList(node.[Imports])
            If node._imports IsNot newImports.Node Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEndOfFileToken = DirectCast(VisitToken(node.EndOfFileToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EndOfFileToken.Node IsNot newEndOfFileToken Then anyChanges = True

            If anyChanges Then
                Return New CompilationUnitSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOptions.Node, newImports.Node, newAttributes.Node, newMembers.Node, newEndOfFileToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOptionStatement(ByVal node As OptionStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOptionKeyword = DirectCast(VisitToken(node.OptionKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OptionKeyword.Node IsNot newOptionKeyword Then anyChanges = True
            Dim newNameKeyword = DirectCast(VisitToken(node.NameKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NameKeyword.Node IsNot newNameKeyword Then anyChanges = True
            Dim newValueKeyword = DirectCast(VisitToken(node.ValueKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ValueKeyword.Node IsNot newValueKeyword Then anyChanges = True

            If anyChanges Then
                Return New OptionStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOptionKeyword, newNameKeyword, newValueKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitImportsStatement(ByVal node As ImportsStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newImportsKeyword = DirectCast(VisitToken(node.ImportsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ImportsKeyword.Node IsNot newImportsKeyword Then anyChanges = True
            Dim newImportsClauses = VisitList(node.ImportsClauses)
            If node._importsClauses IsNot newImportsClauses.Node Then anyChanges = True

            If anyChanges Then
                Return New ImportsStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newImportsKeyword, newImportsClauses.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAliasImportsClause(ByVal node As AliasImportsClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAlias = DirectCast(VisitToken(node.[Alias]).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.[Alias].Node IsNot newAlias Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), NameSyntax)
            If node.Name IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New AliasImportsClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAlias, newEqualsToken, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMembersImportsClause(ByVal node As MembersImportsClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newName = DirectCast(Visit(node.Name), NameSyntax)
            If node.Name IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New MembersImportsClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlNamespaceImportsClause(ByVal node As XmlNamespaceImportsClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanToken = DirectCast(VisitToken(node.LessThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanToken.Node IsNot newLessThanToken Then anyChanges = True
            Dim newXmlNamespace = DirectCast(Visit(node.XmlNamespace), XmlAttributeSyntax)
            If node.XmlNamespace IsNot newXmlNamespace Then anyChanges = True
            Dim newGreaterThanToken = DirectCast(VisitToken(node.GreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.GreaterThanToken.Node IsNot newGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlNamespaceImportsClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanToken, newXmlNamespace, newGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNamespaceBlock(ByVal node As NamespaceBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), NamespaceStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New NamespaceBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNamespaceStatement(ByVal node As NamespaceStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNamespaceKeyword = DirectCast(VisitToken(node.NamespaceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NamespaceKeyword.Node IsNot newNamespaceKeyword Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), NameSyntax)
            If node.Name IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New NamespaceStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNamespaceKeyword, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitModuleBlock(ByVal node As ModuleBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), ModuleStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newInherits = VisitList(node.[Inherits])
            If node._inherits IsNot newInherits.Node Then anyChanges = True
            Dim newImplements = VisitList(node.[Implements])
            If node._implements IsNot newImplements.Node Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New ModuleBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newInherits.Node, newImplements.Node, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitStructureBlock(ByVal node As StructureBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), StructureStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newInherits = VisitList(node.[Inherits])
            If node._inherits IsNot newInherits.Node Then anyChanges = True
            Dim newImplements = VisitList(node.[Implements])
            If node._implements IsNot newImplements.Node Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New StructureBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newInherits.Node, newImplements.Node, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitInterfaceBlock(ByVal node As InterfaceBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), InterfaceStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newInherits = VisitList(node.[Inherits])
            If node._inherits IsNot newInherits.Node Then anyChanges = True
            Dim newImplements = VisitList(node.[Implements])
            If node._implements IsNot newImplements.Node Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New InterfaceBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newInherits.Node, newImplements.Node, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitClassBlock(ByVal node As ClassBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), ClassStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newInherits = VisitList(node.[Inherits])
            If node._inherits IsNot newInherits.Node Then anyChanges = True
            Dim newImplements = VisitList(node.[Implements])
            If node._implements IsNot newImplements.Node Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New ClassBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newInherits.Node, newImplements.Node, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEnumBlock(ByVal node As EnumBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), EnumStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newMembers = VisitList(node.Members)
            If node._members IsNot newMembers.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New EnumBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newMembers.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitInheritsStatement(ByVal node As InheritsStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newInheritsKeyword = DirectCast(VisitToken(node.InheritsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.InheritsKeyword.Node IsNot newInheritsKeyword Then anyChanges = True
            Dim newTypes = VisitList(node.Types)
            If node._types IsNot newTypes.Node Then anyChanges = True

            If anyChanges Then
                Return New InheritsStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newInheritsKeyword, newTypes.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitImplementsStatement(ByVal node As ImplementsStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newImplementsKeyword = DirectCast(VisitToken(node.ImplementsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ImplementsKeyword.Node IsNot newImplementsKeyword Then anyChanges = True
            Dim newTypes = VisitList(node.Types)
            If node._types IsNot newTypes.Node Then anyChanges = True

            If anyChanges Then
                Return New ImplementsStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newImplementsKeyword, newTypes.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitModuleStatement(ByVal node As ModuleStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True

            If anyChanges Then
                Return New ModuleStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newTypeParameterList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitStructureStatement(ByVal node As StructureStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True

            If anyChanges Then
                Return New StructureStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newTypeParameterList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitInterfaceStatement(ByVal node As InterfaceStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True

            If anyChanges Then
                Return New InterfaceStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newTypeParameterList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitClassStatement(ByVal node As ClassStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True

            If anyChanges Then
                Return New ClassStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newTypeParameterList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEnumStatement(ByVal node As EnumStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newEnumKeyword = DirectCast(VisitToken(node.EnumKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EnumKeyword.Node IsNot newEnumKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newUnderlyingType = DirectCast(Visit(node.UnderlyingType), AsClauseSyntax)
            If node.UnderlyingType IsNot newUnderlyingType Then anyChanges = True

            If anyChanges Then
                Return New EnumStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newEnumKeyword, newIdentifier, newUnderlyingType)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeParameterList(ByVal node As TypeParameterListSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newOfKeyword = DirectCast(VisitToken(node.OfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OfKeyword.Node IsNot newOfKeyword Then anyChanges = True
            Dim newParameters = VisitList(node.Parameters)
            If node._parameters IsNot newParameters.Node Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New TypeParameterListSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newOfKeyword, newParameters.Node, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeParameter(ByVal node As TypeParameterSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newVarianceKeyword = DirectCast(VisitToken(node.VarianceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.VarianceKeyword.Node IsNot newVarianceKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterConstraintClause = DirectCast(Visit(node.TypeParameterConstraintClause), TypeParameterConstraintClauseSyntax)
            If node.TypeParameterConstraintClause IsNot newTypeParameterConstraintClause Then anyChanges = True

            If anyChanges Then
                Return New TypeParameterSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newVarianceKeyword, newIdentifier, newTypeParameterConstraintClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeParameterSingleConstraintClause(ByVal node As TypeParameterSingleConstraintClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAsKeyword = DirectCast(VisitToken(node.AsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AsKeyword.Node IsNot newAsKeyword Then anyChanges = True
            Dim newConstraint = DirectCast(Visit(node.Constraint), ConstraintSyntax)
            If node.Constraint IsNot newConstraint Then anyChanges = True

            If anyChanges Then
                Return New TypeParameterSingleConstraintClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAsKeyword, newConstraint)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeParameterMultipleConstraintClause(ByVal node As TypeParameterMultipleConstraintClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAsKeyword = DirectCast(VisitToken(node.AsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AsKeyword.Node IsNot newAsKeyword Then anyChanges = True
            Dim newOpenBraceToken = DirectCast(VisitToken(node.OpenBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenBraceToken.Node IsNot newOpenBraceToken Then anyChanges = True
            Dim newConstraints = VisitList(node.Constraints)
            If node._constraints IsNot newConstraints.Node Then anyChanges = True
            Dim newCloseBraceToken = DirectCast(VisitToken(node.CloseBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseBraceToken.Node IsNot newCloseBraceToken Then anyChanges = True

            If anyChanges Then
                Return New TypeParameterMultipleConstraintClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAsKeyword, newOpenBraceToken, newConstraints.Node, newCloseBraceToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSpecialConstraint(ByVal node As SpecialConstraintSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newConstraintKeyword = DirectCast(VisitToken(node.ConstraintKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ConstraintKeyword.Node IsNot newConstraintKeyword Then anyChanges = True

            If anyChanges Then
                Return New SpecialConstraintSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newConstraintKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeConstraint(ByVal node As TypeConstraintSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True

            If anyChanges Then
                Return New TypeConstraintSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newType)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEnumMemberDeclaration(ByVal node As EnumMemberDeclarationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), EqualsValueSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New EnumMemberDeclarationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newIdentifier, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMethodBlock(ByVal node As MethodBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), MethodBaseSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New MethodBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPropertyBlock(ByVal node As PropertyBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), PropertyStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newAccessors = VisitList(node.Accessors)
            If node._accessors IsNot newAccessors.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New PropertyBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newAccessors.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEventBlock(ByVal node As EventBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), EventStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newAccessors = VisitList(node.Accessors)
            If node._accessors IsNot newAccessors.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New EventBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newAccessors.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitParameterList(ByVal node As ParameterListSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newParameters = VisitList(node.Parameters)
            If node._parameters IsNot newParameters.Node Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ParameterListSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newParameters.Node, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMethodStatement(ByVal node As MethodStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newHandlesClause = DirectCast(Visit(node.HandlesClause), HandlesClauseSyntax)
            If node.HandlesClause IsNot newHandlesClause Then anyChanges = True
            Dim newImplementsClause = DirectCast(Visit(node.ImplementsClause), ImplementsClauseSyntax)
            If node.ImplementsClause IsNot newImplementsClause Then anyChanges = True

            If anyChanges Then
                Return New MethodStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newTypeParameterList, newParameterList, newAsClause, newHandlesClause, newImplementsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitConstructorStatement(ByVal node As ConstructorStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newNewKeyword = DirectCast(VisitToken(node.NewKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NewKeyword.Node IsNot newNewKeyword Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New ConstructorStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newNewKeyword, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDeclareStatement(ByVal node As DeclareStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newDeclareKeyword = DirectCast(VisitToken(node.DeclareKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.DeclareKeyword.Node IsNot newDeclareKeyword Then anyChanges = True
            Dim newCharsetKeyword = DirectCast(VisitToken(node.CharsetKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CharsetKeyword.Node IsNot newCharsetKeyword Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newLibKeyword = DirectCast(VisitToken(node.LibKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.LibKeyword.Node IsNot newLibKeyword Then anyChanges = True
            Dim newLibraryName = DirectCast(Visit(node.LibraryName), LiteralExpressionSyntax)
            If node.LibraryName IsNot newLibraryName Then anyChanges = True
            Dim newAliasKeyword = DirectCast(VisitToken(node.AliasKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AliasKeyword.Node IsNot newAliasKeyword Then anyChanges = True
            Dim newAliasName = DirectCast(Visit(node.AliasName), LiteralExpressionSyntax)
            If node.AliasName IsNot newAliasName Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New DeclareStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newDeclareKeyword, newCharsetKeyword, newKeyword, newIdentifier, newLibKeyword, newLibraryName, newAliasKeyword, newAliasName, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDelegateStatement(ByVal node As DelegateStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newDelegateKeyword = DirectCast(VisitToken(node.DelegateKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.DelegateKeyword.Node IsNot newDelegateKeyword Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeParameterList = DirectCast(Visit(node.TypeParameterList), TypeParameterListSyntax)
            If node.TypeParameterList IsNot newTypeParameterList Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New DelegateStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newDelegateKeyword, newKeyword, newIdentifier, newTypeParameterList, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEventStatement(ByVal node As EventStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newCustomKeyword = DirectCast(VisitToken(node.CustomKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CustomKeyword.Node IsNot newCustomKeyword Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newImplementsClause = DirectCast(Visit(node.ImplementsClause), ImplementsClauseSyntax)
            If node.ImplementsClause IsNot newImplementsClause Then anyChanges = True

            If anyChanges Then
                Return New EventStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newCustomKeyword, newKeyword, newIdentifier, newParameterList, newAsClause, newImplementsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOperatorStatement(ByVal node As OperatorStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newOperator = DirectCast(VisitToken(node.[Operator]).Node, InternalSyntax.SyntaxToken)
            If node.[Operator].Node IsNot newOperator Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New OperatorStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newOperator, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPropertyStatement(ByVal node As PropertyStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), EqualsValueSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True
            Dim newImplementsClause = DirectCast(Visit(node.ImplementsClause), ImplementsClauseSyntax)
            If node.ImplementsClause IsNot newImplementsClause Then anyChanges = True

            If anyChanges Then
                Return New PropertyStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newIdentifier, newParameterList, newAsClause, newInitializer, newImplementsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAccessorStatement(ByVal node As AccessorStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New AccessorStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitImplementsClause(ByVal node As ImplementsClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newImplementsKeyword = DirectCast(VisitToken(node.ImplementsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ImplementsKeyword.Node IsNot newImplementsKeyword Then anyChanges = True
            Dim newInterfaceMembers = VisitList(node.InterfaceMembers)
            If node._interfaceMembers IsNot newInterfaceMembers.Node Then anyChanges = True

            If anyChanges Then
                Return New ImplementsClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newImplementsKeyword, newInterfaceMembers.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitHandlesClause(ByVal node As HandlesClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHandlesKeyword = DirectCast(VisitToken(node.HandlesKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.HandlesKeyword.Node IsNot newHandlesKeyword Then anyChanges = True
            Dim newEvents = VisitList(node.Events)
            If node._events IsNot newEvents.Node Then anyChanges = True

            If anyChanges Then
                Return New HandlesClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHandlesKeyword, newEvents.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitHandlesClauseItem(ByVal node As HandlesClauseItemSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEventContainer = DirectCast(VisitToken(node.EventContainer).Node, InternalSyntax.SyntaxToken)
            If node.EventContainer.Node IsNot newEventContainer Then anyChanges = True
            Dim newDotToken = DirectCast(VisitToken(node.DotToken).Node, InternalSyntax.PunctuationSyntax)
            If node.DotToken.Node IsNot newDotToken Then anyChanges = True
            Dim newEventMember = DirectCast(Visit(node.EventMember), IdentifierNameSyntax)
            If node.EventMember IsNot newEventMember Then anyChanges = True

            If anyChanges Then
                Return New HandlesClauseItemSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEventContainer, newDotToken, newEventMember)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitIncompleteMember(ByVal node As IncompleteMemberSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newMissingIdentifier = DirectCast(VisitToken(node.MissingIdentifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.MissingIdentifier.Node IsNot newMissingIdentifier Then anyChanges = True

            If anyChanges Then
                Return New IncompleteMemberSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newMissingIdentifier)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitFieldDeclaration(ByVal node As FieldDeclarationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newDeclarators = VisitList(node.Declarators)
            If node._declarators IsNot newDeclarators.Node Then anyChanges = True

            If anyChanges Then
                Return New FieldDeclarationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newDeclarators.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitVariableDeclarator(ByVal node As VariableDeclaratorSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNames = VisitList(node.Names)
            If node._names IsNot newNames.Node Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), EqualsValueSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New VariableDeclaratorSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNames.Node, newAsClause, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSimpleAsClause(ByVal node As SimpleAsClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAsKeyword = DirectCast(VisitToken(node.AsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AsKeyword.Node IsNot newAsKeyword Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True

            If anyChanges Then
                Return New SimpleAsClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAsKeyword, newAttributes.Node, newType)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAsNewClause(ByVal node As AsNewClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAsKeyword = DirectCast(VisitToken(node.AsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AsKeyword.Node IsNot newAsKeyword Then anyChanges = True
            Dim newNewExpression = DirectCast(Visit(node.NewExpression), NewExpressionSyntax)
            If node.NewExpression IsNot newNewExpression Then anyChanges = True

            If anyChanges Then
                Return New AsNewClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAsKeyword, newNewExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitObjectMemberInitializer(ByVal node As ObjectMemberInitializerSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWithKeyword = DirectCast(VisitToken(node.WithKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WithKeyword.Node IsNot newWithKeyword Then anyChanges = True
            Dim newOpenBraceToken = DirectCast(VisitToken(node.OpenBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenBraceToken.Node IsNot newOpenBraceToken Then anyChanges = True
            Dim newInitializers = VisitList(node.Initializers)
            If node._initializers IsNot newInitializers.Node Then anyChanges = True
            Dim newCloseBraceToken = DirectCast(VisitToken(node.CloseBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseBraceToken.Node IsNot newCloseBraceToken Then anyChanges = True

            If anyChanges Then
                Return New ObjectMemberInitializerSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWithKeyword, newOpenBraceToken, newInitializers.Node, newCloseBraceToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitObjectCollectionInitializer(ByVal node As ObjectCollectionInitializerSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newFromKeyword = DirectCast(VisitToken(node.FromKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.FromKeyword.Node IsNot newFromKeyword Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), CollectionInitializerSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New ObjectCollectionInitializerSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newFromKeyword, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitInferredFieldInitializer(ByVal node As InferredFieldInitializerSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyKeyword = DirectCast(VisitToken(node.KeyKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.KeyKeyword.Node IsNot newKeyKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New InferredFieldInitializerSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNamedFieldInitializer(ByVal node As NamedFieldInitializerSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyKeyword = DirectCast(VisitToken(node.KeyKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.KeyKeyword.Node IsNot newKeyKeyword Then anyChanges = True
            Dim newDotToken = DirectCast(VisitToken(node.DotToken).Node, InternalSyntax.PunctuationSyntax)
            If node.DotToken.Node IsNot newDotToken Then anyChanges = True
            Dim newIdentifier = DirectCast(Visit(node.Identifier), IdentifierNameSyntax)
            If node.Identifier IsNot newIdentifier Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New NamedFieldInitializerSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyKeyword, newDotToken, newIdentifier, newEqualsToken, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEqualsValue(ByVal node As EqualsValueSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newValue = DirectCast(Visit(node.Value), ExpressionSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New EqualsValueSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEqualsToken, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitParameter(ByVal node As ParameterSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newIdentifier = DirectCast(Visit(node.Identifier), ModifiedIdentifierSyntax)
            If node.Identifier IsNot newIdentifier Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), SimpleAsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newDefault = DirectCast(Visit(node.[Default]), EqualsValueSyntax)
            If node.[Default] IsNot newDefault Then anyChanges = True

            If anyChanges Then
                Return New ParameterSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newIdentifier, newAsClause, newDefault)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitModifiedIdentifier(ByVal node As ModifiedIdentifierSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newNullable = DirectCast(VisitToken(node.Nullable).Node, InternalSyntax.PunctuationSyntax)
            If node.Nullable.Node IsNot newNullable Then anyChanges = True
            Dim newArrayBounds = DirectCast(Visit(node.ArrayBounds), ArgumentListSyntax)
            If node.ArrayBounds IsNot newArrayBounds Then anyChanges = True
            Dim newArrayRankSpecifiers = VisitList(node.ArrayRankSpecifiers)
            If node._arrayRankSpecifiers IsNot newArrayRankSpecifiers.Node Then anyChanges = True

            If anyChanges Then
                Return New ModifiedIdentifierSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifier, newNullable, newArrayBounds, newArrayRankSpecifiers.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitArrayRankSpecifier(ByVal node As ArrayRankSpecifierSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newCommaTokens = VisitList(node.CommaTokens)
            If node.CommaTokens.Node IsNot newCommaTokens.Node Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ArrayRankSpecifierSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newCommaTokens.Node, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAttributeBlock(ByVal node As AttributeBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanToken = DirectCast(VisitToken(node.LessThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanToken.Node IsNot newLessThanToken Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newGreaterThanToken = DirectCast(VisitToken(node.GreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.GreaterThanToken.Node IsNot newGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New AttributeBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanToken, newAttributes.Node, newGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAttribute(ByVal node As AttributeSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTarget = DirectCast(Visit(node.Target), AttributeTargetSyntax)
            If node.Target IsNot newTarget Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), TypeSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newArgumentList = DirectCast(Visit(node.ArgumentList), ArgumentListSyntax)
            If node.ArgumentList IsNot newArgumentList Then anyChanges = True

            If anyChanges Then
                Return New AttributeSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTarget, newName, newArgumentList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAttributeTarget(ByVal node As AttributeTargetSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributeModifier = DirectCast(VisitToken(node.AttributeModifier).Node, InternalSyntax.KeywordSyntax)
            If node.AttributeModifier.Node IsNot newAttributeModifier Then anyChanges = True
            Dim newColonToken = DirectCast(VisitToken(node.ColonToken).Node, InternalSyntax.PunctuationSyntax)
            If node.ColonToken.Node IsNot newColonToken Then anyChanges = True

            If anyChanges Then
                Return New AttributeTargetSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributeModifier, newColonToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAttributesStatement(ByVal node As AttributesStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True

            If anyChanges Then
                Return New AttributesStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitExpressionStatement(ByVal node As ExpressionStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newQuestionToken = DirectCast(VisitToken(node.QuestionToken).Node, InternalSyntax.PunctuationSyntax)
            If node.QuestionToken.Node IsNot newQuestionToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New ExpressionStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newQuestionToken, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWhileBlock(ByVal node As WhileBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), WhileStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New WhileBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitUsingBlock(ByVal node As UsingBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), UsingStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New UsingBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSyncLockBlock(ByVal node As SyncLockBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), SyncLockStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New SyncLockBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWithBlock(ByVal node As WithBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), WithStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New WithBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLocalDeclaration(ByVal node As LocalDeclarationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newDeclarators = VisitList(node.Declarators)
            If node._declarators IsNot newDeclarators.Node Then anyChanges = True

            If anyChanges Then
                Return New LocalDeclarationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newModifiers.Node, newDeclarators.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLabelStatement(ByVal node As LabelStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLabelToken = DirectCast(VisitToken(node.LabelToken).Node, InternalSyntax.SyntaxToken)
            If node.LabelToken.Node IsNot newLabelToken Then anyChanges = True

            If anyChanges Then
                Return New LabelStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLabelToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGoToStatement(ByVal node As GoToStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGoToKeyword = DirectCast(VisitToken(node.GoToKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GoToKeyword.Node IsNot newGoToKeyword Then anyChanges = True
            Dim newLabel = DirectCast(Visit(node.Label), LabelSyntax)
            If node.Label IsNot newLabel Then anyChanges = True

            If anyChanges Then
                Return New GoToStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGoToKeyword, newLabel)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLabel(ByVal node As LabelSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLabelToken = DirectCast(VisitToken(node.LabelToken).Node, InternalSyntax.SyntaxToken)
            If node.LabelToken.Node IsNot newLabelToken Then anyChanges = True

            If anyChanges Then
                Return New LabelSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLabelToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitStopOrEndStatement(ByVal node As StopOrEndStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newStopOrEndKeyword = DirectCast(VisitToken(node.StopOrEndKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.StopOrEndKeyword.Node IsNot newStopOrEndKeyword Then anyChanges = True

            If anyChanges Then
                Return New StopOrEndStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newStopOrEndKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitExitStatement(ByVal node As ExitStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newExitKeyword = DirectCast(VisitToken(node.ExitKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ExitKeyword.Node IsNot newExitKeyword Then anyChanges = True
            Dim newBlockKeyword = DirectCast(VisitToken(node.BlockKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.BlockKeyword.Node IsNot newBlockKeyword Then anyChanges = True

            If anyChanges Then
                Return New ExitStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newExitKeyword, newBlockKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitContinueStatement(ByVal node As ContinueStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newContinueKeyword = DirectCast(VisitToken(node.ContinueKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ContinueKeyword.Node IsNot newContinueKeyword Then anyChanges = True
            Dim newBlockKeyword = DirectCast(VisitToken(node.BlockKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.BlockKeyword.Node IsNot newBlockKeyword Then anyChanges = True

            If anyChanges Then
                Return New ContinueStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newContinueKeyword, newBlockKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitReturnStatement(ByVal node As ReturnStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newReturnKeyword = DirectCast(VisitToken(node.ReturnKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ReturnKeyword.Node IsNot newReturnKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New ReturnStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newReturnKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSingleLineIfStatement(ByVal node As SingleLineIfStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIfPart = DirectCast(Visit(node.IfPart), SingleLineIfPartSyntax)
            If node.IfPart IsNot newIfPart Then anyChanges = True
            Dim newElsePart = DirectCast(Visit(node.ElsePart), SingleLineElsePartSyntax)
            If node.ElsePart IsNot newElsePart Then anyChanges = True

            If anyChanges Then
                Return New SingleLineIfStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIfPart, newElsePart)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSingleLineIfPart(ByVal node As SingleLineIfPartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), IfStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New SingleLineIfPartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSingleLineElsePart(ByVal node As SingleLineElsePartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), ElseStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New SingleLineElsePartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMultiLineIfBlock(ByVal node As MultiLineIfBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIfPart = DirectCast(Visit(node.IfPart), IfPartSyntax)
            If node.IfPart IsNot newIfPart Then anyChanges = True
            Dim newElseIfParts = VisitList(node.ElseIfParts)
            If node._elseIfParts IsNot newElseIfParts.Node Then anyChanges = True
            Dim newElsePart = DirectCast(Visit(node.ElsePart), ElsePartSyntax)
            If node.ElsePart IsNot newElsePart Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New MultiLineIfBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIfPart, newElseIfParts.Node, newElsePart, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitIfPart(ByVal node As IfPartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), IfStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New IfPartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitElsePart(ByVal node As ElsePartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), ElseStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New ElsePartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitIfStatement(ByVal node As IfStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newElseKeyword = DirectCast(VisitToken(node.ElseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ElseKeyword.Node IsNot newElseKeyword Then anyChanges = True
            Dim newIfOrElseIfKeyword = DirectCast(VisitToken(node.IfOrElseIfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IfOrElseIfKeyword.Node IsNot newIfOrElseIfKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True
            Dim newThenKeyword = DirectCast(VisitToken(node.ThenKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ThenKeyword.Node IsNot newThenKeyword Then anyChanges = True

            If anyChanges Then
                Return New IfStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newElseKeyword, newIfOrElseIfKeyword, newCondition, newThenKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitElseStatement(ByVal node As ElseStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newElseKeyword = DirectCast(VisitToken(node.ElseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ElseKeyword.Node IsNot newElseKeyword Then anyChanges = True

            If anyChanges Then
                Return New ElseStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newElseKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTryBlock(ByVal node As TryBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTryPart = DirectCast(Visit(node.TryPart), TryPartSyntax)
            If node.TryPart IsNot newTryPart Then anyChanges = True
            Dim newCatchParts = VisitList(node.CatchParts)
            If node._catchParts IsNot newCatchParts.Node Then anyChanges = True
            Dim newFinallyPart = DirectCast(Visit(node.FinallyPart), FinallyPartSyntax)
            If node.FinallyPart IsNot newFinallyPart Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New TryBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTryPart, newCatchParts.Node, newFinallyPart, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTryPart(ByVal node As TryPartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), TryStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New TryPartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCatchPart(ByVal node As CatchPartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), CatchStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New CatchPartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitFinallyPart(ByVal node As FinallyPartSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), FinallyStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New FinallyPartSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTryStatement(ByVal node As TryStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTryKeyword = DirectCast(VisitToken(node.TryKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.TryKeyword.Node IsNot newTryKeyword Then anyChanges = True

            If anyChanges Then
                Return New TryStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTryKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCatchStatement(ByVal node As CatchStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newCatchKeyword = DirectCast(VisitToken(node.CatchKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CatchKeyword.Node IsNot newCatchKeyword Then anyChanges = True
            Dim newIdentifierName = DirectCast(Visit(node.IdentifierName), IdentifierNameSyntax)
            If node.IdentifierName IsNot newIdentifierName Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), SimpleAsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newWhenClause = DirectCast(Visit(node.WhenClause), CatchFilterClauseSyntax)
            If node.WhenClause IsNot newWhenClause Then anyChanges = True

            If anyChanges Then
                Return New CatchStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newCatchKeyword, newIdentifierName, newAsClause, newWhenClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCatchFilterClause(ByVal node As CatchFilterClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWhenKeyword = DirectCast(VisitToken(node.WhenKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WhenKeyword.Node IsNot newWhenKeyword Then anyChanges = True
            Dim newFilter = DirectCast(Visit(node.Filter), ExpressionSyntax)
            If node.Filter IsNot newFilter Then anyChanges = True

            If anyChanges Then
                Return New CatchFilterClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWhenKeyword, newFilter)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitFinallyStatement(ByVal node As FinallyStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newFinallyKeyword = DirectCast(VisitToken(node.FinallyKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.FinallyKeyword.Node IsNot newFinallyKeyword Then anyChanges = True

            If anyChanges Then
                Return New FinallyStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newFinallyKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitErrorStatement(ByVal node As ErrorStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newErrorKeyword = DirectCast(VisitToken(node.ErrorKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ErrorKeyword.Node IsNot newErrorKeyword Then anyChanges = True
            Dim newErrorNumber = DirectCast(Visit(node.ErrorNumber), ExpressionSyntax)
            If node.ErrorNumber IsNot newErrorNumber Then anyChanges = True

            If anyChanges Then
                Return New ErrorStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newErrorKeyword, newErrorNumber)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOnErrorGoToStatement(ByVal node As OnErrorGoToStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOnKeyword = DirectCast(VisitToken(node.OnKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OnKeyword.Node IsNot newOnKeyword Then anyChanges = True
            Dim newErrorKeyword = DirectCast(VisitToken(node.ErrorKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ErrorKeyword.Node IsNot newErrorKeyword Then anyChanges = True
            Dim newGoToKeyword = DirectCast(VisitToken(node.GoToKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GoToKeyword.Node IsNot newGoToKeyword Then anyChanges = True
            Dim newMinus = DirectCast(VisitToken(node.Minus).Node, InternalSyntax.PunctuationSyntax)
            If node.Minus.Node IsNot newMinus Then anyChanges = True
            Dim newLabel = DirectCast(Visit(node.Label), LabelSyntax)
            If node.Label IsNot newLabel Then anyChanges = True

            If anyChanges Then
                Return New OnErrorGoToStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOnKeyword, newErrorKeyword, newGoToKeyword, newMinus, newLabel)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOnErrorResumeNextStatement(ByVal node As OnErrorResumeNextStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOnKeyword = DirectCast(VisitToken(node.OnKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OnKeyword.Node IsNot newOnKeyword Then anyChanges = True
            Dim newErrorKeyword = DirectCast(VisitToken(node.ErrorKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ErrorKeyword.Node IsNot newErrorKeyword Then anyChanges = True
            Dim newResumeKeyword = DirectCast(VisitToken(node.ResumeKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ResumeKeyword.Node IsNot newResumeKeyword Then anyChanges = True
            Dim newNextKeyword = DirectCast(VisitToken(node.NextKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NextKeyword.Node IsNot newNextKeyword Then anyChanges = True

            If anyChanges Then
                Return New OnErrorResumeNextStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOnKeyword, newErrorKeyword, newResumeKeyword, newNextKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitResumeStatement(ByVal node As ResumeStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newResumeKeyword = DirectCast(VisitToken(node.ResumeKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ResumeKeyword.Node IsNot newResumeKeyword Then anyChanges = True
            Dim newLabel = DirectCast(Visit(node.Label), LabelSyntax)
            If node.Label IsNot newLabel Then anyChanges = True

            If anyChanges Then
                Return New ResumeStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newResumeKeyword, newLabel)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSelectBlock(ByVal node As SelectBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), SelectStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newCaseBlocks = VisitList(node.CaseBlocks)
            If node._caseBlocks IsNot newCaseBlocks.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New SelectBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newCaseBlocks.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSelectStatement(ByVal node As SelectStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newSelectKeyword = DirectCast(VisitToken(node.SelectKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.SelectKeyword.Node IsNot newSelectKeyword Then anyChanges = True
            Dim newCaseKeyword = DirectCast(VisitToken(node.CaseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CaseKeyword.Node IsNot newCaseKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New SelectStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newSelectKeyword, newCaseKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseBlock(ByVal node As CaseBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), CaseStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True

            If anyChanges Then
                Return New CaseBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseStatement(ByVal node As CaseStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newCaseKeyword = DirectCast(VisitToken(node.CaseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CaseKeyword.Node IsNot newCaseKeyword Then anyChanges = True
            Dim newCases = VisitList(node.Cases)
            If node._cases IsNot newCases.Node Then anyChanges = True

            If anyChanges Then
                Return New CaseStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newCaseKeyword, newCases.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseElseClause(ByVal node As CaseElseClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newElseKeyword = DirectCast(VisitToken(node.ElseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ElseKeyword.Node IsNot newElseKeyword Then anyChanges = True

            If anyChanges Then
                Return New CaseElseClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newElseKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseValueClause(ByVal node As CaseValueClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newValue = DirectCast(Visit(node.Value), ExpressionSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New CaseValueClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseRangeClause(ByVal node As CaseRangeClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLowerBound = DirectCast(Visit(node.LowerBound), ExpressionSyntax)
            If node.LowerBound IsNot newLowerBound Then anyChanges = True
            Dim newToKeyword = DirectCast(VisitToken(node.ToKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ToKeyword.Node IsNot newToKeyword Then anyChanges = True
            Dim newUpperBound = DirectCast(Visit(node.UpperBound), ExpressionSyntax)
            If node.UpperBound IsNot newUpperBound Then anyChanges = True

            If anyChanges Then
                Return New CaseRangeClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLowerBound, newToKeyword, newUpperBound)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCaseRelationalClause(ByVal node As CaseRelationalClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIsKeyword = DirectCast(VisitToken(node.IsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IsKeyword.Node IsNot newIsKeyword Then anyChanges = True
            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newValue = DirectCast(Visit(node.Value), ExpressionSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New CaseRelationalClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIsKeyword, newOperatorToken, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSyncLockStatement(ByVal node As SyncLockStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newSyncLockKeyword = DirectCast(VisitToken(node.SyncLockKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.SyncLockKeyword.Node IsNot newSyncLockKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New SyncLockStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newSyncLockKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDoLoopBlock(ByVal node As DoLoopBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), DoStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), LoopStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New DoLoopBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDoStatement(ByVal node As DoStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newDoKeyword = DirectCast(VisitToken(node.DoKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.DoKeyword.Node IsNot newDoKeyword Then anyChanges = True
            Dim newWhileUntilClause = DirectCast(Visit(node.WhileUntilClause), WhileUntilClauseSyntax)
            If node.WhileUntilClause IsNot newWhileUntilClause Then anyChanges = True

            If anyChanges Then
                Return New DoStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newDoKeyword, newWhileUntilClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLoopStatement(ByVal node As LoopStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLoopKeyword = DirectCast(VisitToken(node.LoopKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.LoopKeyword.Node IsNot newLoopKeyword Then anyChanges = True
            Dim newWhileUntilClause = DirectCast(Visit(node.WhileUntilClause), WhileUntilClauseSyntax)
            If node.WhileUntilClause IsNot newWhileUntilClause Then anyChanges = True

            If anyChanges Then
                Return New LoopStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLoopKeyword, newWhileUntilClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWhileUntilClause(ByVal node As WhileUntilClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWhileOrUntilKeyword = DirectCast(VisitToken(node.WhileOrUntilKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WhileOrUntilKeyword.Node IsNot newWhileOrUntilKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True

            If anyChanges Then
                Return New WhileUntilClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWhileOrUntilKeyword, newCondition)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWhileStatement(ByVal node As WhileStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWhileKeyword = DirectCast(VisitToken(node.WhileKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WhileKeyword.Node IsNot newWhileKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True

            If anyChanges Then
                Return New WhileStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWhileKeyword, newCondition)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitForBlock(ByVal node As ForBlockSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), ExecutableStatementSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), NextStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New ForBlockSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitForStatement(ByVal node As ForStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newForKeyword = DirectCast(VisitToken(node.ForKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ForKeyword.Node IsNot newForKeyword Then anyChanges = True
            Dim newControlVariable = DirectCast(Visit(node.ControlVariable), SyntaxNode)
            If node.ControlVariable IsNot newControlVariable Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newFromValue = DirectCast(Visit(node.FromValue), ExpressionSyntax)
            If node.FromValue IsNot newFromValue Then anyChanges = True
            Dim newToKeyword = DirectCast(VisitToken(node.ToKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ToKeyword.Node IsNot newToKeyword Then anyChanges = True
            Dim newToValue = DirectCast(Visit(node.ToValue), ExpressionSyntax)
            If node.ToValue IsNot newToValue Then anyChanges = True
            Dim newStepClause = DirectCast(Visit(node.StepClause), ForStepClauseSyntax)
            If node.StepClause IsNot newStepClause Then anyChanges = True

            If anyChanges Then
                Return New ForStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newForKeyword, newControlVariable, newEqualsToken, newFromValue, newToKeyword, newToValue, newStepClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitForStepClause(ByVal node As ForStepClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newStepKeyword = DirectCast(VisitToken(node.StepKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.StepKeyword.Node IsNot newStepKeyword Then anyChanges = True
            Dim newStepValue = DirectCast(Visit(node.StepValue), ExpressionSyntax)
            If node.StepValue IsNot newStepValue Then anyChanges = True

            If anyChanges Then
                Return New ForStepClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newStepKeyword, newStepValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitForEachStatement(ByVal node As ForEachStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newForKeyword = DirectCast(VisitToken(node.ForKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ForKeyword.Node IsNot newForKeyword Then anyChanges = True
            Dim newEachKeyword = DirectCast(VisitToken(node.EachKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EachKeyword.Node IsNot newEachKeyword Then anyChanges = True
            Dim newControlVariable = DirectCast(Visit(node.ControlVariable), SyntaxNode)
            If node.ControlVariable IsNot newControlVariable Then anyChanges = True
            Dim newInKeyword = DirectCast(VisitToken(node.InKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.InKeyword.Node IsNot newInKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New ForEachStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newForKeyword, newEachKeyword, newControlVariable, newInKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNextStatement(ByVal node As NextStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNextKeyword = DirectCast(VisitToken(node.NextKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NextKeyword.Node IsNot newNextKeyword Then anyChanges = True
            Dim newControlVariables = VisitList(node.ControlVariables)
            If node._controlVariables IsNot newControlVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New NextStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNextKeyword, newControlVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitUsingStatement(ByVal node As UsingStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newUsingKeyword = DirectCast(VisitToken(node.UsingKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.UsingKeyword.Node IsNot newUsingKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newVariables = VisitList(node.Variables)
            If node._variables IsNot newVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New UsingStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newUsingKeyword, newExpression, newVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitThrowStatement(ByVal node As ThrowStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newThrowKeyword = DirectCast(VisitToken(node.ThrowKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ThrowKeyword.Node IsNot newThrowKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New ThrowStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newThrowKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAssignmentStatement(ByVal node As AssignmentStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLeft = DirectCast(Visit(node.Left), ExpressionSyntax)
            If node.Left IsNot newLeft Then anyChanges = True
            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newRight = DirectCast(Visit(node.Right), ExpressionSyntax)
            If node.Right IsNot newRight Then anyChanges = True

            If anyChanges Then
                Return New AssignmentStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLeft, newOperatorToken, newRight)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCallStatement(ByVal node As CallStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newCallKeyword = DirectCast(VisitToken(node.CallKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.CallKeyword.Node IsNot newCallKeyword Then anyChanges = True
            Dim newInvocation = DirectCast(Visit(node.Invocation), ExpressionSyntax)
            If node.Invocation IsNot newInvocation Then anyChanges = True

            If anyChanges Then
                Return New CallStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newCallKeyword, newInvocation)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAddRemoveHandlerStatement(ByVal node As AddRemoveHandlerStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAddHandlerOrRemoveHandlerKeyword = DirectCast(VisitToken(node.AddHandlerOrRemoveHandlerKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AddHandlerOrRemoveHandlerKeyword.Node IsNot newAddHandlerOrRemoveHandlerKeyword Then anyChanges = True
            Dim newEventExpression = DirectCast(Visit(node.EventExpression), ExpressionSyntax)
            If node.EventExpression IsNot newEventExpression Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newDelegateExpression = DirectCast(Visit(node.DelegateExpression), ExpressionSyntax)
            If node.DelegateExpression IsNot newDelegateExpression Then anyChanges = True

            If anyChanges Then
                Return New AddRemoveHandlerStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAddHandlerOrRemoveHandlerKeyword, newEventExpression, newCommaToken, newDelegateExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitRaiseEventStatement(ByVal node As RaiseEventStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newRaiseEventKeyword = DirectCast(VisitToken(node.RaiseEventKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.RaiseEventKeyword.Node IsNot newRaiseEventKeyword Then anyChanges = True
            Dim newIdentifier = DirectCast(Visit(node.Identifier), IdentifierNameSyntax)
            If node.Identifier IsNot newIdentifier Then anyChanges = True
            Dim newArgumentList = DirectCast(Visit(node.ArgumentList), ArgumentListSyntax)
            If node.ArgumentList IsNot newArgumentList Then anyChanges = True

            If anyChanges Then
                Return New RaiseEventStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newRaiseEventKeyword, newIdentifier, newArgumentList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWithStatement(ByVal node As WithStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWithKeyword = DirectCast(VisitToken(node.WithKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WithKeyword.Node IsNot newWithKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New WithStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWithKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitReDimStatement(ByVal node As ReDimStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newReDimKeyword = DirectCast(VisitToken(node.ReDimKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ReDimKeyword.Node IsNot newReDimKeyword Then anyChanges = True
            Dim newPreserveKeyword = DirectCast(VisitToken(node.PreserveKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.PreserveKeyword.Node IsNot newPreserveKeyword Then anyChanges = True
            Dim newClauses = VisitList(node.Clauses)
            If node._clauses IsNot newClauses.Node Then anyChanges = True

            If anyChanges Then
                Return New ReDimStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newReDimKeyword, newPreserveKeyword, newClauses.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEraseStatement(ByVal node As EraseStatementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEraseKeyword = DirectCast(VisitToken(node.EraseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EraseKeyword.Node IsNot newEraseKeyword Then anyChanges = True
            Dim newExpressions = VisitList(node.Expressions)
            If node._expressions IsNot newExpressions.Node Then anyChanges = True

            If anyChanges Then
                Return New EraseStatementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEraseKeyword, newExpressions.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLiteralExpression(ByVal node As LiteralExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newToken = DirectCast(VisitToken(node.Token).Node, InternalSyntax.SyntaxToken)
            If node.Token.Node IsNot newToken Then anyChanges = True

            If anyChanges Then
                Return New LiteralExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitParenthesizedExpression(ByVal node As ParenthesizedExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ParenthesizedExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newExpression, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMeExpression(ByVal node As MeExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True

            If anyChanges Then
                Return New MeExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMyBaseExpression(ByVal node As MyBaseExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True

            If anyChanges Then
                Return New MyBaseExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMyClassExpression(ByVal node As MyClassExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True

            If anyChanges Then
                Return New MyClassExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGetTypeExpression(ByVal node As GetTypeExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGetTypeKeyword = DirectCast(VisitToken(node.GetTypeKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GetTypeKeyword.Node IsNot newGetTypeKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New GetTypeExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGetTypeKeyword, newOpenParenToken, newType, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeOfExpression(ByVal node As TypeOfExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTypeOfKeyword = DirectCast(VisitToken(node.TypeOfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.TypeOfKeyword.Node IsNot newTypeOfKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.KeywordSyntax)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True

            If anyChanges Then
                Return New TypeOfExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTypeOfKeyword, newExpression, newOperatorToken, newType)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGetXmlNamespaceExpression(ByVal node As GetXmlNamespaceExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGetXmlNamespaceKeyword = DirectCast(VisitToken(node.GetXmlNamespaceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GetXmlNamespaceKeyword.Node IsNot newGetXmlNamespaceKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.XmlNameTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New GetXmlNamespaceExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGetXmlNamespaceKeyword, newOpenParenToken, newName, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMemberAccessExpression(ByVal node As MemberAccessExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), SimpleNameSyntax)
            If node.Name IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New MemberAccessExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newExpression, newOperatorToken, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlMemberAccessExpression(ByVal node As XmlMemberAccessExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBase = DirectCast(Visit(node.Base), ExpressionSyntax)
            If node.Base IsNot newBase Then anyChanges = True
            Dim newToken1 = DirectCast(VisitToken(node.Token1).Node, InternalSyntax.PunctuationSyntax)
            If node.Token1.Node IsNot newToken1 Then anyChanges = True
            Dim newToken2 = DirectCast(VisitToken(node.Token2).Node, InternalSyntax.PunctuationSyntax)
            If node.Token2.Node IsNot newToken2 Then anyChanges = True
            Dim newToken3 = DirectCast(VisitToken(node.Token3).Node, InternalSyntax.PunctuationSyntax)
            If node.Token3.Node IsNot newToken3 Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), XmlNodeSyntax)
            If node.Name IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New XmlMemberAccessExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBase, newToken1, newToken2, newToken3, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitInvocationExpression(ByVal node As InvocationExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newArgumentList = DirectCast(Visit(node.ArgumentList), ArgumentListSyntax)
            If node.ArgumentList IsNot newArgumentList Then anyChanges = True

            If anyChanges Then
                Return New InvocationExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newExpression, newArgumentList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitObjectCreationExpression(ByVal node As ObjectCreationExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNewKeyword = DirectCast(VisitToken(node.NewKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NewKeyword.Node IsNot newNewKeyword Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newArgumentList = DirectCast(Visit(node.ArgumentList), ArgumentListSyntax)
            If node.ArgumentList IsNot newArgumentList Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), ObjectCreationInitializerSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New ObjectCreationExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNewKeyword, newAttributes.Node, newType, newArgumentList, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAnonymousObjectCreationExpression(ByVal node As AnonymousObjectCreationExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNewKeyword = DirectCast(VisitToken(node.NewKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NewKeyword.Node IsNot newNewKeyword Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), ObjectMemberInitializerSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New AnonymousObjectCreationExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNewKeyword, newAttributes.Node, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitArrayCreationExpression(ByVal node As ArrayCreationExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNewKeyword = DirectCast(VisitToken(node.NewKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.NewKeyword.Node IsNot newNewKeyword Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newArrayBounds = DirectCast(Visit(node.ArrayBounds), ArgumentListSyntax)
            If node.ArrayBounds IsNot newArrayBounds Then anyChanges = True
            Dim newRankSpecifiers = VisitList(node.RankSpecifiers)
            If node._rankSpecifiers IsNot newRankSpecifiers.Node Then anyChanges = True
            Dim newInitializer = DirectCast(Visit(node.Initializer), CollectionInitializerSyntax)
            If node.Initializer IsNot newInitializer Then anyChanges = True

            If anyChanges Then
                Return New ArrayCreationExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNewKeyword, newAttributes.Node, newType, newArrayBounds, newRankSpecifiers.Node, newInitializer)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCollectionInitializer(ByVal node As CollectionInitializerSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenBraceToken = DirectCast(VisitToken(node.OpenBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenBraceToken.Node IsNot newOpenBraceToken Then anyChanges = True
            Dim newInitializers = VisitList(node.Initializers)
            If node._initializers IsNot newInitializers.Node Then anyChanges = True
            Dim newCloseBraceToken = DirectCast(VisitToken(node.CloseBraceToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseBraceToken.Node IsNot newCloseBraceToken Then anyChanges = True

            If anyChanges Then
                Return New CollectionInitializerSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenBraceToken, newInitializers.Node, newCloseBraceToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCTypeExpression(ByVal node As CTypeExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New CTypeExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword, newOpenParenToken, newExpression, newCommaToken, newType, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDirectCastExpression(ByVal node As DirectCastExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New DirectCastExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword, newOpenParenToken, newExpression, newCommaToken, newType, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTryCastExpression(ByVal node As TryCastExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newType = DirectCast(Visit(node.Type), TypeSyntax)
            If node.Type IsNot newType Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New TryCastExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword, newOpenParenToken, newExpression, newCommaToken, newType, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPredefinedCastExpression(ByVal node As PredefinedCastExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New PredefinedCastExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword, newOpenParenToken, newExpression, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitBinaryExpression(ByVal node As BinaryExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLeft = DirectCast(Visit(node.Left), ExpressionSyntax)
            If node.Left IsNot newLeft Then anyChanges = True
            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.SyntaxToken)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newRight = DirectCast(Visit(node.Right), ExpressionSyntax)
            If node.Right IsNot newRight Then anyChanges = True

            If anyChanges Then
                Return New BinaryExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLeft, newOperatorToken, newRight)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitUnaryExpression(ByVal node As UnaryExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOperatorToken = DirectCast(VisitToken(node.OperatorToken).Node, InternalSyntax.SyntaxToken)
            If node.OperatorToken.Node IsNot newOperatorToken Then anyChanges = True
            Dim newOperand = DirectCast(Visit(node.Operand), ExpressionSyntax)
            If node.Operand IsNot newOperand Then anyChanges = True

            If anyChanges Then
                Return New UnaryExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOperatorToken, newOperand)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitBinaryConditionalExpression(ByVal node As BinaryConditionalExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIfKeyword = DirectCast(VisitToken(node.IfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IfKeyword.Node IsNot newIfKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newFirstExpression = DirectCast(Visit(node.FirstExpression), ExpressionSyntax)
            If node.FirstExpression IsNot newFirstExpression Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newSecondExpression = DirectCast(Visit(node.SecondExpression), ExpressionSyntax)
            If node.SecondExpression IsNot newSecondExpression Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New BinaryConditionalExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIfKeyword, newOpenParenToken, newFirstExpression, newCommaToken, newSecondExpression, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTernaryConditionalExpression(ByVal node As TernaryConditionalExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIfKeyword = DirectCast(VisitToken(node.IfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IfKeyword.Node IsNot newIfKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True
            Dim newFirstCommaToken = DirectCast(VisitToken(node.FirstCommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.FirstCommaToken.Node IsNot newFirstCommaToken Then anyChanges = True
            Dim newWhenTrue = DirectCast(Visit(node.WhenTrue), ExpressionSyntax)
            If node.WhenTrue IsNot newWhenTrue Then anyChanges = True
            Dim newSecondCommaToken = DirectCast(VisitToken(node.SecondCommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.SecondCommaToken.Node IsNot newSecondCommaToken Then anyChanges = True
            Dim newWhenFalse = DirectCast(Visit(node.WhenFalse), ExpressionSyntax)
            If node.WhenFalse IsNot newWhenFalse Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New TernaryConditionalExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIfKeyword, newOpenParenToken, newCondition, newFirstCommaToken, newWhenTrue, newSecondCommaToken, newWhenFalse, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSingleLineLambdaExpression(ByVal node As SingleLineLambdaExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), LambdaHeaderSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newBody = DirectCast(Visit(node.Body), SyntaxNode)
            If node.Body IsNot newBody Then anyChanges = True

            If anyChanges Then
                Return New SingleLineLambdaExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newBody)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitMultiLineLambdaExpression(ByVal node As MultiLineLambdaExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBegin = DirectCast(Visit(node.Begin), LambdaHeaderSyntax)
            If node.Begin IsNot newBegin Then anyChanges = True
            Dim newBeginTerminator = DirectCast(VisitToken(node.BeginTerminator).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginTerminator.Node IsNot newBeginTerminator Then anyChanges = True
            Dim newStatements = VisitList(node.Statements)
            If node._statements IsNot newStatements.Node Then anyChanges = True
            Dim newEnd = DirectCast(Visit(node.[End]), EndBlockStatementSyntax)
            If node.[End] IsNot newEnd Then anyChanges = True

            If anyChanges Then
                Return New MultiLineLambdaExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBegin, newBeginTerminator, newStatements.Node, newEnd)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLambdaHeader(ByVal node As LambdaHeaderSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newModifiers = VisitList(node.Modifiers)
            If node.Modifiers.Node IsNot newModifiers.Node Then anyChanges = True
            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True
            Dim newParameterList = DirectCast(Visit(node.ParameterList), ParameterListSyntax)
            If node.ParameterList IsNot newParameterList Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), AsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True

            If anyChanges Then
                Return New LambdaHeaderSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAttributes.Node, newModifiers.Node, newKeyword, newParameterList, newAsClause)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitArgumentList(ByVal node As ArgumentListSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newArguments = VisitList(node.Arguments)
            If node._arguments IsNot newArguments.Node Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ArgumentListSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newArguments.Node, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOmittedArgument(ByVal node As OmittedArgumentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newEmpty = DirectCast(VisitToken(node.Empty).Node, InternalSyntax.PunctuationSyntax)
            If node.Empty.Node IsNot newEmpty Then anyChanges = True

            If anyChanges Then
                Return New OmittedArgumentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newEmpty)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSimpleArgument(ByVal node As SimpleArgumentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New SimpleArgumentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNamedArgument(ByVal node As NamedArgumentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifierName = DirectCast(Visit(node.IdentifierName), IdentifierNameSyntax)
            If node.IdentifierName IsNot newIdentifierName Then anyChanges = True
            Dim newColonEqualsToken = DirectCast(VisitToken(node.ColonEqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.ColonEqualsToken.Node IsNot newColonEqualsToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New NamedArgumentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifierName, newColonEqualsToken, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitRangeArgument(ByVal node As RangeArgumentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLowerBound = DirectCast(Visit(node.LowerBound), ExpressionSyntax)
            If node.LowerBound IsNot newLowerBound Then anyChanges = True
            Dim newToKeyword = DirectCast(VisitToken(node.ToKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ToKeyword.Node IsNot newToKeyword Then anyChanges = True
            Dim newUpperBound = DirectCast(Visit(node.UpperBound), ExpressionSyntax)
            If node.UpperBound IsNot newUpperBound Then anyChanges = True

            If anyChanges Then
                Return New RangeArgumentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLowerBound, newToKeyword, newUpperBound)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitQueryExpression(ByVal node As QueryExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newClauses = VisitList(node.Clauses)
            If node._clauses IsNot newClauses.Node Then anyChanges = True

            If anyChanges Then
                Return New QueryExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newClauses.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitCollectionRangeVariable(ByVal node As CollectionRangeVariableSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifier = DirectCast(Visit(node.Identifier), ModifiedIdentifierSyntax)
            If node.Identifier IsNot newIdentifier Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), SimpleAsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newInKeyword = DirectCast(VisitToken(node.InKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.InKeyword.Node IsNot newInKeyword Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New CollectionRangeVariableSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifier, newAsClause, newInKeyword, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitExpressionRangeVariable(ByVal node As ExpressionRangeVariableSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNameEquals = DirectCast(Visit(node.NameEquals), VariableNameEqualsSyntax)
            If node.NameEquals IsNot newNameEquals Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True

            If anyChanges Then
                Return New ExpressionRangeVariableSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNameEquals, newExpression)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAggregationRangeVariable(ByVal node As AggregationRangeVariableSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newNameEquals = DirectCast(Visit(node.NameEquals), VariableNameEqualsSyntax)
            If node.NameEquals IsNot newNameEquals Then anyChanges = True
            Dim newAggregation = DirectCast(Visit(node.Aggregation), AggregationSyntax)
            If node.Aggregation IsNot newAggregation Then anyChanges = True

            If anyChanges Then
                Return New AggregationRangeVariableSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newNameEquals, newAggregation)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitVariableNameEquals(ByVal node As VariableNameEqualsSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifier = DirectCast(Visit(node.Identifier), ModifiedIdentifierSyntax)
            If node.Identifier IsNot newIdentifier Then anyChanges = True
            Dim newAsClause = DirectCast(Visit(node.AsClause), SimpleAsClauseSyntax)
            If node.AsClause IsNot newAsClause Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True

            If anyChanges Then
                Return New VariableNameEqualsSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifier, newAsClause, newEqualsToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitFunctionAggregation(ByVal node As FunctionAggregationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newFunctionName = DirectCast(VisitToken(node.FunctionName).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.FunctionName.Node IsNot newFunctionName Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newArgument = DirectCast(Visit(node.Argument), ExpressionSyntax)
            If node.Argument IsNot newArgument Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New FunctionAggregationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newFunctionName, newOpenParenToken, newArgument, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGroupAggregation(ByVal node As GroupAggregationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGroupKeyword = DirectCast(VisitToken(node.GroupKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GroupKeyword.Node IsNot newGroupKeyword Then anyChanges = True

            If anyChanges Then
                Return New GroupAggregationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGroupKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitFromClause(ByVal node As FromClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newFromKeyword = DirectCast(VisitToken(node.FromKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.FromKeyword.Node IsNot newFromKeyword Then anyChanges = True
            Dim newVariables = VisitList(node.Variables)
            If node._variables IsNot newVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New FromClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newFromKeyword, newVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitLetClause(ByVal node As LetClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLetKeyword = DirectCast(VisitToken(node.LetKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.LetKeyword.Node IsNot newLetKeyword Then anyChanges = True
            Dim newVariables = VisitList(node.Variables)
            If node._variables IsNot newVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New LetClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLetKeyword, newVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitAggregateClause(ByVal node As AggregateClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newAggregateKeyword = DirectCast(VisitToken(node.AggregateKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AggregateKeyword.Node IsNot newAggregateKeyword Then anyChanges = True
            Dim newVariables = VisitList(node.Variables)
            If node._variables IsNot newVariables.Node Then anyChanges = True
            Dim newAdditionalQueryOperators = VisitList(node.AdditionalQueryOperators)
            If node._additionalQueryOperators IsNot newAdditionalQueryOperators.Node Then anyChanges = True
            Dim newIntoKeyword = DirectCast(VisitToken(node.IntoKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IntoKeyword.Node IsNot newIntoKeyword Then anyChanges = True
            Dim newAggregationVariables = VisitList(node.AggregationVariables)
            If node._aggregationVariables IsNot newAggregationVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New AggregateClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newAggregateKeyword, newVariables.Node, newAdditionalQueryOperators.Node, newIntoKeyword, newAggregationVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDistinctClause(ByVal node As DistinctClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newDistinctKeyword = DirectCast(VisitToken(node.DistinctKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.DistinctKeyword.Node IsNot newDistinctKeyword Then anyChanges = True

            If anyChanges Then
                Return New DistinctClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newDistinctKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitWhereClause(ByVal node As WhereClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newWhereKeyword = DirectCast(VisitToken(node.WhereKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WhereKeyword.Node IsNot newWhereKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True

            If anyChanges Then
                Return New WhereClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newWhereKeyword, newCondition)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPartitionWhileClause(ByVal node As PartitionWhileClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newSkipOrTakeKeyword = DirectCast(VisitToken(node.SkipOrTakeKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.SkipOrTakeKeyword.Node IsNot newSkipOrTakeKeyword Then anyChanges = True
            Dim newWhileKeyword = DirectCast(VisitToken(node.WhileKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.WhileKeyword.Node IsNot newWhileKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True

            If anyChanges Then
                Return New PartitionWhileClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newSkipOrTakeKeyword, newWhileKeyword, newCondition)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPartitionClause(ByVal node As PartitionClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newSkipOrTakeKeyword = DirectCast(VisitToken(node.SkipOrTakeKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.SkipOrTakeKeyword.Node IsNot newSkipOrTakeKeyword Then anyChanges = True
            Dim newCount = DirectCast(Visit(node.Count), ExpressionSyntax)
            If node.Count IsNot newCount Then anyChanges = True

            If anyChanges Then
                Return New PartitionClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newSkipOrTakeKeyword, newCount)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGroupByClause(ByVal node As GroupByClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGroupKeyword = DirectCast(VisitToken(node.GroupKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GroupKeyword.Node IsNot newGroupKeyword Then anyChanges = True
            Dim newItems = VisitList(node.Items)
            If node._items IsNot newItems.Node Then anyChanges = True
            Dim newByKeyword = DirectCast(VisitToken(node.ByKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ByKeyword.Node IsNot newByKeyword Then anyChanges = True
            Dim newKeys = VisitList(node.Keys)
            If node._keys IsNot newKeys.Node Then anyChanges = True
            Dim newIntoKeyword = DirectCast(VisitToken(node.IntoKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IntoKeyword.Node IsNot newIntoKeyword Then anyChanges = True
            Dim newAggregationVariables = VisitList(node.AggregationVariables)
            If node._aggregationVariables IsNot newAggregationVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New GroupByClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGroupKeyword, newItems.Node, newByKeyword, newKeys.Node, newIntoKeyword, newAggregationVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitJoinClause(ByVal node As JoinClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newJoinKeyword = DirectCast(VisitToken(node.JoinKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.JoinKeyword.Node IsNot newJoinKeyword Then anyChanges = True
            Dim newJoinedVariables = VisitList(node.JoinedVariables)
            If node._joinedVariables IsNot newJoinedVariables.Node Then anyChanges = True
            Dim newAdditionalJoins = VisitList(node.AdditionalJoins)
            If node._additionalJoins IsNot newAdditionalJoins.Node Then anyChanges = True
            Dim newOnKeyword = DirectCast(VisitToken(node.OnKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OnKeyword.Node IsNot newOnKeyword Then anyChanges = True
            Dim newJoinConditions = VisitList(node.JoinConditions)
            If node._joinConditions IsNot newJoinConditions.Node Then anyChanges = True

            If anyChanges Then
                Return New JoinClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newJoinKeyword, newJoinedVariables.Node, newAdditionalJoins.Node, newOnKeyword, newJoinConditions.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitJoinCondition(ByVal node As JoinConditionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLeft = DirectCast(Visit(node.Left), ExpressionSyntax)
            If node.Left IsNot newLeft Then anyChanges = True
            Dim newEqualsKeyword = DirectCast(VisitToken(node.EqualsKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EqualsKeyword.Node IsNot newEqualsKeyword Then anyChanges = True
            Dim newRight = DirectCast(Visit(node.Right), ExpressionSyntax)
            If node.Right IsNot newRight Then anyChanges = True

            If anyChanges Then
                Return New JoinConditionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLeft, newEqualsKeyword, newRight)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGroupJoinClause(ByVal node As GroupJoinClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGroupKeyword = DirectCast(VisitToken(node.GroupKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GroupKeyword.Node IsNot newGroupKeyword Then anyChanges = True
            Dim newJoinKeyword = DirectCast(VisitToken(node.JoinKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.JoinKeyword.Node IsNot newJoinKeyword Then anyChanges = True
            Dim newJoinedVariables = VisitList(node.JoinedVariables)
            If node._joinedVariables IsNot newJoinedVariables.Node Then anyChanges = True
            Dim newAdditionalJoins = VisitList(node.AdditionalJoins)
            If node._additionalJoins IsNot newAdditionalJoins.Node Then anyChanges = True
            Dim newOnKeyword = DirectCast(VisitToken(node.OnKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OnKeyword.Node IsNot newOnKeyword Then anyChanges = True
            Dim newJoinConditions = VisitList(node.JoinConditions)
            If node._joinConditions IsNot newJoinConditions.Node Then anyChanges = True
            Dim newIntoKeyword = DirectCast(VisitToken(node.IntoKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IntoKeyword.Node IsNot newIntoKeyword Then anyChanges = True
            Dim newAggregationVariables = VisitList(node.AggregationVariables)
            If node._aggregationVariables IsNot newAggregationVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New GroupJoinClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGroupKeyword, newJoinKeyword, newJoinedVariables.Node, newAdditionalJoins.Node, newOnKeyword, newJoinConditions.Node, newIntoKeyword, newAggregationVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOrderByClause(ByVal node As OrderByClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOrderKeyword = DirectCast(VisitToken(node.OrderKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OrderKeyword.Node IsNot newOrderKeyword Then anyChanges = True
            Dim newByKeyword = DirectCast(VisitToken(node.ByKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ByKeyword.Node IsNot newByKeyword Then anyChanges = True
            Dim newOrderings = VisitList(node.Orderings)
            If node._orderings IsNot newOrderings.Node Then anyChanges = True

            If anyChanges Then
                Return New OrderByClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOrderKeyword, newByKeyword, newOrderings.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitOrdering(ByVal node As OrderingSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newAscendingOrDescendingKeyword = DirectCast(VisitToken(node.AscendingOrDescendingKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.AscendingOrDescendingKeyword.Node IsNot newAscendingOrDescendingKeyword Then anyChanges = True

            If anyChanges Then
                Return New OrderingSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newExpression, newAscendingOrDescendingKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSelectClause(ByVal node As SelectClauseSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newSelectKeyword = DirectCast(VisitToken(node.SelectKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.SelectKeyword.Node IsNot newSelectKeyword Then anyChanges = True
            Dim newVariables = VisitList(node.Variables)
            If node._variables IsNot newVariables.Node Then anyChanges = True

            If anyChanges Then
                Return New SelectClauseSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newSelectKeyword, newVariables.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlDocument(ByVal node As XmlDocumentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newDeclaration = DirectCast(Visit(node.Declaration), XmlDeclarationSyntax)
            If node.Declaration IsNot newDeclaration Then anyChanges = True
            Dim newPrecedingMisc = VisitList(node.PrecedingMisc)
            If node._precedingMisc IsNot newPrecedingMisc.Node Then anyChanges = True
            Dim newRoot = DirectCast(Visit(node.Root), XmlNodeSyntax)
            If node.Root IsNot newRoot Then anyChanges = True
            Dim newFollowingMisc = VisitList(node.FollowingMisc)
            If node._followingMisc IsNot newFollowingMisc.Node Then anyChanges = True

            If anyChanges Then
                Return New XmlDocumentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newDeclaration, newPrecedingMisc.Node, newRoot, newFollowingMisc.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlDeclaration(ByVal node As XmlDeclarationSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanQuestionToken = DirectCast(VisitToken(node.LessThanQuestionToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanQuestionToken.Node IsNot newLessThanQuestionToken Then anyChanges = True
            Dim newXmlKeyword = DirectCast(VisitToken(node.XmlKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.XmlKeyword.Node IsNot newXmlKeyword Then anyChanges = True
            Dim newVersion = DirectCast(Visit(node.Version), XmlDeclarationOptionSyntax)
            If node.Version IsNot newVersion Then anyChanges = True
            Dim newEncoding = DirectCast(Visit(node.Encoding), XmlDeclarationOptionSyntax)
            If node.Encoding IsNot newEncoding Then anyChanges = True
            Dim newStandalone = DirectCast(Visit(node.Standalone), XmlDeclarationOptionSyntax)
            If node.Standalone IsNot newStandalone Then anyChanges = True
            Dim newQuestionGreaterThanToken = DirectCast(VisitToken(node.QuestionGreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.QuestionGreaterThanToken.Node IsNot newQuestionGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlDeclarationSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanQuestionToken, newXmlKeyword, newVersion, newEncoding, newStandalone, newQuestionGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlDeclarationOption(ByVal node As XmlDeclarationOptionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.XmlNameTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True
            Dim newEquals = DirectCast(VisitToken(node.Equals).Node, InternalSyntax.PunctuationSyntax)
            If node.Equals.Node IsNot newEquals Then anyChanges = True
            Dim newValue = DirectCast(Visit(node.Value), XmlStringSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New XmlDeclarationOptionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newName, newEquals, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlElement(ByVal node As XmlElementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newStartTag = DirectCast(Visit(node.StartTag), XmlElementStartTagSyntax)
            If node.StartTag IsNot newStartTag Then anyChanges = True
            Dim newContent = VisitList(node.Content)
            If node._content IsNot newContent.Node Then anyChanges = True
            Dim newEndTag = DirectCast(Visit(node.EndTag), XmlElementEndTagSyntax)
            If node.EndTag IsNot newEndTag Then anyChanges = True

            If anyChanges Then
                Return New XmlElementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newStartTag, newContent.Node, newEndTag)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlText(ByVal node As XmlTextSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTextTokens = VisitList(node.TextTokens)
            If node.TextTokens.Node IsNot newTextTokens.Node Then anyChanges = True

            If anyChanges Then
                Return New XmlTextSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTextTokens.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlElementStartTag(ByVal node As XmlElementStartTagSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanToken = DirectCast(VisitToken(node.LessThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanToken.Node IsNot newLessThanToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), XmlNodeSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newGreaterThanToken = DirectCast(VisitToken(node.GreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.GreaterThanToken.Node IsNot newGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlElementStartTagSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanToken, newName, newAttributes.Node, newGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlElementEndTag(ByVal node As XmlElementEndTagSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanSlashToken = DirectCast(VisitToken(node.LessThanSlashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanSlashToken.Node IsNot newLessThanSlashToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), XmlNameSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newGreaterThanToken = DirectCast(VisitToken(node.GreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.GreaterThanToken.Node IsNot newGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlElementEndTagSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanSlashToken, newName, newGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlEmptyElement(ByVal node As XmlEmptyElementSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanToken = DirectCast(VisitToken(node.LessThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanToken.Node IsNot newLessThanToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), XmlNodeSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newAttributes = VisitList(node.Attributes)
            If node._attributes IsNot newAttributes.Node Then anyChanges = True
            Dim newSlashGreaterThanToken = DirectCast(VisitToken(node.SlashGreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.SlashGreaterThanToken.Node IsNot newSlashGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlEmptyElementSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanToken, newName, newAttributes.Node, newSlashGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlAttribute(ByVal node As XmlAttributeSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newName = DirectCast(Visit(node.Name), XmlNodeSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newValue = DirectCast(Visit(node.Value), XmlNodeSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New XmlAttributeSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newName, newEqualsToken, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlString(ByVal node As XmlStringSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newStartQuoteToken = DirectCast(VisitToken(node.StartQuoteToken).Node, InternalSyntax.PunctuationSyntax)
            If node.StartQuoteToken.Node IsNot newStartQuoteToken Then anyChanges = True
            Dim newTextTokens = VisitList(node.TextTokens)
            If node.TextTokens.Node IsNot newTextTokens.Node Then anyChanges = True
            Dim newEndQuoteToken = DirectCast(VisitToken(node.EndQuoteToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EndQuoteToken.Node IsNot newEndQuoteToken Then anyChanges = True

            If anyChanges Then
                Return New XmlStringSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newStartQuoteToken, newTextTokens.Node, newEndQuoteToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlName(ByVal node As XmlNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newPrefix = DirectCast(Visit(node.Prefix), XmlPrefixSyntax)
            If node.Prefix IsNot newPrefix Then anyChanges = True
            Dim newLocalName = DirectCast(VisitToken(node.LocalName).Node, InternalSyntax.XmlNameTokenSyntax)
            If node.LocalName.Node IsNot newLocalName Then anyChanges = True

            If anyChanges Then
                Return New XmlNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newPrefix, newLocalName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlBracketedName(ByVal node As XmlBracketedNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanToken = DirectCast(VisitToken(node.LessThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanToken.Node IsNot newLessThanToken Then anyChanges = True
            Dim newName = DirectCast(Visit(node.Name), XmlNameSyntax)
            If node.Name IsNot newName Then anyChanges = True
            Dim newGreaterThanToken = DirectCast(VisitToken(node.GreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.GreaterThanToken.Node IsNot newGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlBracketedNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanToken, newName, newGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlPrefix(ByVal node As XmlPrefixSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.XmlNameTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True
            Dim newColonToken = DirectCast(VisitToken(node.ColonToken).Node, InternalSyntax.PunctuationSyntax)
            If node.ColonToken.Node IsNot newColonToken Then anyChanges = True

            If anyChanges Then
                Return New XmlPrefixSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newName, newColonToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlComment(ByVal node As XmlCommentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanMinusMinusToken = DirectCast(VisitToken(node.LessThanMinusMinusToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanMinusMinusToken.Node IsNot newLessThanMinusMinusToken Then anyChanges = True
            Dim newTextTokens = VisitList(node.TextTokens)
            If node.TextTokens.Node IsNot newTextTokens.Node Then anyChanges = True
            Dim newMinusMinusGreaterThanToken = DirectCast(VisitToken(node.MinusMinusGreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.MinusMinusGreaterThanToken.Node IsNot newMinusMinusGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlCommentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanMinusMinusToken, newTextTokens.Node, newMinusMinusGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlProcessingInstruction(ByVal node As XmlProcessingInstructionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanQuestionToken = DirectCast(VisitToken(node.LessThanQuestionToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanQuestionToken.Node IsNot newLessThanQuestionToken Then anyChanges = True
            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.XmlNameTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True
            Dim newTextTokens = VisitList(node.TextTokens)
            If node.TextTokens.Node IsNot newTextTokens.Node Then anyChanges = True
            Dim newQuestionGreaterThanToken = DirectCast(VisitToken(node.QuestionGreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.QuestionGreaterThanToken.Node IsNot newQuestionGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlProcessingInstructionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanQuestionToken, newName, newTextTokens.Node, newQuestionGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlCDataSection(ByVal node As XmlCDataSectionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newBeginCDataToken = DirectCast(VisitToken(node.BeginCDataToken).Node, InternalSyntax.PunctuationSyntax)
            If node.BeginCDataToken.Node IsNot newBeginCDataToken Then anyChanges = True
            Dim newTextTokens = VisitList(node.TextTokens)
            If node.TextTokens.Node IsNot newTextTokens.Node Then anyChanges = True
            Dim newEndCDataToken = DirectCast(VisitToken(node.EndCDataToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EndCDataToken.Node IsNot newEndCDataToken Then anyChanges = True

            If anyChanges Then
                Return New XmlCDataSectionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newBeginCDataToken, newTextTokens.Node, newEndCDataToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitXmlEmbeddedExpression(ByVal node As XmlEmbeddedExpressionSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLessThanPercentEqualsToken = DirectCast(VisitToken(node.LessThanPercentEqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.LessThanPercentEqualsToken.Node IsNot newLessThanPercentEqualsToken Then anyChanges = True
            Dim newExpression = DirectCast(Visit(node.Expression), ExpressionSyntax)
            If node.Expression IsNot newExpression Then anyChanges = True
            Dim newPercentGreaterThanToken = DirectCast(VisitToken(node.PercentGreaterThanToken).Node, InternalSyntax.PunctuationSyntax)
            If node.PercentGreaterThanToken.Node IsNot newPercentGreaterThanToken Then anyChanges = True

            If anyChanges Then
                Return New XmlEmbeddedExpressionSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLessThanPercentEqualsToken, newExpression, newPercentGreaterThanToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitArrayType(ByVal node As ArrayTypeSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newElementType = DirectCast(Visit(node.ElementType), TypeSyntax)
            If node.ElementType IsNot newElementType Then anyChanges = True
            Dim newRankSpecifiers = VisitList(node.RankSpecifiers)
            If node._rankSpecifiers IsNot newRankSpecifiers.Node Then anyChanges = True

            If anyChanges Then
                Return New ArrayTypeSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newElementType, newRankSpecifiers.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitNullableType(ByVal node As NullableTypeSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newElementType = DirectCast(Visit(node.ElementType), TypeSyntax)
            If node.ElementType IsNot newElementType Then anyChanges = True
            Dim newQuestionMarkToken = DirectCast(VisitToken(node.QuestionMarkToken).Node, InternalSyntax.PunctuationSyntax)
            If node.QuestionMarkToken.Node IsNot newQuestionMarkToken Then anyChanges = True

            If anyChanges Then
                Return New NullableTypeSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newElementType, newQuestionMarkToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitPredefinedType(ByVal node As PredefinedTypeSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newKeyword = DirectCast(VisitToken(node.Keyword).Node, InternalSyntax.KeywordSyntax)
            If node.Keyword.Node IsNot newKeyword Then anyChanges = True

            If anyChanges Then
                Return New PredefinedTypeSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitIdentifierName(ByVal node As IdentifierNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True

            If anyChanges Then
                Return New IdentifierNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifier)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGenericName(ByVal node As GenericNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newIdentifier = DirectCast(VisitToken(node.Identifier).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Identifier.Node IsNot newIdentifier Then anyChanges = True
            Dim newTypeArgumentList = DirectCast(Visit(node.TypeArgumentList), TypeArgumentListSyntax)
            If node.TypeArgumentList IsNot newTypeArgumentList Then anyChanges = True

            If anyChanges Then
                Return New GenericNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newIdentifier, newTypeArgumentList)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitQualifiedName(ByVal node As QualifiedNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newLeft = DirectCast(Visit(node.Left), NameSyntax)
            If node.Left IsNot newLeft Then anyChanges = True
            Dim newDotToken = DirectCast(VisitToken(node.DotToken).Node, InternalSyntax.PunctuationSyntax)
            If node.DotToken.Node IsNot newDotToken Then anyChanges = True
            Dim newRight = DirectCast(Visit(node.Right), SimpleNameSyntax)
            If node.Right IsNot newRight Then anyChanges = True

            If anyChanges Then
                Return New QualifiedNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newLeft, newDotToken, newRight)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitGlobalName(ByVal node As GlobalNameSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newGlobalKeyword = DirectCast(VisitToken(node.GlobalKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.GlobalKeyword.Node IsNot newGlobalKeyword Then anyChanges = True

            If anyChanges Then
                Return New GlobalNameSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newGlobalKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitTypeArgumentList(ByVal node As TypeArgumentListSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newOfKeyword = DirectCast(VisitToken(node.OfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.OfKeyword.Node IsNot newOfKeyword Then anyChanges = True
            Dim newArguments = VisitList(node.Arguments)
            If node._arguments IsNot newArguments.Node Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New TypeArgumentListSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newOpenParenToken, newOfKeyword, newArguments.Node, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitSkippedTokens(ByVal node As SkippedTokensSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newTokens = VisitList(node.Tokens)
            If node.Tokens.Node IsNot newTokens.Node Then anyChanges = True

            If anyChanges Then
                Return New SkippedTokensSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newTokens.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDocumentationComment(ByVal node As DocumentationCommentSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newContent = VisitList(node.Content)
            If node._content IsNot newContent.Node Then anyChanges = True

            If anyChanges Then
                Return New DocumentationCommentSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newContent.Node)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitDirective(ByVal node As DirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newDirective = DirectCast(Visit(node.Directive), DirectiveStatementSyntax)
            If node.Directive IsNot newDirective Then anyChanges = True
            Dim newTerminator = DirectCast(VisitToken(node.Terminator).Node, InternalSyntax.PunctuationSyntax)
            If node.Terminator.Node IsNot newTerminator Then anyChanges = True

            If anyChanges Then
                Return New DirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newDirective, newTerminator)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitConstDirective(ByVal node As ConstDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newConstKeyword = DirectCast(VisitToken(node.ConstKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ConstKeyword.Node IsNot newConstKeyword Then anyChanges = True
            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.IdentifierTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True
            Dim newEqualsToken = DirectCast(VisitToken(node.EqualsToken).Node, InternalSyntax.PunctuationSyntax)
            If node.EqualsToken.Node IsNot newEqualsToken Then anyChanges = True
            Dim newValue = DirectCast(Visit(node.Value), ExpressionSyntax)
            If node.Value IsNot newValue Then anyChanges = True

            If anyChanges Then
                Return New ConstDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newConstKeyword, newName, newEqualsToken, newValue)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitIfDirective(ByVal node As IfDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newElseKeyword = DirectCast(VisitToken(node.ElseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ElseKeyword.Node IsNot newElseKeyword Then anyChanges = True
            Dim newIfOrElseIfKeyword = DirectCast(VisitToken(node.IfOrElseIfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IfOrElseIfKeyword.Node IsNot newIfOrElseIfKeyword Then anyChanges = True
            Dim newCondition = DirectCast(Visit(node.Condition), ExpressionSyntax)
            If node.Condition IsNot newCondition Then anyChanges = True
            Dim newThenKeyword = DirectCast(VisitToken(node.ThenKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ThenKeyword.Node IsNot newThenKeyword Then anyChanges = True

            If anyChanges Then
                Return New IfDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newElseKeyword, newIfOrElseIfKeyword, newCondition, newThenKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitElseDirective(ByVal node As ElseDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newElseKeyword = DirectCast(VisitToken(node.ElseKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ElseKeyword.Node IsNot newElseKeyword Then anyChanges = True

            If anyChanges Then
                Return New ElseDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newElseKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEndIfDirective(ByVal node As EndIfDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newEndKeyword = DirectCast(VisitToken(node.EndKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EndKeyword.Node IsNot newEndKeyword Then anyChanges = True
            Dim newIfKeyword = DirectCast(VisitToken(node.IfKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.IfKeyword.Node IsNot newIfKeyword Then anyChanges = True

            If anyChanges Then
                Return New EndIfDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newEndKeyword, newIfKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitRegionDirective(ByVal node As RegionDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newRegionKeyword = DirectCast(VisitToken(node.RegionKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.RegionKeyword.Node IsNot newRegionKeyword Then anyChanges = True
            Dim newName = DirectCast(VisitToken(node.Name).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.Name.Node IsNot newName Then anyChanges = True

            If anyChanges Then
                Return New RegionDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newRegionKeyword, newName)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEndRegionDirective(ByVal node As EndRegionDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newEndKeyword = DirectCast(VisitToken(node.EndKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EndKeyword.Node IsNot newEndKeyword Then anyChanges = True
            Dim newRegionKeyword = DirectCast(VisitToken(node.RegionKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.RegionKeyword.Node IsNot newRegionKeyword Then anyChanges = True

            If anyChanges Then
                Return New EndRegionDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newEndKeyword, newRegionKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitExternalSourceDirective(ByVal node As ExternalSourceDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newExternalSourceKeyword = DirectCast(VisitToken(node.ExternalSourceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ExternalSourceKeyword.Node IsNot newExternalSourceKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExternalSource = DirectCast(VisitToken(node.ExternalSource).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.ExternalSource.Node IsNot newExternalSource Then anyChanges = True
            Dim newCommaToken = DirectCast(VisitToken(node.CommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CommaToken.Node IsNot newCommaToken Then anyChanges = True
            Dim newLineStart = DirectCast(VisitToken(node.LineStart).Node, InternalSyntax.IntegerLiteralTokenSyntax)
            If node.LineStart.Node IsNot newLineStart Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ExternalSourceDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newExternalSourceKeyword, newOpenParenToken, newExternalSource, newCommaToken, newLineStart, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitEndExternalSourceDirective(ByVal node As EndExternalSourceDirective) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newEndKeyword = DirectCast(VisitToken(node.EndKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.EndKeyword.Node IsNot newEndKeyword Then anyChanges = True
            Dim newExternalSourceKeyword = DirectCast(VisitToken(node.ExternalSourceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ExternalSourceKeyword.Node IsNot newExternalSourceKeyword Then anyChanges = True

            If anyChanges Then
                Return New EndExternalSourceDirective(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newEndKeyword, newExternalSourceKeyword)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitExternalChecksumDirective(ByVal node As ExternalChecksumDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newExternalChecksumKeyword = DirectCast(VisitToken(node.ExternalChecksumKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ExternalChecksumKeyword.Node IsNot newExternalChecksumKeyword Then anyChanges = True
            Dim newOpenParenToken = DirectCast(VisitToken(node.OpenParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.OpenParenToken.Node IsNot newOpenParenToken Then anyChanges = True
            Dim newExternalSource = DirectCast(VisitToken(node.ExternalSource).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.ExternalSource.Node IsNot newExternalSource Then anyChanges = True
            Dim newFirstCommaToken = DirectCast(VisitToken(node.FirstCommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.FirstCommaToken.Node IsNot newFirstCommaToken Then anyChanges = True
            Dim newGuid = DirectCast(VisitToken(node.Guid).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.Guid.Node IsNot newGuid Then anyChanges = True
            Dim newSecondCommaToken = DirectCast(VisitToken(node.SecondCommaToken).Node, InternalSyntax.PunctuationSyntax)
            If node.SecondCommaToken.Node IsNot newSecondCommaToken Then anyChanges = True
            Dim newChecksum = DirectCast(VisitToken(node.Checksum).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.Checksum.Node IsNot newChecksum Then anyChanges = True
            Dim newCloseParenToken = DirectCast(VisitToken(node.CloseParenToken).Node, InternalSyntax.PunctuationSyntax)
            If node.CloseParenToken.Node IsNot newCloseParenToken Then anyChanges = True

            If anyChanges Then
                Return New ExternalChecksumDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newExternalChecksumKeyword, newOpenParenToken, newExternalSource, newFirstCommaToken, newGuid, newSecondCommaToken, newChecksum, newCloseParenToken)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitReferenceDirective(ByVal node As ReferenceDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True
            Dim newReferenceKeyword = DirectCast(VisitToken(node.ReferenceKeyword).Node, InternalSyntax.KeywordSyntax)
            If node.ReferenceKeyword.Node IsNot newReferenceKeyword Then anyChanges = True
            Dim newFile = DirectCast(VisitToken(node.File).Node, InternalSyntax.StringLiteralTokenSyntax)
            If node.File.Node IsNot newFile Then anyChanges = True

            If anyChanges Then
                Return New ReferenceDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken, newReferenceKeyword, newFile)
            Else
                Return node
            End If
        End Function

        Public Overrides Function VisitBadDirective(ByVal node As BadDirectiveSyntax) As SyntaxNode
            Dim anyChanges As Boolean = False

            Dim newHashToken = DirectCast(VisitToken(node.HashToken).Node, InternalSyntax.PunctuationSyntax)
            If node.HashToken.Node IsNot newHashToken Then anyChanges = True

            If anyChanges Then
                Return New BadDirectiveSyntax(node.Kind, node.Green.GetDiagnostics, node.Green.GetAnnotations, newHashToken)
            Else
                Return node
            End If
        End Function

    End Class

End Namespace
