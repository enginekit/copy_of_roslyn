' Definition of syntax node factories.
' Generated by a tool on 4/5/2012 12:49 PM
' DO NOT HAND EDIT

Imports System.Collections.Generic

Namespace Roslyn.Compilers.VisualBasic

    Public Partial Class Syntax


        ''' <summary>
        ''' A class to represent an empty statement. This can occur when a colon is on a
        ''' line without anything else.
        ''' </summary>
        ''' <param name="empty">
        ''' An empty token because all non terminals must have a token.
        ''' </param>
        Public Shared Function EmptyStatement(empty As SyntaxToken) As EmptyStatementSyntax
            Select Case empty.Kind
                Case SyntaxKind.EmptyToken
                Case Else
                    Throw new ArgumentException("empty")
             End Select
            Return New EmptyStatementSyntax(SyntaxKind.EmptyStatement, Nothing, Nothing, DirectCast(empty.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' A class to represent an empty statement. This can occur when a colon is on a
        ''' line without anything else.
        ''' </summary>
        Public Shared Function EmptyStatement() As EmptyStatementSyntax
            Return Syntax.EmptyStatement(Syntax.Token(SyntaxKind.EmptyToken))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndIfStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.IfKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndIfStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndIfStatement() As EndBlockStatementSyntax
            Return Syntax.EndIfStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.IfKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndUsingStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.UsingKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndUsingStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndUsingStatement() As EndBlockStatementSyntax
            Return Syntax.EndUsingStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.UsingKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndWithStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.WithKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndWithStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndWithStatement() As EndBlockStatementSyntax
            Return Syntax.EndWithStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.WithKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndSelectStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SelectKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndSelectStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndSelectStatement() As EndBlockStatementSyntax
            Return Syntax.EndSelectStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.SelectKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndStructureStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndStructureStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndStructureStatement() As EndBlockStatementSyntax
            Return Syntax.EndStructureStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.StructureKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndEnumStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.EnumKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndEnumStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndEnumStatement() As EndBlockStatementSyntax
            Return Syntax.EndEnumStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.EnumKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndInterfaceStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.InterfaceKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndInterfaceStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndInterfaceStatement() As EndBlockStatementSyntax
            Return Syntax.EndInterfaceStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.InterfaceKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndClassStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.ClassKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndClassStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndClassStatement() As EndBlockStatementSyntax
            Return Syntax.EndClassStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.ClassKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndModuleStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.ModuleKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndModuleStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndModuleStatement() As EndBlockStatementSyntax
            Return Syntax.EndModuleStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.ModuleKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndNamespaceStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.NamespaceKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndNamespaceStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndNamespaceStatement() As EndBlockStatementSyntax
            Return Syntax.EndNamespaceStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.NamespaceKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndSubStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndSubStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndSubStatement() As EndBlockStatementSyntax
            Return Syntax.EndSubStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.SubKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndFunctionStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndFunctionStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndFunctionStatement() As EndBlockStatementSyntax
            Return Syntax.EndFunctionStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.FunctionKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndGetStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.GetKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndGetStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndGetStatement() As EndBlockStatementSyntax
            Return Syntax.EndGetStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.GetKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndSetStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SetKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndSetStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndSetStatement() As EndBlockStatementSyntax
            Return Syntax.EndSetStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.SetKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndPropertyStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.PropertyKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndPropertyStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndPropertyStatement() As EndBlockStatementSyntax
            Return Syntax.EndPropertyStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.PropertyKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndOperatorStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.OperatorKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndOperatorStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndOperatorStatement() As EndBlockStatementSyntax
            Return Syntax.EndOperatorStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.OperatorKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndEventStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.EventKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndEventStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndEventStatement() As EndBlockStatementSyntax
            Return Syntax.EndEventStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.EventKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndAddHandlerStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.AddHandlerKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndAddHandlerStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndAddHandlerStatement() As EndBlockStatementSyntax
            Return Syntax.EndAddHandlerStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.AddHandlerKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndRemoveHandlerStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.RemoveHandlerKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndRemoveHandlerStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndRemoveHandlerStatement() As EndBlockStatementSyntax
            Return Syntax.EndRemoveHandlerStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.RemoveHandlerKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndRaiseEventStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.RaiseEventKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndRaiseEventStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndRaiseEventStatement() As EndBlockStatementSyntax
            Return Syntax.EndRaiseEventStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.RaiseEventKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndWhileStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndWhileStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndWhileStatement() As EndBlockStatementSyntax
            Return Syntax.EndWhileStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.WhileKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndTryStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.TryKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndTryStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndTryStatement() As EndBlockStatementSyntax
            Return Syntax.EndTryStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.TryKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndSyncLockStatement(endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SyncLockKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New EndBlockStatementSyntax(SyntaxKind.EndSyncLockStatement, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        Public Shared Function EndSyncLockStatement() As EndBlockStatementSyntax
            Return Syntax.EndSyncLockStatement(Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.SyncLockKeyword))
        End Function


        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' EndBlockStatementSyntax. One of EndIfStatement, EndUsingStatement,
        ''' EndWithStatement, EndSelectStatement, EndStructureStatement, EndEnumStatement,
        ''' EndInterfaceStatement, EndClassStatement, EndModuleStatement,
        ''' EndNamespaceStatement, EndSubStatement, EndFunctionStatement, EndGetStatement,
        ''' EndSetStatement, EndPropertyStatement, EndOperatorStatement, EndEventStatement,
        ''' EndAddHandlerStatement, EndRemoveHandlerStatement, EndRaiseEventStatement,
        ''' EndWhileStatement, EndTryStatement, EndSyncLockStatement.
        ''' </param>
        ''' <param name="endKeyword">
        ''' The "End" keyword
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndBlockStatement(ByVal kind As SyntaxKind, endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            If Not kind.IsEndBlockStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            If blockKeyword.Kind <> GetEndBlockStatementBlockKeywordKind(kind) Then
                Throw new ArgumentException("blockKeyword")
            End If
            Return New EndBlockStatementSyntax(kind, Nothing, Nothing, DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function

        Private Shared Function GetEndBlockStatementBlockKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.EndIfStatement
                    Return SyntaxKind.IfKeyword
                Case SyntaxKind.EndUsingStatement
                    Return SyntaxKind.UsingKeyword
                Case SyntaxKind.EndWithStatement
                    Return SyntaxKind.WithKeyword
                Case SyntaxKind.EndSelectStatement
                    Return SyntaxKind.SelectKeyword
                Case SyntaxKind.EndStructureStatement
                    Return SyntaxKind.StructureKeyword
                Case SyntaxKind.EndEnumStatement
                    Return SyntaxKind.EnumKeyword
                Case SyntaxKind.EndInterfaceStatement
                    Return SyntaxKind.InterfaceKeyword
                Case SyntaxKind.EndClassStatement
                    Return SyntaxKind.ClassKeyword
                Case SyntaxKind.EndModuleStatement
                    Return SyntaxKind.ModuleKeyword
                Case SyntaxKind.EndNamespaceStatement
                    Return SyntaxKind.NamespaceKeyword
                Case SyntaxKind.EndSubStatement
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.EndFunctionStatement
                    Return SyntaxKind.FunctionKeyword
                Case SyntaxKind.EndGetStatement
                    Return SyntaxKind.GetKeyword
                Case SyntaxKind.EndSetStatement
                    Return SyntaxKind.SetKeyword
                Case SyntaxKind.EndPropertyStatement
                    Return SyntaxKind.PropertyKeyword
                Case SyntaxKind.EndOperatorStatement
                    Return SyntaxKind.OperatorKeyword
                Case SyntaxKind.EndEventStatement
                    Return SyntaxKind.EventKeyword
                Case SyntaxKind.EndAddHandlerStatement
                    Return SyntaxKind.AddHandlerKeyword
                Case SyntaxKind.EndRemoveHandlerStatement
                    Return SyntaxKind.RemoveHandlerKeyword
                Case SyntaxKind.EndRaiseEventStatement
                    Return SyntaxKind.RaiseEventKeyword
                Case SyntaxKind.EndWhileStatement
                    Return SyntaxKind.WhileKeyword
                Case SyntaxKind.EndTryStatement
                    Return SyntaxKind.TryKeyword
                Case SyntaxKind.EndSyncLockStatement
                    Return SyntaxKind.SyncLockKeyword
                Case Else
                    Throw New ArgumentException("BlockKeyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents an "End XXX" statement, where XXX is a single keyword.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' EndBlockStatementSyntax. One of EndIfStatement, EndUsingStatement,
        ''' EndWithStatement, EndSelectStatement, EndStructureStatement, EndEnumStatement,
        ''' EndInterfaceStatement, EndClassStatement, EndModuleStatement,
        ''' EndNamespaceStatement, EndSubStatement, EndFunctionStatement, EndGetStatement,
        ''' EndSetStatement, EndPropertyStatement, EndOperatorStatement, EndEventStatement,
        ''' EndAddHandlerStatement, EndRemoveHandlerStatement, EndRaiseEventStatement,
        ''' EndWhileStatement, EndTryStatement, EndSyncLockStatement.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword that ends the block. Must be one of: "If", "Using", "With",
        ''' "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
        ''' "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
        ''' "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
        ''' </param>
        Public Shared Function EndBlockStatement(ByVal kind As SyntaxKind, blockKeyword As SyntaxToken) As EndBlockStatementSyntax
            Return Syntax.EndBlockStatement(kind, Syntax.Token(SyntaxKind.EndKeyword), blockKeyword)
        End Function


        ''' <summary>
        ''' Represents an entire source file of VB code.
        ''' </summary>
        ''' <param name="options">
        ''' Represents the list of Option statements at the beginning of a source file.
        ''' </param>
        ''' <param name="imports">
        ''' Represents the list of Imports statements at the beginning of a source file.
        ''' </param>
        ''' <param name="attributes">
        ''' Represents the list of AttributeStatements at the beginning of a source file
        ''' that contain the Assembly and Module attributes.
        ''' </param>
        ''' <param name="members">
        ''' Represents the members of the default namespace for this source file: all the
        ''' top-level type and namespace declarations in the file. May also contain
        ''' Statements that are not valid
        ''' </param>
        ''' <param name="endOfFileToken">
        ''' Represents the end of the source file. This token may have trivia (whitespace,
        ''' comments, ...) attached to it.
        ''' </param>
        Public Shared Function CompilationUnit(options As SeparatedSyntaxList(Of OptionStatementSyntax), [imports] As SeparatedSyntaxList(Of ImportsStatementSyntax), attributes As SeparatedSyntaxList(Of AttributesStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), endOfFileToken As SyntaxToken) As CompilationUnitSyntax
            Select Case endOfFileToken.Kind
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("endOfFileToken")
             End Select
            Return New CompilationUnitSyntax(SyntaxKind.CompilationUnit, Nothing, Nothing, options.Node, [imports].Node, attributes.Node, members.Node, DirectCast(endOfFileToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an entire source file of VB code.
        ''' </summary>
        ''' <param name="options">
        ''' Represents the list of Option statements at the beginning of a source file.
        ''' </param>
        ''' <param name="imports">
        ''' Represents the list of Imports statements at the beginning of a source file.
        ''' </param>
        ''' <param name="attributes">
        ''' Represents the list of AttributeStatements at the beginning of a source file
        ''' that contain the Assembly and Module attributes.
        ''' </param>
        ''' <param name="members">
        ''' Represents the members of the default namespace for this source file: all the
        ''' top-level type and namespace declarations in the file. May also contain
        ''' Statements that are not valid
        ''' </param>
        Public Shared Function CompilationUnit(options As SeparatedSyntaxList(Of OptionStatementSyntax), [imports] As SeparatedSyntaxList(Of ImportsStatementSyntax), attributes As SeparatedSyntaxList(Of AttributesStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax)) As CompilationUnitSyntax
            Return Syntax.CompilationUnit(options, [imports], attributes, members, Syntax.Token(SyntaxKind.EndOfFileToken))
        End Function


        ''' <summary>
        ''' Represents an entire source file of VB code.
        ''' </summary>
        Public Shared Function CompilationUnit() As CompilationUnitSyntax
            Return Syntax.CompilationUnit(Nothing, Nothing, Nothing, Nothing, Syntax.Token(SyntaxKind.EndOfFileToken))
        End Function


        ''' <summary>
        ''' Represents an Option statement, such as "Option Strict On".
        ''' </summary>
        ''' <param name="optionKeyword">
        ''' The "Option" keyword.
        ''' </param>
        ''' <param name="nameKeyword">
        ''' The keyword that identifies the option being set: Explicit, Strict, Compare or
        ''' Infer.
        ''' </param>
        ''' <param name="valueKeyword">
        ''' The keyword that identifiers the value being set for the opition: On, Off, Text
        ''' or Binary.
        ''' </param>
        Public Shared Function OptionStatement(optionKeyword As SyntaxToken, nameKeyword As SyntaxToken, valueKeyword As SyntaxToken) As OptionStatementSyntax
            Select Case optionKeyword.Kind
                Case SyntaxKind.OptionKeyword
                Case Else
                    Throw new ArgumentException("optionKeyword")
             End Select
            Select Case nameKeyword.Kind
                Case SyntaxKind.ExplicitKeyword:
                Case SyntaxKind.StrictKeyword:
                Case SyntaxKind.CompareKeyword:
                Case SyntaxKind.InferKeyword
                Case Else
                    Throw new ArgumentException("nameKeyword")
             End Select
            Return New OptionStatementSyntax(SyntaxKind.OptionStatement, Nothing, Nothing, DirectCast(optionKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(nameKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(valueKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an Option statement, such as "Option Strict On".
        ''' </summary>
        ''' <param name="nameKeyword">
        ''' The keyword that identifies the option being set: Explicit, Strict, Compare or
        ''' Infer.
        ''' </param>
        ''' <param name="valueKeyword">
        ''' The keyword that identifiers the value being set for the opition: On, Off, Text
        ''' or Binary.
        ''' </param>
        Public Shared Function OptionStatement(nameKeyword As SyntaxToken, valueKeyword As SyntaxToken) As OptionStatementSyntax
            Return Syntax.OptionStatement(Syntax.Token(SyntaxKind.OptionKeyword), nameKeyword, valueKeyword)
        End Function


        ''' <summary>
        ''' Represents an Option statement, such as "Option Strict On".
        ''' </summary>
        ''' <param name="nameKeyword">
        ''' The keyword that identifies the option being set: Explicit, Strict, Compare or
        ''' Infer.
        ''' </param>
        Public Shared Function OptionStatement(nameKeyword As SyntaxToken) As OptionStatementSyntax
            Return Syntax.OptionStatement(Syntax.Token(SyntaxKind.OptionKeyword), nameKeyword, Nothing)
        End Function


        ''' <summary>
        ''' Represents an Imports statement, which has one or more imports clauses.
        ''' </summary>
        ''' <param name="importsKeyword">
        ''' The "Imports" keyword.
        ''' </param>
        ''' <param name="importsClauses">
        ''' A list of one or more import clauses. Each clause is either an alias, namespace
        ''' or XML namespace import.
        ''' </param>
        Public Shared Function ImportsStatement(importsKeyword As SyntaxToken, importsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax
            Select Case importsKeyword.Kind
                Case SyntaxKind.ImportsKeyword
                Case Else
                    Throw new ArgumentException("importsKeyword")
             End Select
            Return New ImportsStatementSyntax(SyntaxKind.ImportsStatement, Nothing, Nothing, DirectCast(importsKeyword.Node, InternalSyntax.KeywordSyntax), importsClauses.Node)
        End Function


        ''' <summary>
        ''' Represents an Imports statement, which has one or more imports clauses.
        ''' </summary>
        ''' <param name="importsClauses">
        ''' A list of one or more import clauses. Each clause is either an alias, namespace
        ''' or XML namespace import.
        ''' </param>
        Public Shared Function ImportsStatement(importsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax
            Return Syntax.ImportsStatement(Syntax.Token(SyntaxKind.ImportsKeyword), importsClauses)
        End Function


        ''' <summary>
        ''' Represents an Imports statement, which has one or more imports clauses.
        ''' </summary>
        Public Shared Function ImportsStatement() As ImportsStatementSyntax
            Return Syntax.ImportsStatement(Syntax.Token(SyntaxKind.ImportsKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents the clause of an Imports statement that defines an alias for a
        ''' namespace or type.
        ''' </summary>
        ''' <param name="alias">
        ''' The identifier that the alias is being defined for.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The equals sign token.
        ''' </param>
        ''' <param name="name">
        ''' The namespace or type the alias refers to.
        ''' </param>
        Public Shared Function AliasImportsClause([alias] As SyntaxToken, equalsToken As SyntaxToken, name As NameSyntax) As AliasImportsClauseSyntax
            Select Case [alias].Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("[alias]")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New AliasImportsClauseSyntax(SyntaxKind.AliasImportsClause, Nothing, Nothing, DirectCast([alias].Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents the clause of an Imports statement that defines an alias for a
        ''' namespace or type.
        ''' </summary>
        ''' <param name="alias">
        ''' The identifier that the alias is being defined for.
        ''' </param>
        ''' <param name="name">
        ''' The namespace or type the alias refers to.
        ''' </param>
        Public Shared Function AliasImportsClause([alias] As SyntaxToken, name As NameSyntax) As AliasImportsClauseSyntax
            Return Syntax.AliasImportsClause([alias], Syntax.Token(SyntaxKind.EqualsToken), name)
        End Function


        ''' <summary>
        ''' Represents the clause of an Imports statement that defines an alias for a
        ''' namespace or type.
        ''' </summary>
        ''' <param name="alias">
        ''' The identifier that the alias is being defined for.
        ''' </param>
        ''' <param name="name">
        ''' The namespace or type the alias refers to.
        ''' </param>
        Public Shared Function AliasImportsClause([alias] As String, name As NameSyntax) As AliasImportsClauseSyntax
            Return Syntax.AliasImportsClause(Syntax.Identifier([alias]), Syntax.Token(SyntaxKind.EqualsToken), name)
        End Function


        ''' <summary>
        ''' Represents the clause of an Imports statement that imports all members of a
        ''' namespace.
        ''' </summary>
        ''' <param name="name">
        ''' The namespace or type being imported.
        ''' </param>
        Public Shared Function MembersImportsClause(name As NameSyntax) As MembersImportsClauseSyntax
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New MembersImportsClauseSyntax(SyntaxKind.MembersImportsClause, Nothing, Nothing, name)
        End Function


        ''' <summary>
        ''' Defines a XML namespace for XML expressions.
        ''' </summary>
        ''' <param name="xmlNamespace">
        ''' Identifies the XML namespace alias and URI.
        ''' </param>
        Public Shared Function XmlNamespaceImportsClause(lessThanToken As SyntaxToken, xmlNamespace As XmlAttributeSyntax, greaterThanToken As SyntaxToken) As XmlNamespaceImportsClauseSyntax
            Select Case lessThanToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("lessThanToken")
             End Select
            if xmlNamespace Is Nothing Then
                Throw New ArgumentNullException("xmlNamespace")
            End If
            Select Case xmlNamespace.Kind
                Case SyntaxKind.XmlAttribute
                Case Else
                    Throw new ArgumentException("xmlNamespace")
             End Select
            Select Case greaterThanToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("greaterThanToken")
             End Select
            Return New XmlNamespaceImportsClauseSyntax(SyntaxKind.XmlNamespaceImportsClause, Nothing, Nothing, DirectCast(lessThanToken.Node, InternalSyntax.PunctuationSyntax), xmlNamespace, DirectCast(greaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Defines a XML namespace for XML expressions.
        ''' </summary>
        ''' <param name="xmlNamespace">
        ''' Identifies the XML namespace alias and URI.
        ''' </param>
        Public Shared Function XmlNamespaceImportsClause(xmlNamespace As XmlAttributeSyntax) As XmlNamespaceImportsClauseSyntax
            Return Syntax.XmlNamespaceImportsClause(Syntax.Token(SyntaxKind.LessThanToken), xmlNamespace, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents a Namespace statement, its contents and the End Namespace statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the NamespaceBlock.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the namespace statement.
        ''' </param>
        ''' <param name="end">
        ''' The End Namespace statement that ends the block.
        ''' </param>
        Public Shared Function NamespaceBlock(begin As NamespaceStatementSyntax, beginTerminator As SyntaxToken, members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As NamespaceBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.NamespaceStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndNamespaceStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New NamespaceBlockSyntax(SyntaxKind.NamespaceBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Namespace statement, its contents and the End Namespace statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the NamespaceBlock.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the namespace statement.
        ''' </param>
        Public Shared Function NamespaceBlock(begin As NamespaceStatementSyntax, members As SeparatedSyntaxList(Of StatementSyntax)) As NamespaceBlockSyntax
            Return Syntax.NamespaceBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), members, Syntax.EndNamespaceStatement())
        End Function


        ''' <summary>
        ''' Represents a Namespace statement, its contents and the End Namespace statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the NamespaceBlock.
        ''' </param>
        Public Shared Function NamespaceBlock(begin As NamespaceStatementSyntax) As NamespaceBlockSyntax
            Return Syntax.NamespaceBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndNamespaceStatement())
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a namespace declaration. This node always
        ''' appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
        ''' </summary>
        ''' <param name="namespaceKeyword">
        ''' The "Namespace" keyword.
        ''' </param>
        ''' <param name="name">
        ''' A (possibly dotted) name denoting the namespace being declared.
        ''' </param>
        Public Shared Function NamespaceStatement(namespaceKeyword As SyntaxToken, name As NameSyntax) As NamespaceStatementSyntax
            Select Case namespaceKeyword.Kind
                Case SyntaxKind.NamespaceKeyword
                Case Else
                    Throw new ArgumentException("namespaceKeyword")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New NamespaceStatementSyntax(SyntaxKind.NamespaceStatement, Nothing, Nothing, DirectCast(namespaceKeyword.Node, InternalSyntax.KeywordSyntax), name)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a namespace declaration. This node always
        ''' appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
        ''' </summary>
        ''' <param name="name">
        ''' A (possibly dotted) name denoting the namespace being declared.
        ''' </param>
        Public Shared Function NamespaceStatement(name As NameSyntax) As NamespaceStatementSyntax
            Return Syntax.NamespaceStatement(Syntax.Token(SyntaxKind.NamespaceKeyword), name)
        End Function


        ''' <summary>
        ''' Represents a declaration of Module, its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block.
        ''' </param>
        Public Shared Function ModuleBlock(begin As ModuleStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As ModuleBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ModuleStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndModuleStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New ModuleBlockSyntax(SyntaxKind.ModuleBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), [inherits].Node, [implements].Node, members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a declaration of Module, its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        Public Shared Function ModuleBlock(begin As ModuleStatementSyntax, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax)) As ModuleBlockSyntax
            Return Syntax.ModuleBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), [inherits], [implements], members, Syntax.EndModuleStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of Module, its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        Public Shared Function ModuleBlock(begin As ModuleStatementSyntax) As ModuleBlockSyntax
            Return Syntax.ModuleBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing, Nothing, Syntax.EndModuleStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Structure, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block.
        ''' </param>
        Public Shared Function StructureBlock(begin As StructureStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As StructureBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.StructureStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndStructureStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New StructureBlockSyntax(SyntaxKind.StructureBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), [inherits].Node, [implements].Node, members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a declaration of a Structure, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        Public Shared Function StructureBlock(begin As StructureStatementSyntax, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax)) As StructureBlockSyntax
            Return Syntax.StructureBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), [inherits], [implements], members, Syntax.EndStructureStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Structure, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        Public Shared Function StructureBlock(begin As StructureStatementSyntax) As StructureBlockSyntax
            Return Syntax.StructureBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing, Nothing, Syntax.EndStructureStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Interface, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block.
        ''' </param>
        Public Shared Function InterfaceBlock(begin As InterfaceStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As InterfaceBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.InterfaceStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndInterfaceStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New InterfaceBlockSyntax(SyntaxKind.InterfaceBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), [inherits].Node, [implements].Node, members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a declaration of a Interface, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        Public Shared Function InterfaceBlock(begin As InterfaceStatementSyntax, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax)) As InterfaceBlockSyntax
            Return Syntax.InterfaceBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), [inherits], [implements], members, Syntax.EndInterfaceStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Interface, its contents and the End statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        Public Shared Function InterfaceBlock(begin As InterfaceStatementSyntax) As InterfaceBlockSyntax
            Return Syntax.InterfaceBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing, Nothing, Syntax.EndInterfaceStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Class its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block.
        ''' </param>
        Public Shared Function ClassBlock(begin As ClassStatementSyntax, beginTerminator As SyntaxToken, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As ClassBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ClassStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndClassStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New ClassBlockSyntax(SyntaxKind.ClassBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), [inherits].Node, [implements].Node, members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a declaration of a Class its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="inherits">
        ''' A list of the Inherits declarations for the type.
        ''' </param>
        ''' <param name="implements">
        ''' A list of the Implements declarations for the type.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the type or module.
        ''' </param>
        Public Shared Function ClassBlock(begin As ClassStatementSyntax, [inherits] As SeparatedSyntaxList(Of InheritsStatementSyntax), [implements] As SeparatedSyntaxList(Of ImplementsStatementSyntax), members As SeparatedSyntaxList(Of StatementSyntax)) As ClassBlockSyntax
            Return Syntax.ClassBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), [inherits], [implements], members, Syntax.EndClassStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of a Class its contents and the End statement that
        ''' ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        Public Shared Function ClassBlock(begin As ClassStatementSyntax) As ClassBlockSyntax
            Return Syntax.ClassBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing, Nothing, Syntax.EndClassStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of an Enum, its contents and the End Enum statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the enumeration.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block.
        ''' </param>
        Public Shared Function EnumBlock(begin As EnumStatementSyntax, beginTerminator As SyntaxToken, members As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As EnumBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.EnumStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndEnumStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New EnumBlockSyntax(SyntaxKind.EnumBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), members.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a declaration of an Enum, its contents and the End Enum statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        ''' <param name="members">
        ''' The declarations contained in the enumeration.
        ''' </param>
        Public Shared Function EnumBlock(begin As EnumStatementSyntax, members As SeparatedSyntaxList(Of StatementSyntax)) As EnumBlockSyntax
            Return Syntax.EnumBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), members, Syntax.EndEnumStatement())
        End Function


        ''' <summary>
        ''' Represents a declaration of an Enum, its contents and the End Enum statement
        ''' that ends it.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the type or module.
        ''' </param>
        Public Shared Function EnumBlock(begin As EnumStatementSyntax) As EnumBlockSyntax
            Return Syntax.EnumBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndEnumStatement())
        End Function


        ''' <summary>
        ''' Represents an Inherits statement in a Class, Structure or Interface.
        ''' </summary>
        ''' <param name="inheritsKeyword">
        ''' The "Inherits" keyword.
        ''' </param>
        ''' <param name="types">
        ''' A list of the types being inherited.
        ''' </param>
        Public Shared Function InheritsStatement(inheritsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax
            Select Case inheritsKeyword.Kind
                Case SyntaxKind.InheritsKeyword
                Case Else
                    Throw new ArgumentException("inheritsKeyword")
             End Select
            Return New InheritsStatementSyntax(SyntaxKind.InheritsStatement, Nothing, Nothing, DirectCast(inheritsKeyword.Node, InternalSyntax.KeywordSyntax), types.Node)
        End Function


        ''' <summary>
        ''' Represents an Inherits statement in a Class, Structure or Interface.
        ''' </summary>
        ''' <param name="types">
        ''' A list of the types being inherited.
        ''' </param>
        Public Shared Function InheritsStatement(types As SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax
            Return Syntax.InheritsStatement(Syntax.Token(SyntaxKind.InheritsKeyword), types)
        End Function


        ''' <summary>
        ''' Represents an Inherits statement in a Class, Structure or Interface.
        ''' </summary>
        ''' <param name="types">
        ''' A list of the types being inherited.
        ''' </param>
        Public Shared Function InheritsStatement(ParamArray types As TypeSyntax()) As InheritsStatementSyntax
            Return Syntax.InheritsStatement(Syntax.Token(SyntaxKind.InheritsKeyword), Syntax.SeparatedList(Of TypeSyntax)().Add(SyntaxKind.CommaToken, types))
        End Function


        ''' <summary>
        ''' Represents an Implements statement in a Class or Structure.
        ''' </summary>
        ''' <param name="implementsKeyword">
        ''' The "Implements" keyword.
        ''' </param>
        ''' <param name="types">
        ''' A list of the types being implemented.
        ''' </param>
        Public Shared Function ImplementsStatement(implementsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax
            Select Case implementsKeyword.Kind
                Case SyntaxKind.ImplementsKeyword
                Case Else
                    Throw new ArgumentException("implementsKeyword")
             End Select
            Return New ImplementsStatementSyntax(SyntaxKind.ImplementsStatement, Nothing, Nothing, DirectCast(implementsKeyword.Node, InternalSyntax.KeywordSyntax), types.Node)
        End Function


        ''' <summary>
        ''' Represents an Implements statement in a Class or Structure.
        ''' </summary>
        ''' <param name="types">
        ''' A list of the types being implemented.
        ''' </param>
        Public Shared Function ImplementsStatement(types As SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax
            Return Syntax.ImplementsStatement(Syntax.Token(SyntaxKind.ImplementsKeyword), types)
        End Function


        ''' <summary>
        ''' Represents an Implements statement in a Class or Structure.
        ''' </summary>
        ''' <param name="types">
        ''' A list of the types being implemented.
        ''' </param>
        Public Shared Function ImplementsStatement(ParamArray types As TypeSyntax()) As ImplementsStatementSyntax
            Return Syntax.ImplementsStatement(Syntax.Token(SyntaxKind.ImplementsKeyword), Syntax.SeparatedList(Of TypeSyntax)().Add(SyntaxKind.CommaToken, types))
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Module declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="keyword">
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function ModuleStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ModuleStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.ModuleKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New ModuleStatementSyntax(SyntaxKind.ModuleStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Module declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function ModuleStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ModuleStatementSyntax
            Return Syntax.ModuleStatement(attributes, modifiers, Syntax.Token(SyntaxKind.ModuleKeyword), identifier, typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Module declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function ModuleStatement(identifier As SyntaxToken) As ModuleStatementSyntax
            Return Syntax.ModuleStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.ModuleKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Module declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function ModuleStatement(identifier As String) As ModuleStatementSyntax
            Return Syntax.ModuleStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.ModuleKeyword), Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Structure declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="keyword">
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function StructureStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As StructureStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New StructureStatementSyntax(SyntaxKind.StructureStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Structure declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function StructureStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As StructureStatementSyntax
            Return Syntax.StructureStatement(attributes, modifiers, Syntax.Token(SyntaxKind.StructureKeyword), identifier, typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Structure declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function StructureStatement(identifier As SyntaxToken) As StructureStatementSyntax
            Return Syntax.StructureStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.StructureKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Structure declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function StructureStatement(identifier As String) As StructureStatementSyntax
            Return Syntax.StructureStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.StructureKeyword), Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Interface declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="keyword">
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function InterfaceStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As InterfaceStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.InterfaceKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New InterfaceStatementSyntax(SyntaxKind.InterfaceStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Interface declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function InterfaceStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As InterfaceStatementSyntax
            Return Syntax.InterfaceStatement(attributes, modifiers, Syntax.Token(SyntaxKind.InterfaceKeyword), identifier, typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Interface declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function InterfaceStatement(identifier As SyntaxToken) As InterfaceStatementSyntax
            Return Syntax.InterfaceStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.InterfaceKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Interface declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function InterfaceStatement(identifier As String) As InterfaceStatementSyntax
            Return Syntax.InterfaceStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.InterfaceKeyword), Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Class declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="keyword">
        ''' The "Module", "Class", "Interface" or "Structure" keyword.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function ClassStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ClassStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.ClassKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New ClassStatementSyntax(SyntaxKind.ClassStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Class declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic parameters for this type. If no
        ''' generic parameters were present, Nothing is returned.
        ''' </param>
        Public Shared Function ClassStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ClassStatementSyntax
            Return Syntax.ClassStatement(attributes, modifiers, Syntax.Token(SyntaxKind.ClassKeyword), identifier, typeParameterList)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Class declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function ClassStatement(identifier As SyntaxToken) As ClassStatementSyntax
            Return Syntax.ClassStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.ClassKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of a Class declaration. This node always
        ''' appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type being declared.
        ''' </param>
        Public Shared Function ClassStatement(identifier As String) As ClassStatementSyntax
            Return Syntax.ClassStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.ClassKeyword), Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of an Enum declaration. This node always
        ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="enumKeyword">
        ''' The "Enum" keyword.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the enum being declared.
        ''' </param>
        ''' <param name="underlyingType">
        ''' Optional "As XXX" clause describing the underlying type of the enumeration. If
        ''' no As clause was specified, Nothing is returned.
        ''' </param>
        Public Shared Function EnumStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, enumKeyword As SyntaxToken, identifier As SyntaxToken, underlyingType As AsClauseSyntax) As EnumStatementSyntax
            Select Case enumKeyword.Kind
                Case SyntaxKind.EnumKeyword
                Case Else
                    Throw new ArgumentException("enumKeyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New EnumStatementSyntax(SyntaxKind.EnumStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(enumKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), underlyingType)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of an Enum declaration. This node always
        ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the enum being declared.
        ''' </param>
        ''' <param name="underlyingType">
        ''' Optional "As XXX" clause describing the underlying type of the enumeration. If
        ''' no As clause was specified, Nothing is returned.
        ''' </param>
        Public Shared Function EnumStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, underlyingType As AsClauseSyntax) As EnumStatementSyntax
            Return Syntax.EnumStatement(attributes, modifiers, Syntax.Token(SyntaxKind.EnumKeyword), identifier, underlyingType)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of an Enum declaration. This node always
        ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the enum being declared.
        ''' </param>
        Public Shared Function EnumStatement(identifier As SyntaxToken) As EnumStatementSyntax
            Return Syntax.EnumStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.EnumKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning statement of an Enum declaration. This node always
        ''' appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the enum being declared.
        ''' </param>
        Public Shared Function EnumStatement(identifier As String) As EnumStatementSyntax
            Return Syntax.EnumStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.EnumKeyword), Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents the type parameter list in a declaration.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="ofKeyword">
        ''' The "Of" keyword.
        ''' </param>
        ''' <param name="parameters">
        ''' A list of the type parameters. There must be at least one type parameter in the
        ''' list.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function TypeParameterList(openParenToken As SyntaxToken, ofKeyword As SyntaxToken, parameters As SeparatedSyntaxList(Of TypeParameterSyntax), closeParenToken As SyntaxToken) As TypeParameterListSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case ofKeyword.Kind
                Case SyntaxKind.OfKeyword
                Case Else
                    Throw new ArgumentException("ofKeyword")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New TypeParameterListSyntax(SyntaxKind.TypeParameterList, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(ofKeyword.Node, InternalSyntax.KeywordSyntax), parameters.Node, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the type parameter list in a declaration.
        ''' </summary>
        ''' <param name="parameters">
        ''' A list of the type parameters. There must be at least one type parameter in the
        ''' list.
        ''' </param>
        Public Shared Function TypeParameterList(parameters As SeparatedSyntaxList(Of TypeParameterSyntax)) As TypeParameterListSyntax
            Return Syntax.TypeParameterList(Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.OfKeyword), parameters, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents the type parameter list in a declaration.
        ''' </summary>
        ''' <param name="parameters">
        ''' A list of the type parameters. There must be at least one type parameter in the
        ''' list.
        ''' </param>
        Public Shared Function TypeParameterList(ParamArray parameters As TypeParameterSyntax()) As TypeParameterListSyntax
            Return Syntax.TypeParameterList(Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.OfKeyword), Syntax.SeparatedList(Of TypeParameterSyntax)().Add(SyntaxKind.CommaToken, parameters), Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a type parameter on a generic type declaration.
        ''' </summary>
        ''' <param name="varianceKeyword">
        ''' Represents the "In" or "Out" variance keyword on a type parameter, if present.
        ''' If no variance modifier was present, Nothing is returned.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the type parameter
        ''' </param>
        ''' <param name="typeParameterConstraintClause">
        ''' The "As" keyword, if any type constraints were supplied. If no type constraints
        ''' were supplied, Nothing is returned.
        ''' </param>
        Public Shared Function TypeParameter(varianceKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterConstraintClause As TypeParameterConstraintClauseSyntax) As TypeParameterSyntax
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New TypeParameterSyntax(SyntaxKind.TypeParameter, Nothing, Nothing, DirectCast(varianceKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterConstraintClause)
        End Function


        ''' <summary>
        ''' Represents a type parameter on a generic type declaration.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type parameter
        ''' </param>
        Public Shared Function TypeParameter(identifier As SyntaxToken) As TypeParameterSyntax
            Return Syntax.TypeParameter(Nothing, identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents a type parameter on a generic type declaration.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the type parameter
        ''' </param>
        Public Shared Function TypeParameter(identifier As String) As TypeParameterSyntax
            Return Syntax.TypeParameter(Nothing, Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As Constraint".
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The "As" keyword, if any type constraints were supplied. If no type constraints
        ''' were supplied, Nothing is returned.
        ''' </param>
        ''' <param name="constraint">
        ''' A list of the supplied constraints. If no constraints were supplied, Nothing is
        ''' returned.
        ''' </param>
        Public Shared Function TypeParameterSingleConstraintClause(asKeyword As SyntaxToken, constraint As ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax
            Select Case asKeyword.Kind
                Case SyntaxKind.AsKeyword
                Case Else
                    Throw new ArgumentException("asKeyword")
             End Select
            if constraint Is Nothing Then
                Throw New ArgumentNullException("constraint")
            End If
            Select Case constraint.Kind
                Case SyntaxKind.NewConstraint,
                     SyntaxKind.ClassConstraint,
                     SyntaxKind.StructureConstraint,
                     SyntaxKind.TypeConstraint
                Case Else
                    Throw new ArgumentException("constraint")
             End Select
            Return New TypeParameterSingleConstraintClauseSyntax(SyntaxKind.TypeParameterSingleConstraintClause, Nothing, Nothing, DirectCast(asKeyword.Node, InternalSyntax.KeywordSyntax), constraint)
        End Function


        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As Constraint".
        ''' </summary>
        ''' <param name="constraint">
        ''' A list of the supplied constraints. If no constraints were supplied, Nothing is
        ''' returned.
        ''' </param>
        Public Shared Function TypeParameterSingleConstraintClause(constraint As ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax
            Return Syntax.TypeParameterSingleConstraintClause(Syntax.Token(SyntaxKind.AsKeyword), constraint)
        End Function


        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As { Constraints }".
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The "As" keyword.
        ''' </param>
        ''' <param name="openBraceToken">
        ''' The "{" token.
        ''' </param>
        ''' <param name="constraints">
        ''' A list of the supplied constraints. If no constraints were supplied, an empty
        ''' list is returned.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The "}" token.
        ''' </param>
        Public Shared Function TypeParameterMultipleConstraintClause(asKeyword As SyntaxToken, openBraceToken As SyntaxToken, constraints As SeparatedSyntaxList(Of ConstraintSyntax), closeBraceToken As SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax
            Select Case asKeyword.Kind
                Case SyntaxKind.AsKeyword
                Case Else
                    Throw new ArgumentException("asKeyword")
             End Select
            Select Case openBraceToken.Kind
                Case SyntaxKind.OpenBraceToken
                Case Else
                    Throw new ArgumentException("openBraceToken")
             End Select
            Select Case closeBraceToken.Kind
                Case SyntaxKind.CloseBraceToken
                Case Else
                    Throw new ArgumentException("closeBraceToken")
             End Select
            Return New TypeParameterMultipleConstraintClauseSyntax(SyntaxKind.TypeParameterMultipleConstraintClause, Nothing, Nothing, DirectCast(asKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openBraceToken.Node, InternalSyntax.PunctuationSyntax), constraints.Node, DirectCast(closeBraceToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As { Constraints }".
        ''' </summary>
        ''' <param name="constraints">
        ''' A list of the supplied constraints. If no constraints were supplied, an empty
        ''' list is returned.
        ''' </param>
        Public Shared Function TypeParameterMultipleConstraintClause(constraints As SeparatedSyntaxList(Of ConstraintSyntax)) As TypeParameterMultipleConstraintClauseSyntax
            Return Syntax.TypeParameterMultipleConstraintClause(Syntax.Token(SyntaxKind.AsKeyword), Syntax.Token(SyntaxKind.OpenBraceToken), constraints, Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <summary>
        ''' One of the type parameter constraints clauses. This represents a constraint
        ''' clause in the form of "As { Constraints }".
        ''' </summary>
        ''' <param name="constraints">
        ''' A list of the supplied constraints. If no constraints were supplied, an empty
        ''' list is returned.
        ''' </param>
        Public Shared Function TypeParameterMultipleConstraintClause(ParamArray constraints As ConstraintSyntax()) As TypeParameterMultipleConstraintClauseSyntax
            Return Syntax.TypeParameterMultipleConstraintClause(Syntax.Token(SyntaxKind.AsKeyword), Syntax.Token(SyntaxKind.OpenBraceToken), Syntax.SeparatedList(Of ConstraintSyntax)().Add(SyntaxKind.CommaToken, constraints), Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        ''' <param name="constraintKeyword">
        ''' The "New", "Class" or "Structure" keyword that denotes the kind of special
        ''' constraint.
        ''' </param>
        Public Shared Function NewConstraint(constraintKeyword As SyntaxToken) As SpecialConstraintSyntax
            Select Case constraintKeyword.Kind
                Case SyntaxKind.NewKeyword:
                Case SyntaxKind.ClassKeyword:
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("constraintKeyword")
             End Select
            Return New SpecialConstraintSyntax(SyntaxKind.NewConstraint, Nothing, Nothing, DirectCast(constraintKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        ''' <param name="constraintKeyword">
        ''' The "New", "Class" or "Structure" keyword that denotes the kind of special
        ''' constraint.
        ''' </param>
        Public Shared Function ClassConstraint(constraintKeyword As SyntaxToken) As SpecialConstraintSyntax
            Select Case constraintKeyword.Kind
                Case SyntaxKind.NewKeyword:
                Case SyntaxKind.ClassKeyword:
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("constraintKeyword")
             End Select
            Return New SpecialConstraintSyntax(SyntaxKind.ClassConstraint, Nothing, Nothing, DirectCast(constraintKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        ''' <param name="constraintKeyword">
        ''' The "New", "Class" or "Structure" keyword that denotes the kind of special
        ''' constraint.
        ''' </param>
        Public Shared Function StructureConstraint(constraintKeyword As SyntaxToken) As SpecialConstraintSyntax
            Select Case constraintKeyword.Kind
                Case SyntaxKind.NewKeyword:
                Case SyntaxKind.ClassKeyword:
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("constraintKeyword")
             End Select
            Return New SpecialConstraintSyntax(SyntaxKind.StructureConstraint, Nothing, Nothing, DirectCast(constraintKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' One of the special type parameter constraints: New, Class or Structure. Which
        ''' kind of special constraint it is can be obtained from the Kind property and is
        ''' one of: NewConstraint, ReferenceConstraint or ValueConstraint.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' SpecialConstraintSyntax. One of NewConstraint, ClassConstraint,
        ''' StructureConstraint.
        ''' </param>
        ''' <param name="constraintKeyword">
        ''' The "New", "Class" or "Structure" keyword that denotes the kind of special
        ''' constraint.
        ''' </param>
        Public Shared Function SpecialConstraint(ByVal kind As SyntaxKind, constraintKeyword As SyntaxToken) As SpecialConstraintSyntax
            If Not kind.IsSpecialConstraint Then
                Throw New ArgumentException("kind")
            End If
            Select Case constraintKeyword.Kind
                Case SyntaxKind.NewKeyword:
                Case SyntaxKind.ClassKeyword:
                Case SyntaxKind.StructureKeyword
                Case Else
                    Throw new ArgumentException("constraintKeyword")
             End Select
            Return New SpecialConstraintSyntax(kind, Nothing, Nothing, DirectCast(constraintKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a type parameter constraint that is a type.
        ''' </summary>
        ''' <param name="type">
        ''' The type describing the constraint.
        ''' </param>
        Public Shared Function TypeConstraint(type As TypeSyntax) As TypeConstraintSyntax
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.NullableType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New TypeConstraintSyntax(SyntaxKind.TypeConstraint, Nothing, Nothing, type)
        End Function


        ''' <summary>
        ''' Represents a name and value in an EnumDeclarationBlock.
        ''' </summary>
        ''' <param name="initializer">
        ''' An optional value for the enum member.
        ''' </param>
        Public Shared Function EnumMemberDeclaration(attributes As SyntaxList(of AttributeBlockSyntax), identifier As SyntaxToken, initializer As EqualsValueSyntax) As EnumMemberDeclarationSyntax
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New EnumMemberDeclarationSyntax(SyntaxKind.EnumMemberDeclaration, Nothing, Nothing, attributes.Node, DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), initializer)
        End Function


        ''' <summary>
        ''' Represents a name and value in an EnumDeclarationBlock.
        ''' </summary>
        Public Shared Function EnumMemberDeclaration(identifier As SyntaxToken) As EnumMemberDeclarationSyntax
            Return Syntax.EnumMemberDeclaration(Nothing, identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents a name and value in an EnumDeclarationBlock.
        ''' </summary>
        Public Shared Function EnumMemberDeclaration(identifier As String) As EnumMemberDeclarationSyntax
            Return Syntax.EnumMemberDeclaration(Nothing, Syntax.Identifier(identifier), Nothing)
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function SubBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.SubBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function SubBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.SubBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function SubBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.SubBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function FunctionBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.FunctionBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function FunctionBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.FunctionBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function FunctionBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.FunctionBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function ConstructorBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.ConstructorBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function ConstructorBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.ConstructorBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function ConstructorBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.ConstructorBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function OperatorBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.OperatorBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function OperatorBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.OperatorBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function OperatorBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.OperatorBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertyGetBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.PropertyGetBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertyGetBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.PropertyGetBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertyGetBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.PropertyGetBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertySetBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.PropertySetBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertySetBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.PropertySetBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function PropertySetBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.PropertySetBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function AddHandlerBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.AddHandlerBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function AddHandlerBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.AddHandlerBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function AddHandlerBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.AddHandlerBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RemoveHandlerBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.RemoveHandlerBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RemoveHandlerBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.RemoveHandlerBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RemoveHandlerBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.RemoveHandlerBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RaiseEventBlock(begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(SyntaxKind.RaiseEventBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RaiseEventBlock(begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.RaiseEventBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function RaiseEventBlock(begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.RaiseEventBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of MethodBlockSyntax.
        ''' One of SubBlock, FunctionBlock, ConstructorBlock, OperatorBlock,
        ''' PropertyGetBlock, PropertySetBlock, AddHandlerBlock, RemoveHandlerBlock,
        ''' RaiseEventBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function MethodBlock(ByVal kind As SyntaxKind, begin As MethodBaseSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            If Not kind.IsMethodBlock Then
                Throw New ArgumentException("kind")
            End If
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MethodBlockSyntax(kind, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of MethodBlockSyntax.
        ''' One of SubBlock, FunctionBlock, ConstructorBlock, OperatorBlock,
        ''' PropertyGetBlock, PropertySetBlock, AddHandlerBlock, RemoveHandlerBlock,
        ''' RaiseEventBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function MethodBlock(ByVal kind As SyntaxKind, begin As MethodBaseSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.MethodBlock(kind, begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a block member declaration: A declaration that has a beginning
        ''' declaration, a body of executable statements and an end statement. Examples
        ''' include methods, constructors, operators, property accessors and custom event
        ''' accessors.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of MethodBlockSyntax.
        ''' One of SubBlock, FunctionBlock, ConstructorBlock, OperatorBlock,
        ''' PropertyGetBlock, PropertySetBlock, AddHandlerBlock, RemoveHandlerBlock,
        ''' RaiseEventBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The declaration that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The End XXX statement that ends the block declaration.
        ''' </param>
        Public Shared Function MethodBlock(ByVal kind As SyntaxKind, begin As MethodBaseSyntax, [end] As EndBlockStatementSyntax) As MethodBlockSyntax
            Return Syntax.MethodBlock(kind, begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a block property declaration: A declaration that has a beginning
        ''' declaration, some get or set accessor blocks and an end statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The property declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="accessors">
        ''' The accessor blocks contained in the property, between the Property and the End
        ''' Property statements.
        ''' </param>
        ''' <param name="end">
        ''' The End Property statement that ends the block.
        ''' </param>
        Public Shared Function PropertyBlock(begin As PropertyStatementSyntax, beginTerminator As SyntaxToken, accessors As SeparatedSyntaxList(Of MethodBlockSyntax), [end] As EndBlockStatementSyntax) As PropertyBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.PropertyStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndPropertyStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New PropertyBlockSyntax(SyntaxKind.PropertyBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), accessors.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a block property declaration: A declaration that has a beginning
        ''' declaration, some get or set accessor blocks and an end statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The property declaration that begins the block.
        ''' </param>
        ''' <param name="accessors">
        ''' The accessor blocks contained in the property, between the Property and the End
        ''' Property statements.
        ''' </param>
        Public Shared Function PropertyBlock(begin As PropertyStatementSyntax, accessors As SeparatedSyntaxList(Of MethodBlockSyntax)) As PropertyBlockSyntax
            Return Syntax.PropertyBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), accessors, Syntax.EndPropertyStatement())
        End Function


        ''' <summary>
        ''' Represents a custom event declaration: A declaration that has a beginning event
        ''' declaration, some accessor blocks and an end statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The event declaration that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="accessors">
        ''' The accessor blocks contained in the custom event declaration, between the
        ''' Event statement and the End Event statement.
        ''' </param>
        ''' <param name="end">
        ''' The End Event statement that ends the block.
        ''' </param>
        Public Shared Function EventBlock(begin As EventStatementSyntax, beginTerminator As SyntaxToken, accessors As SeparatedSyntaxList(Of MethodBlockSyntax), [end] As EndBlockStatementSyntax) As EventBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.EventStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndEventStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New EventBlockSyntax(SyntaxKind.EventBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), accessors.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a custom event declaration: A declaration that has a beginning event
        ''' declaration, some accessor blocks and an end statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The event declaration that begins the block.
        ''' </param>
        ''' <param name="accessors">
        ''' The accessor blocks contained in the custom event declaration, between the
        ''' Event statement and the End Event statement.
        ''' </param>
        Public Shared Function EventBlock(begin As EventStatementSyntax, accessors As SeparatedSyntaxList(Of MethodBlockSyntax)) As EventBlockSyntax
            Return Syntax.EventBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), accessors, Syntax.EndEventStatement())
        End Function


        ''' <summary>
        ''' Represents the parameter list in a method declaration.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token that introduces the parameter list. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="parameters">
        ''' The list of parameters. If no parameter list was present, Nothing is returned.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token that concludes the parameter list. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        Public Shared Function ParameterList(openParenToken As SyntaxToken, parameters As SeparatedSyntaxList(Of ParameterSyntax), closeParenToken As SyntaxToken) As ParameterListSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ParameterListSyntax(SyntaxKind.ParameterList, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), parameters.Node, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the parameter list in a method declaration.
        ''' </summary>
        ''' <param name="parameters">
        ''' The list of parameters. If no parameter list was present, Nothing is returned.
        ''' </param>
        Public Shared Function ParameterList(parameters As SeparatedSyntaxList(Of ParameterSyntax)) As ParameterListSyntax
            Return Syntax.ParameterList(Syntax.Token(SyntaxKind.OpenParenToken), parameters, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents the parameter list in a method declaration.
        ''' </summary>
        Public Shared Function ParameterList() As ParameterListSyntax
            Return Syntax.ParameterList(Syntax.Token(SyntaxKind.OpenParenToken), Nothing, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="handlesClause">
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function SubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New MethodStatementSyntax(SyntaxKind.SubStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause, handlesClause, implementsClause)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="handlesClause">
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function SubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            Return Syntax.SubStatement(attributes, modifiers, Syntax.Token(SyntaxKind.SubKeyword), identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function SubStatement(identifier As SyntaxToken) As MethodStatementSyntax
            Return Syntax.SubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.SubKeyword), identifier, Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function SubStatement(identifier As String) As MethodStatementSyntax
            Return Syntax.SubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.SubKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="handlesClause">
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function FunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New MethodStatementSyntax(SyntaxKind.FunctionStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause, handlesClause, implementsClause)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="handlesClause">
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function FunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            Return Syntax.FunctionStatement(attributes, modifiers, Syntax.Token(SyntaxKind.FunctionKeyword), identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function FunctionStatement(identifier As SyntaxToken) As MethodStatementSyntax
            Return Syntax.FunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.FunctionKeyword), identifier, Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function FunctionStatement(identifier As String) As MethodStatementSyntax
            Return Syntax.FunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.FunctionKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' MethodStatementSyntax. One of SubStatement, FunctionStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this method.
        ''' If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="handlesClause">
        ''' If present, a Handles clause indicated the events that this method handles.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function MethodStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax
            If Not kind.IsMethodStatement Then
                Throw New ArgumentException("kind")
            End If
            If keyword.Kind <> GetMethodStatementKeywordKind(kind) Then
                Throw new ArgumentException("keyword")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New MethodStatementSyntax(kind, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause, handlesClause, implementsClause)
        End Function

        Private Shared Function GetMethodStatementKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.SubStatement
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.FunctionStatement
                    Return SyntaxKind.FunctionKeyword
                Case Else
                    Throw New ArgumentException("Keyword")
            End Select
        End Function

        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' MethodStatementSyntax. One of SubStatement, FunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function MethodStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As SyntaxToken) As MethodStatementSyntax
            Return Syntax.MethodStatement(kind, Nothing, Nothing, keyword, identifier, Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The statement that declares a Sub or Function. If this method has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' MethodStatementSyntax. One of SubStatement, FunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        Public Shared Function MethodStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As String) As MethodStatementSyntax
            Return Syntax.MethodStatement(kind, Nothing, Nothing, keyword, Syntax.Identifier(identifier), Nothing, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a constructor. This statement will be the Begin of a
        ''' BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
        ''' will be the Body of that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="newKeyword">
        ''' The "New" keyword in the constructor declaration.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function ConstructorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, newKeyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As ConstructorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case newKeyword.Kind
                Case SyntaxKind.NewKeyword
                Case Else
                    Throw new ArgumentException("newKeyword")
             End Select
            Return New ConstructorStatementSyntax(SyntaxKind.ConstructorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(newKeyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a constructor. This statement will be the Begin of a
        ''' BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
        ''' will be the Body of that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function ConstructorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As ConstructorStatementSyntax
            Return Syntax.ConstructorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.SubKeyword), Syntax.Token(SyntaxKind.NewKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a constructor. This statement will be the Begin of a
        ''' BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
        ''' will be the Body of that BlockStatement.
        ''' </summary>
        Public Shared Function ConstructorStatement() As ConstructorStatementSyntax
            Return Syntax.ConstructorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.SubKeyword), Syntax.Token(SyntaxKind.NewKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="declareKeyword">
        ''' The "Declare" keyword.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libKeyword">
        ''' The "Lib" keyword.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasKeyword">
        ''' If present, the "Alias" keyword. If not present, returns Nothing.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareSubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Select Case declareKeyword.Kind
                Case SyntaxKind.DeclareKeyword
                Case Else
                    Throw new ArgumentException("declareKeyword")
             End Select
            Select Case keyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case libKeyword.Kind
                Case SyntaxKind.LibKeyword
                Case Else
                    Throw new ArgumentException("libKeyword")
             End Select
            if libraryName Is Nothing Then
                Throw New ArgumentNullException("libraryName")
            End If
            Select Case libraryName.Kind
                Case SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression
                Case Else
                    Throw new ArgumentException("libraryName")
             End Select
            Return New DeclareStatementSyntax(SyntaxKind.DeclareSubStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(declareKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(charsetKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(libKeyword.Node, InternalSyntax.KeywordSyntax), libraryName, DirectCast(aliasKeyword.Node, InternalSyntax.KeywordSyntax), aliasName, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareSubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareSubStatement(attributes, modifiers, Syntax.Token(SyntaxKind.DeclareKeyword), charsetKeyword, Syntax.Token(SyntaxKind.SubKeyword), identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, aliasName, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareSubStatement(identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareSubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, Syntax.Token(SyntaxKind.SubKeyword), identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareSubStatement(identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareSubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, Syntax.Token(SyntaxKind.SubKeyword), Syntax.Identifier(identifier), Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="declareKeyword">
        ''' The "Declare" keyword.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libKeyword">
        ''' The "Lib" keyword.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasKeyword">
        ''' If present, the "Alias" keyword. If not present, returns Nothing.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareFunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Select Case declareKeyword.Kind
                Case SyntaxKind.DeclareKeyword
                Case Else
                    Throw new ArgumentException("declareKeyword")
             End Select
            Select Case keyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case libKeyword.Kind
                Case SyntaxKind.LibKeyword
                Case Else
                    Throw new ArgumentException("libKeyword")
             End Select
            if libraryName Is Nothing Then
                Throw New ArgumentNullException("libraryName")
            End If
            Select Case libraryName.Kind
                Case SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression
                Case Else
                    Throw new ArgumentException("libraryName")
             End Select
            Return New DeclareStatementSyntax(SyntaxKind.DeclareFunctionStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(declareKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(charsetKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(libKeyword.Node, InternalSyntax.KeywordSyntax), libraryName, DirectCast(aliasKeyword.Node, InternalSyntax.KeywordSyntax), aliasName, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareFunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareFunctionStatement(attributes, modifiers, Syntax.Token(SyntaxKind.DeclareKeyword), charsetKeyword, Syntax.Token(SyntaxKind.FunctionKeyword), identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, aliasName, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareFunctionStatement(identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareFunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, Syntax.Token(SyntaxKind.FunctionKeyword), identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareFunctionStatement(identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareFunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, Syntax.Token(SyntaxKind.FunctionKeyword), Syntax.Identifier(identifier), Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="declareKeyword">
        ''' The "Declare" keyword.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libKeyword">
        ''' The "Lib" keyword.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasKeyword">
        ''' If present, the "Alias" keyword. If not present, returns Nothing.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            If Not kind.IsDeclareStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case declareKeyword.Kind
                Case SyntaxKind.DeclareKeyword
                Case Else
                    Throw new ArgumentException("declareKeyword")
             End Select
            If keyword.Kind <> GetDeclareStatementKeywordKind(kind) Then
                Throw new ArgumentException("keyword")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case libKeyword.Kind
                Case SyntaxKind.LibKeyword
                Case Else
                    Throw new ArgumentException("libKeyword")
             End Select
            if libraryName Is Nothing Then
                Throw New ArgumentNullException("libraryName")
            End If
            Select Case libraryName.Kind
                Case SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression
                Case Else
                    Throw new ArgumentException("libraryName")
             End Select
            Return New DeclareStatementSyntax(kind, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(declareKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(charsetKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(libKeyword.Node, InternalSyntax.KeywordSyntax), libraryName, DirectCast(aliasKeyword.Node, InternalSyntax.KeywordSyntax), aliasName, parameterList, asClause)
        End Function

        Private Shared Function GetDeclareStatementKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.DeclareSubStatement
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.DeclareFunctionStatement
                    Return SyntaxKind.FunctionKeyword
                Case Else
                    Throw New ArgumentException("Keyword")
            End Select
        End Function

        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="charsetKeyword">
        ''' If present, the keyword that defines the string translation semantics of the
        ''' external method.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        ''' <param name="aliasName">
        ''' The string literal with the alias. If not present, returns Nothing.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DeclareStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareStatement(kind, attributes, modifiers, Syntax.Token(SyntaxKind.DeclareKeyword), charsetKeyword, keyword, identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, aliasName, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareStatement(kind, Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, keyword, identifier, Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A Declare statement that declares an external DLL method.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the method being declared.
        ''' </param>
        ''' <param name="libraryName">
        ''' The string literal with the library name.
        ''' </param>
        Public Shared Function DeclareStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax
            Return Syntax.DeclareStatement(kind, Nothing, Nothing, Syntax.Token(SyntaxKind.DeclareKeyword), Nothing, keyword, Syntax.Identifier(identifier), Syntax.Token(SyntaxKind.LibKeyword), libraryName, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="delegateKeyword">
        ''' The "Delegate" keyword.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateSubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Select Case delegateKeyword.Kind
                Case SyntaxKind.DelegateKeyword
                Case Else
                    Throw new ArgumentException("delegateKeyword")
             End Select
            Select Case keyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New DelegateStatementSyntax(SyntaxKind.DelegateSubStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(delegateKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateSubStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Return Syntax.DelegateSubStatement(attributes, modifiers, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.SubKeyword), identifier, typeParameterList, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateSubStatement(identifier As SyntaxToken) As DelegateStatementSyntax
            Return Syntax.DelegateSubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.SubKeyword), identifier, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateSubStatement(identifier As String) As DelegateStatementSyntax
            Return Syntax.DelegateSubStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.SubKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="delegateKeyword">
        ''' The "Delegate" keyword.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateFunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Select Case delegateKeyword.Kind
                Case SyntaxKind.DelegateKeyword
                Case Else
                    Throw new ArgumentException("delegateKeyword")
             End Select
            Select Case keyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New DelegateStatementSyntax(SyntaxKind.DelegateFunctionStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(delegateKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateFunctionStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Return Syntax.DelegateFunctionStatement(attributes, modifiers, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.FunctionKeyword), identifier, typeParameterList, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateFunctionStatement(identifier As SyntaxToken) As DelegateStatementSyntax
            Return Syntax.DelegateFunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.FunctionKeyword), identifier, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateFunctionStatement(identifier As String) As DelegateStatementSyntax
            Return Syntax.DelegateFunctionStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), Syntax.Token(SyntaxKind.FunctionKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DelegateStatementSyntax. One of DelegateSubStatement,
        ''' DelegateFunctionStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="delegateKeyword">
        ''' The "Delegate" keyword.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            If Not kind.IsDelegateStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case delegateKeyword.Kind
                Case SyntaxKind.DelegateKeyword
                Case Else
                    Throw new ArgumentException("delegateKeyword")
             End Select
            If keyword.Kind <> GetDelegateStatementKeywordKind(kind) Then
                Throw new ArgumentException("keyword")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New DelegateStatementSyntax(kind, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(delegateKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeParameterList, parameterList, asClause)
        End Function

        Private Shared Function GetDelegateStatementKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.DelegateSubStatement
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.DelegateFunctionStatement
                    Return SyntaxKind.FunctionKeyword
                Case Else
                    Throw New ArgumentException("Keyword")
            End Select
        End Function

        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DelegateStatementSyntax. One of DelegateSubStatement,
        ''' DelegateFunctionStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        ''' <param name="typeParameterList">
        ''' If present, a type parameter list with generic type parameters for this
        ''' delegate. If no generic type parameters were present, Nothing is returned.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function DelegateStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As DelegateStatementSyntax
            Return Syntax.DelegateStatement(kind, attributes, modifiers, Syntax.Token(SyntaxKind.DelegateKeyword), keyword, identifier, typeParameterList, parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DelegateStatementSyntax. One of DelegateSubStatement,
        ''' DelegateFunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As SyntaxToken) As DelegateStatementSyntax
            Return Syntax.DelegateStatement(kind, Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), keyword, identifier, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares a delegate type.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' DelegateStatementSyntax. One of DelegateSubStatement,
        ''' DelegateFunctionStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the delegate being declared.
        ''' </param>
        Public Shared Function DelegateStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken, identifier As String) As DelegateStatementSyntax
            Return Syntax.DelegateStatement(kind, Nothing, Nothing, Syntax.Token(SyntaxKind.DelegateKeyword), keyword, Syntax.Identifier(identifier), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares an event. If the event being declared is a custom
        ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
        ''' accessors will be part of the Accessors of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="customKeyword">
        ''' The optional Custom keyword for custom event declarations.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the event being declared.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicates the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function EventStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, customKeyword As SyntaxToken, keyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, implementsClause As ImplementsClauseSyntax) As EventStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.EventKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New EventStatementSyntax(SyntaxKind.EventStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(customKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), parameterList, asClause, implementsClause)
        End Function


        ''' <summary>
        ''' A statement that declares an event. If the event being declared is a custom
        ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
        ''' accessors will be part of the Accessors of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the event being declared.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicates the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function EventStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, implementsClause As ImplementsClauseSyntax) As EventStatementSyntax
            Return Syntax.EventStatement(attributes, modifiers, Nothing, Syntax.Token(SyntaxKind.EventKeyword), identifier, parameterList, asClause, implementsClause)
        End Function


        ''' <summary>
        ''' A statement that declares an event. If the event being declared is a custom
        ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
        ''' accessors will be part of the Accessors of that node.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the event being declared.
        ''' </param>
        Public Shared Function EventStatement(identifier As SyntaxToken) As EventStatementSyntax
            Return Syntax.EventStatement(Nothing, Nothing, Nothing, Syntax.Token(SyntaxKind.EventKeyword), identifier, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares an event. If the event being declared is a custom
        ''' event, this statement will be the Begin of a PropertyOrEventBlock, and the
        ''' accessors will be part of the Accessors of that node.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the event being declared.
        ''' </param>
        Public Shared Function EventStatement(identifier As String) As EventStatementSyntax
            Return Syntax.EventStatement(Nothing, Nothing, Nothing, Syntax.Token(SyntaxKind.EventKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' A statement that declares an operator. If this operator has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="operator">
        ''' The operator being defined.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function OperatorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, [operator] As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As OperatorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.OperatorKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case [operator].Kind
                Case SyntaxKind.CTypeKeyword:
                Case SyntaxKind.IsTrueKeyword:
                Case SyntaxKind.IsFalseKeyword:
                Case SyntaxKind.NotKeyword:
                Case SyntaxKind.PlusToken:
                Case SyntaxKind.MinusToken:
                Case SyntaxKind.AsteriskToken:
                Case SyntaxKind.SlashToken:
                Case SyntaxKind.CaretToken:
                Case SyntaxKind.BackslashToken:
                Case SyntaxKind.AmpersandToken:
                Case SyntaxKind.LessThanLessThanToken:
                Case SyntaxKind.GreaterThanGreaterThanToken:
                Case SyntaxKind.ModKeyword:
                Case SyntaxKind.OrKeyword:
                Case SyntaxKind.XorKeyword:
                Case SyntaxKind.AndKeyword:
                Case SyntaxKind.LikeKeyword:
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.LessThanGreaterThanToken:
                Case SyntaxKind.LessThanToken:
                Case SyntaxKind.LessThanEqualsToken:
                Case SyntaxKind.GreaterThanEqualsToken:
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("[operator]")
             End Select
            Return New OperatorStatementSyntax(SyntaxKind.OperatorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast([operator].Node, InternalSyntax.SyntaxToken), parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares an operator. If this operator has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="operator">
        ''' The operator being defined.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function OperatorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, [operator] As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As OperatorStatementSyntax
            Return Syntax.OperatorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.OperatorKeyword), [operator], parameterList, asClause)
        End Function


        ''' <summary>
        ''' A statement that declares an operator. If this operator has a body, this
        ''' statement will be the Begin of a BlockStatement with
        ''' Kind=MethodDeclarationBlock, and the body of the method will be the Body of
        ''' that BlockStatement.
        ''' </summary>
        ''' <param name="operator">
        ''' The operator being defined.
        ''' </param>
        Public Shared Function OperatorStatement([operator] As SyntaxToken) As OperatorStatementSyntax
            Return Syntax.OperatorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.OperatorKeyword), [operator], Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Statement that declares a property. If this property has accessors declared,
        ''' this statement will be the Begin of a BlockNode, and the accessors will be the
        ''' Body of that node. Auto properties are property declarations without a
        ''' PropertyBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the property being declared.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' If present, an "= initial-value" clause describing the initial value of the
        ''' property.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function PropertyStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.PropertyKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New PropertyStatementSyntax(SyntaxKind.PropertyStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), parameterList, asClause, initializer, implementsClause)
        End Function


        ''' <summary>
        ''' Statement that declares a property. If this property has accessors declared,
        ''' this statement will be the Begin of a BlockNode, and the accessors will be the
        ''' Body of that node. Auto properties are property declarations without a
        ''' PropertyBlock.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the property being declared.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' If present, an "= initial-value" clause describing the initial value of the
        ''' property.
        ''' </param>
        ''' <param name="implementsClause">
        ''' If present, an Implements clause indicated the interface methods that this
        ''' method implements.
        ''' </param>
        Public Shared Function PropertyStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax
            Return Syntax.PropertyStatement(attributes, modifiers, Syntax.Token(SyntaxKind.PropertyKeyword), identifier, parameterList, asClause, initializer, implementsClause)
        End Function


        ''' <summary>
        ''' Statement that declares a property. If this property has accessors declared,
        ''' this statement will be the Begin of a BlockNode, and the accessors will be the
        ''' Body of that node. Auto properties are property declarations without a
        ''' PropertyBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the property being declared.
        ''' </param>
        Public Shared Function PropertyStatement(identifier As SyntaxToken) As PropertyStatementSyntax
            Return Syntax.PropertyStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.PropertyKeyword), identifier, Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Statement that declares a property. If this property has accessors declared,
        ''' this statement will be the Begin of a BlockNode, and the accessors will be the
        ''' Body of that node. Auto properties are property declarations without a
        ''' PropertyBlock.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the property being declared.
        ''' </param>
        Public Shared Function PropertyStatement(identifier As String) As PropertyStatementSyntax
            Return Syntax.PropertyStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.PropertyKeyword), Syntax.Identifier(identifier), Nothing, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function GetAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.GetKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New AccessorStatementSyntax(SyntaxKind.GetAccessorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function GetAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Return Syntax.GetAccessorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.GetKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        Public Shared Function GetAccessorStatement() As AccessorStatementSyntax
            Return Syntax.GetAccessorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.GetKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function SetAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.SetKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New AccessorStatementSyntax(SyntaxKind.SetAccessorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function SetAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Return Syntax.SetAccessorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.SetKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        Public Shared Function SetAccessorStatement() As AccessorStatementSyntax
            Return Syntax.SetAccessorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.SetKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function AddHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.AddHandlerKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New AccessorStatementSyntax(SyntaxKind.AddHandlerAccessorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function AddHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Return Syntax.AddHandlerAccessorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.AddHandlerKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        Public Shared Function AddHandlerAccessorStatement() As AccessorStatementSyntax
            Return Syntax.AddHandlerAccessorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.AddHandlerKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function RemoveHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.RemoveHandlerKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New AccessorStatementSyntax(SyntaxKind.RemoveHandlerAccessorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function RemoveHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Return Syntax.RemoveHandlerAccessorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.RemoveHandlerKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        Public Shared Function RemoveHandlerAccessorStatement() As AccessorStatementSyntax
            Return Syntax.RemoveHandlerAccessorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.RemoveHandlerKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function RaiseEventHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Select Case keyword.Kind
                Case SyntaxKind.RaiseEventKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New AccessorStatementSyntax(SyntaxKind.RaiseEventHandlerAccessorStatement, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function RaiseEventHandlerAccessorStatement(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            Return Syntax.RaiseEventHandlerAccessorStatement(attributes, modifiers, Syntax.Token(SyntaxKind.RaiseEventKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        Public Shared Function RaiseEventHandlerAccessorStatement() As AccessorStatementSyntax
            Return Syntax.RaiseEventHandlerAccessorStatement(Nothing, Nothing, Syntax.Token(SyntaxKind.RaiseEventKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' AccessorStatementSyntax. One of GetAccessorStatement, SetAccessorStatement,
        ''' AddHandlerAccessorStatement, RemoveHandlerAccessorStatement,
        ''' RaiseEventHandlerAccessorStatement.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function AccessorStatement(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As AccessorStatementSyntax
            If Not kind.IsAccessorStatement Then
                Throw New ArgumentException("kind")
            End If
            If keyword.Kind <> GetAccessorStatementKeywordKind(kind) Then
                Throw new ArgumentException("keyword")
            End If
            Return New AccessorStatementSyntax(kind, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function

        Private Shared Function GetAccessorStatementKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.GetAccessorStatement
                    Return SyntaxKind.GetKeyword
                Case SyntaxKind.SetAccessorStatement
                    Return SyntaxKind.SetKeyword
                Case SyntaxKind.AddHandlerAccessorStatement
                    Return SyntaxKind.AddHandlerKeyword
                Case SyntaxKind.RemoveHandlerAccessorStatement
                    Return SyntaxKind.RemoveHandlerKeyword
                Case SyntaxKind.RaiseEventHandlerAccessorStatement
                    Return SyntaxKind.RaiseEventKeyword
                Case Else
                    Throw New ArgumentException("Keyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents a Get or Set accessor on a property declaration or an AddHandler,
        ''' RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
        ''' the node determines what kind of accessor this is. This statement is always the
        ''' Begin of a BlockNode, and the body of the accessor is the Body of that node.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' AccessorStatementSyntax. One of GetAccessorStatement, SetAccessorStatement,
        ''' AddHandlerAccessorStatement, RemoveHandlerAccessorStatement,
        ''' RaiseEventHandlerAccessorStatement.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        Public Shared Function AccessorStatement(ByVal kind As SyntaxKind, keyword As SyntaxToken) As AccessorStatementSyntax
            Return Syntax.AccessorStatement(kind, Nothing, Nothing, keyword, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the "Implements ..." clause on a type member, which describes which
        ''' interface members this member implements.
        ''' </summary>
        ''' <param name="implementsKeyword">
        ''' The "Implements" keyword.
        ''' </param>
        ''' <param name="interfaceMembers">
        ''' The list of interface members being implemented.
        ''' </param>
        Public Shared Function ImplementsClause(implementsKeyword As SyntaxToken, interfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax
            Select Case implementsKeyword.Kind
                Case SyntaxKind.ImplementsKeyword
                Case Else
                    Throw new ArgumentException("implementsKeyword")
             End Select
            Return New ImplementsClauseSyntax(SyntaxKind.ImplementsClause, Nothing, Nothing, DirectCast(implementsKeyword.Node, InternalSyntax.KeywordSyntax), interfaceMembers.Node)
        End Function


        ''' <summary>
        ''' Represents the "Implements ..." clause on a type member, which describes which
        ''' interface members this member implements.
        ''' </summary>
        ''' <param name="interfaceMembers">
        ''' The list of interface members being implemented.
        ''' </param>
        Public Shared Function ImplementsClause(interfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax
            Return Syntax.ImplementsClause(Syntax.Token(SyntaxKind.ImplementsKeyword), interfaceMembers)
        End Function


        ''' <summary>
        ''' Represents the "Implements ..." clause on a type member, which describes which
        ''' interface members this member implements.
        ''' </summary>
        ''' <param name="interfaceMembers">
        ''' The list of interface members being implemented.
        ''' </param>
        Public Shared Function ImplementsClause(ParamArray interfaceMembers As QualifiedNameSyntax()) As ImplementsClauseSyntax
            Return Syntax.ImplementsClause(Syntax.Token(SyntaxKind.ImplementsKeyword), Syntax.SeparatedList(Of QualifiedNameSyntax)().Add(SyntaxKind.CommaToken, interfaceMembers))
        End Function


        ''' <summary>
        ''' Represents the "Handles ..." clause on a method declaration that describes
        ''' which events this method handles.
        ''' </summary>
        ''' <param name="handlesKeyword">
        ''' The "Handles" keyword.
        ''' </param>
        ''' <param name="events">
        ''' The list of event members being handled.
        ''' </param>
        Public Shared Function HandlesClause(handlesKeyword As SyntaxToken, events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax
            Select Case handlesKeyword.Kind
                Case SyntaxKind.HandlesKeyword
                Case Else
                    Throw new ArgumentException("handlesKeyword")
             End Select
            Return New HandlesClauseSyntax(SyntaxKind.HandlesClause, Nothing, Nothing, DirectCast(handlesKeyword.Node, InternalSyntax.KeywordSyntax), events.Node)
        End Function


        ''' <summary>
        ''' Represents the "Handles ..." clause on a method declaration that describes
        ''' which events this method handles.
        ''' </summary>
        ''' <param name="events">
        ''' The list of event members being handled.
        ''' </param>
        Public Shared Function HandlesClause(events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax
            Return Syntax.HandlesClause(Syntax.Token(SyntaxKind.HandlesKeyword), events)
        End Function


        ''' <summary>
        ''' Represents the "Handles ..." clause on a method declaration that describes
        ''' which events this method handles.
        ''' </summary>
        ''' <param name="events">
        ''' The list of event members being handled.
        ''' </param>
        Public Shared Function HandlesClause(ParamArray events As HandlesClauseItemSyntax()) As HandlesClauseSyntax
            Return Syntax.HandlesClause(Syntax.Token(SyntaxKind.HandlesKeyword), Syntax.SeparatedList(Of HandlesClauseItemSyntax)().Add(SyntaxKind.CommaToken, events))
        End Function


        ''' <summary>
        ''' Represents a single handled event in a "Handles ..." clause.
        ''' </summary>
        ''' <param name="eventContainer">
        ''' The container of the event. This can either be an simple identifier
        ''' (identifying a members of the containing type) or one of the special keywords
        ''' "Me", "MyBase" or "MyClass".
        ''' </param>
        ''' <param name="dotToken">
        ''' The "." token.
        ''' </param>
        ''' <param name="eventMember">
        ''' The event being handled. This must be a simple identifier.
        ''' </param>
        Public Shared Function HandlesClauseItem(eventContainer As SyntaxToken, dotToken As SyntaxToken, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax
            Select Case eventContainer.Kind
                Case SyntaxKind.IdentifierToken:
                Case SyntaxKind.MyBaseKeyword:
                Case SyntaxKind.MeKeyword:
                Case SyntaxKind.MyClassKeyword
                Case Else
                    Throw new ArgumentException("eventContainer")
             End Select
            Select Case dotToken.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("dotToken")
             End Select
            if eventMember Is Nothing Then
                Throw New ArgumentNullException("eventMember")
            End If
            Select Case eventMember.Kind
                Case SyntaxKind.IdentifierName
                Case Else
                    Throw new ArgumentException("eventMember")
             End Select
            Return New HandlesClauseItemSyntax(SyntaxKind.HandlesClauseItem, Nothing, Nothing, DirectCast(eventContainer.Node, InternalSyntax.SyntaxToken), DirectCast(dotToken.Node, InternalSyntax.PunctuationSyntax), eventMember)
        End Function


        ''' <summary>
        ''' Represents a single handled event in a "Handles ..." clause.
        ''' </summary>
        ''' <param name="eventContainer">
        ''' The container of the event. This can either be an simple identifier
        ''' (identifying a members of the containing type) or one of the special keywords
        ''' "Me", "MyBase" or "MyClass".
        ''' </param>
        ''' <param name="eventMember">
        ''' The event being handled. This must be a simple identifier.
        ''' </param>
        Public Shared Function HandlesClauseItem(eventContainer As SyntaxToken, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax
            Return Syntax.HandlesClauseItem(eventContainer, Syntax.Token(SyntaxKind.DotToken), eventMember)
        End Function


        ''' <summary>
        ''' Represents a single handled event in a "Handles ..." clause.
        ''' </summary>
        ''' <param name="eventContainer">
        ''' The container of the event. This can either be an simple identifier
        ''' (identifying a members of the containing type) or one of the special keywords
        ''' "Me", "MyBase" or "MyClass".
        ''' </param>
        ''' <param name="eventMember">
        ''' The event being handled. This must be a simple identifier.
        ''' </param>
        Public Shared Function HandlesClauseItem(eventContainer As String, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax
            Return Syntax.HandlesClauseItem(Syntax.Identifier(eventContainer), Syntax.Token(SyntaxKind.DotToken), eventMember)
        End Function


        ''' <summary>
        ''' Represents the beginning of a declaration. However, not enough syntax is
        ''' detected to classify this as a field, method, property or event. This is node
        ''' always represents a syntax error.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="missingIdentifier">
        ''' The missing identifier token for this incomplete member. Should only be used to
        ''' have a location for error reporting.
        ''' </param>
        Public Shared Function IncompleteMember(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, missingIdentifier As SyntaxToken) As IncompleteMemberSyntax
            Return New IncompleteMemberSyntax(SyntaxKind.IncompleteMember, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(missingIdentifier.Node, InternalSyntax.IdentifierTokenSyntax))
        End Function


        ''' <summary>
        ''' Represents the beginning of a declaration. However, not enough syntax is
        ''' detected to classify this as a field, method, property or event. This is node
        ''' always represents a syntax error.
        ''' </summary>
        Public Shared Function IncompleteMember() As IncompleteMemberSyntax
            Return Syntax.IncompleteMember(Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the declaration of one or more variables or constants, either as
        ''' local variables or as class/structure members. In the case of a constant, it is
        ''' represented by having "Const" in the Modifiers (although technically "Const" is
        ''' not a modifier, it is represented as one in the parse trees.)
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, an empty list is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned.
        ''' </param>
        ''' <param name="declarators">
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </param>
        Public Shared Function FieldDeclaration(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax
            Return New FieldDeclarationSyntax(SyntaxKind.FieldDeclaration, Nothing, Nothing, attributes.Node, modifiers.Node, declarators.Node)
        End Function


        ''' <summary>
        ''' Represents the declaration of one or more variables or constants, either as
        ''' local variables or as class/structure members. In the case of a constant, it is
        ''' represented by having "Const" in the Modifiers (although technically "Const" is
        ''' not a modifier, it is represented as one in the parse trees.)
        ''' </summary>
        ''' <param name="declarators">
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </param>
        Public Shared Function FieldDeclaration(declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax
            Return Syntax.FieldDeclaration(Nothing, Nothing, declarators)
        End Function


        ''' <summary>
        ''' Represents the declaration of one or more variables or constants, either as
        ''' local variables or as class/structure members. In the case of a constant, it is
        ''' represented by having "Const" in the Modifiers (although technically "Const" is
        ''' not a modifier, it is represented as one in the parse trees.)
        ''' </summary>
        ''' <param name="declarators">
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </param>
        Public Shared Function FieldDeclaration(ParamArray declarators As VariableDeclaratorSyntax()) As FieldDeclarationSyntax
            Return Syntax.FieldDeclaration(Nothing, Nothing, Syntax.SeparatedList(Of VariableDeclaratorSyntax)().Add(SyntaxKind.CommaToken, declarators))
        End Function


        ''' <summary>
        ''' Represents the part of a variable or constant declaration statement that
        ''' associated one or more variable names with a type.
        ''' </summary>
        ''' <param name="names">
        ''' The names of the variables being declared. Each name might have a "?" or "()"
        ''' modifier(s) attached.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type, and possibly includes "New",
        ''' "With" or "From". If no As clause was present, Nothing is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' If present, an "= initial-value" clause describing the initial value of the
        ''' variable or the value of the constant.
        ''' </param>
        Public Shared Function VariableDeclarator(names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax), asClause As AsClauseSyntax, initializer As EqualsValueSyntax) As VariableDeclaratorSyntax
            Return New VariableDeclaratorSyntax(SyntaxKind.VariableDeclarator, Nothing, Nothing, names.Node, asClause, initializer)
        End Function


        ''' <summary>
        ''' Represents the part of a variable or constant declaration statement that
        ''' associated one or more variable names with a type.
        ''' </summary>
        ''' <param name="names">
        ''' The names of the variables being declared. Each name might have a "?" or "()"
        ''' modifier(s) attached.
        ''' </param>
        Public Shared Function VariableDeclarator(names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax)) As VariableDeclaratorSyntax
            Return Syntax.VariableDeclarator(names, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the part of a variable or constant declaration statement that
        ''' associated one or more variable names with a type.
        ''' </summary>
        ''' <param name="names">
        ''' The names of the variables being declared. Each name might have a "?" or "()"
        ''' modifier(s) attached.
        ''' </param>
        Public Shared Function VariableDeclarator(ParamArray names As ModifiedIdentifierSyntax()) As VariableDeclaratorSyntax
            Return Syntax.VariableDeclarator(Syntax.SeparatedList(Of ModifiedIdentifierSyntax)().Add(SyntaxKind.CommaToken, names), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents an "As {type-name}" clause that does not have an initializer or
        ''' "New". The type has optional attributes associated with it, although attributes
        ''' are not permitted in all possible places where this node occurs.
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The "As" keyword.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The type-name part of the As clause.
        ''' </param>
        Public Shared Function SimpleAsClause(asKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax) As SimpleAsClauseSyntax
            Select Case asKeyword.Kind
                Case SyntaxKind.AsKeyword
                Case Else
                    Throw new ArgumentException("asKeyword")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New SimpleAsClauseSyntax(SyntaxKind.SimpleAsClause, Nothing, Nothing, DirectCast(asKeyword.Node, InternalSyntax.KeywordSyntax), attributes.Node, type)
        End Function


        ''' <summary>
        ''' Represents an "As {type-name}" clause that does not have an initializer or
        ''' "New". The type has optional attributes associated with it, although attributes
        ''' are not permitted in all possible places where this node occurs.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The type-name part of the As clause.
        ''' </param>
        Public Shared Function SimpleAsClause(attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax) As SimpleAsClauseSyntax
            Return Syntax.SimpleAsClause(Syntax.Token(SyntaxKind.AsKeyword), attributes, type)
        End Function


        ''' <summary>
        ''' Represents an "As {type-name}" clause that does not have an initializer or
        ''' "New". The type has optional attributes associated with it, although attributes
        ''' are not permitted in all possible places where this node occurs.
        ''' </summary>
        ''' <param name="type">
        ''' The type-name part of the As clause.
        ''' </param>
        Public Shared Function SimpleAsClause(type As TypeSyntax) As SimpleAsClauseSyntax
            Return Syntax.SimpleAsClause(Syntax.Token(SyntaxKind.AsKeyword), Nothing, type)
        End Function


        ''' <summary>
        ''' Represents an "As New {type-name} [arguments] [initializers]" clause in a
        ''' declaration. The type has optional attributes associated with it, although
        ''' attributes are not permitted in many places where this node occurs (they are
        ''' permitted, for example, on automatically implemented properties.)
        ''' </summary>
        ''' <param name="asKeyword">
        ''' The "As" keyword.
        ''' </param>
        ''' <param name="newExpression">
        ''' The New expression
        ''' </param>
        Public Shared Function AsNewClause(asKeyword As SyntaxToken, newExpression As NewExpressionSyntax) As AsNewClauseSyntax
            Select Case asKeyword.Kind
                Case SyntaxKind.AsKeyword
                Case Else
                    Throw new ArgumentException("asKeyword")
             End Select
            if newExpression Is Nothing Then
                Throw New ArgumentNullException("newExpression")
            End If
            Select Case newExpression.Kind
                Case SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression
                Case Else
                    Throw new ArgumentException("newExpression")
             End Select
            Return New AsNewClauseSyntax(SyntaxKind.AsNewClause, Nothing, Nothing, DirectCast(asKeyword.Node, InternalSyntax.KeywordSyntax), newExpression)
        End Function


        ''' <summary>
        ''' Represents an "As New {type-name} [arguments] [initializers]" clause in a
        ''' declaration. The type has optional attributes associated with it, although
        ''' attributes are not permitted in many places where this node occurs (they are
        ''' permitted, for example, on automatically implemented properties.)
        ''' </summary>
        ''' <param name="newExpression">
        ''' The New expression
        ''' </param>
        Public Shared Function AsNewClause(newExpression As NewExpressionSyntax) As AsNewClauseSyntax
            Return Syntax.AsNewClause(Syntax.Token(SyntaxKind.AsKeyword), newExpression)
        End Function


        ''' <summary>
        ''' Represents a "With {...} clause used to initialize a new object's members.
        ''' </summary>
        ''' <param name="withKeyword">
        ''' The "With" keyword.
        ''' </param>
        ''' <param name="openBraceToken">
        ''' The "{" token.
        ''' </param>
        ''' <param name="initializers">
        ''' The comma-separated list of field initializers.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The "}" token.
        ''' </param>
        Public Shared Function ObjectMemberInitializer(withKeyword As SyntaxToken, openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of FieldInitializerSyntax), closeBraceToken As SyntaxToken) As ObjectMemberInitializerSyntax
            Select Case withKeyword.Kind
                Case SyntaxKind.WithKeyword
                Case Else
                    Throw new ArgumentException("withKeyword")
             End Select
            Select Case openBraceToken.Kind
                Case SyntaxKind.OpenBraceToken
                Case Else
                    Throw new ArgumentException("openBraceToken")
             End Select
            Select Case closeBraceToken.Kind
                Case SyntaxKind.CloseBraceToken
                Case Else
                    Throw new ArgumentException("closeBraceToken")
             End Select
            Return New ObjectMemberInitializerSyntax(SyntaxKind.ObjectMemberInitializer, Nothing, Nothing, DirectCast(withKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openBraceToken.Node, InternalSyntax.PunctuationSyntax), initializers.Node, DirectCast(closeBraceToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a "With {...} clause used to initialize a new object's members.
        ''' </summary>
        ''' <param name="initializers">
        ''' The comma-separated list of field initializers.
        ''' </param>
        Public Shared Function ObjectMemberInitializer(initializers As SeparatedSyntaxList(Of FieldInitializerSyntax)) As ObjectMemberInitializerSyntax
            Return Syntax.ObjectMemberInitializer(Syntax.Token(SyntaxKind.WithKeyword), Syntax.Token(SyntaxKind.OpenBraceToken), initializers, Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <summary>
        ''' Represents a "With {...} clause used to initialize a new object's members.
        ''' </summary>
        ''' <param name="initializers">
        ''' The comma-separated list of field initializers.
        ''' </param>
        Public Shared Function ObjectMemberInitializer(ParamArray initializers As FieldInitializerSyntax()) As ObjectMemberInitializerSyntax
            Return Syntax.ObjectMemberInitializer(Syntax.Token(SyntaxKind.WithKeyword), Syntax.Token(SyntaxKind.OpenBraceToken), Syntax.SeparatedList(Of FieldInitializerSyntax)().Add(SyntaxKind.CommaToken, initializers), Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <summary>
        ''' Represents a "From {...} clause used to initialize a new collection object's
        ''' elements.
        ''' </summary>
        ''' <param name="fromKeyword">
        ''' The "From" keyword.
        ''' </param>
        ''' <param name="initializer">
        ''' The initializer including the braces.
        ''' </param>
        Public Shared Function ObjectCollectionInitializer(fromKeyword As SyntaxToken, initializer As CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax
            Select Case fromKeyword.Kind
                Case SyntaxKind.FromKeyword
                Case Else
                    Throw new ArgumentException("fromKeyword")
             End Select
            if initializer Is Nothing Then
                Throw New ArgumentNullException("initializer")
            End If
            Select Case initializer.Kind
                Case SyntaxKind.CollectionInitializer
                Case Else
                    Throw new ArgumentException("initializer")
             End Select
            Return New ObjectCollectionInitializerSyntax(SyntaxKind.ObjectCollectionInitializer, Nothing, Nothing, DirectCast(fromKeyword.Node, InternalSyntax.KeywordSyntax), initializer)
        End Function


        ''' <summary>
        ''' Represents a "From {...} clause used to initialize a new collection object's
        ''' elements.
        ''' </summary>
        ''' <param name="initializer">
        ''' The initializer including the braces.
        ''' </param>
        Public Shared Function ObjectCollectionInitializer(initializer As CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax
            Return Syntax.ObjectCollectionInitializer(Syntax.Token(SyntaxKind.FromKeyword), initializer)
        End Function


        ''' <summary>
        ''' Represent a field initializer in a With {...} initializer where the field name
        ''' is inferred from the initializer expression.
        ''' </summary>
        ''' <param name="keyKeyword">
        ''' The optional "Key" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The value being assigned.
        ''' </param>
        Public Shared Function InferredFieldInitializer(keyKeyword As SyntaxToken, expression As ExpressionSyntax) As InferredFieldInitializerSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New InferredFieldInitializerSyntax(SyntaxKind.InferredFieldInitializer, Nothing, Nothing, DirectCast(keyKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represent a field initializer in a With {...} initializer where the field name
        ''' is inferred from the initializer expression.
        ''' </summary>
        ''' <param name="expression">
        ''' The value being assigned.
        ''' </param>
        Public Shared Function InferredFieldInitializer(expression As ExpressionSyntax) As InferredFieldInitializerSyntax
            Return Syntax.InferredFieldInitializer(Nothing, expression)
        End Function


        ''' <summary>
        ''' Represent a named field initializer in a With {...} initializer, such as ".x =
        ''' expr".
        ''' </summary>
        ''' <param name="keyKeyword">
        ''' The optional "Key" keyword.
        ''' </param>
        ''' <param name="dotToken">
        ''' The "." token.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the field being initialized.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The "=" token.
        ''' </param>
        ''' <param name="expression">
        ''' The value being assigned to the field.
        ''' </param>
        Public Shared Function NamedFieldInitializer(keyKeyword As SyntaxToken, dotToken As SyntaxToken, identifier As IdentifierNameSyntax, equalsToken As SyntaxToken, expression As ExpressionSyntax) As NamedFieldInitializerSyntax
            Select Case dotToken.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("dotToken")
             End Select
            if identifier Is Nothing Then
                Throw New ArgumentNullException("identifier")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierName
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New NamedFieldInitializerSyntax(SyntaxKind.NamedFieldInitializer, Nothing, Nothing, DirectCast(keyKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(dotToken.Node, InternalSyntax.PunctuationSyntax), identifier, DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), expression)
        End Function


        ''' <summary>
        ''' Represent a named field initializer in a With {...} initializer, such as ".x =
        ''' expr".
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the field being initialized.
        ''' </param>
        ''' <param name="expression">
        ''' The value being assigned to the field.
        ''' </param>
        Public Shared Function NamedFieldInitializer(identifier As IdentifierNameSyntax, expression As ExpressionSyntax) As NamedFieldInitializerSyntax
            Return Syntax.NamedFieldInitializer(Nothing, Syntax.Token(SyntaxKind.DotToken), identifier, Syntax.Token(SyntaxKind.EqualsToken), expression)
        End Function


        ''' <summary>
        ''' Represents an "= initializer" clause in a declaration for a variable,
        ''' pararameter or automatic property.
        ''' </summary>
        ''' <param name="equalsToken">
        ''' The "=" token.
        ''' </param>
        ''' <param name="value">
        ''' The expression used as the initial value.
        ''' </param>
        Public Shared Function EqualsValue(equalsToken As SyntaxToken, value As ExpressionSyntax) As EqualsValueSyntax
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New EqualsValueSyntax(SyntaxKind.EqualsValue, Nothing, Nothing, DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents an "= initializer" clause in a declaration for a variable,
        ''' pararameter or automatic property.
        ''' </summary>
        ''' <param name="value">
        ''' The expression used as the initial value.
        ''' </param>
        Public Shared Function EqualsValue(value As ExpressionSyntax) As EqualsValueSyntax
            Return Syntax.EqualsValue(Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represent a parameter to a method, property, constructor, etc.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this parameter. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of the modifier tokens "ByVal", "ByRef", "Optional" or "ParamArray" that
        ''' modify this parameter.
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the parameter, including any "?" or "()" modifiers.
        ''' </param>
        ''' <param name="asClause">
        ''' If present, the "As type-name" clause describing the type of the parameter. If
        ''' no As clause is present, Nothing is returned.
        ''' </param>
        ''' <param name="default">
        ''' If present, an initializer with the default value of the parameter. If no
        ''' default value is present, Nothing is returned.
        ''' </param>
        Public Shared Function Parameter(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, [default] As EqualsValueSyntax) As ParameterSyntax
            if identifier Is Nothing Then
                Throw New ArgumentNullException("identifier")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.ModifiedIdentifier
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New ParameterSyntax(SyntaxKind.Parameter, Nothing, Nothing, attributes.Node, modifiers.Node, identifier, asClause, [default])
        End Function


        ''' <summary>
        ''' Represent a parameter to a method, property, constructor, etc.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the parameter, including any "?" or "()" modifiers.
        ''' </param>
        Public Shared Function Parameter(identifier As ModifiedIdentifierSyntax) As ParameterSyntax
            Return Syntax.Parameter(Nothing, Nothing, identifier, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
        ''' used in parameter declarations and variable declarations.
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier that names the item being declared.
        ''' </param>
        ''' <param name="nullable">
        ''' The "?" token that indicates a nullable type.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </param>
        ''' <param name="arrayRankSpecifiers">
        ''' A list of array modifiers for the type. If no array modifiers were present, an
        ''' empty list is returned.
        ''' </param>
        Public Shared Function ModifiedIdentifier(identifier As SyntaxToken, nullable As SyntaxToken, arrayBounds As ArgumentListSyntax, arrayRankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax)) As ModifiedIdentifierSyntax
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New ModifiedIdentifierSyntax(SyntaxKind.ModifiedIdentifier, Nothing, Nothing, DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(nullable.Node, InternalSyntax.PunctuationSyntax), arrayBounds, arrayRankSpecifiers.Node)
        End Function


        ''' <summary>
        ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
        ''' used in parameter declarations and variable declarations.
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier that names the item being declared.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </param>
        Public Shared Function ModifiedIdentifier(identifier As SyntaxToken, arrayBounds As ArgumentListSyntax) As ModifiedIdentifierSyntax
            Return Syntax.ModifiedIdentifier(identifier, Nothing, arrayBounds, Nothing)
        End Function


        ''' <summary>
        ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
        ''' used in parameter declarations and variable declarations.
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier that names the item being declared.
        ''' </param>
        Public Shared Function ModifiedIdentifier(identifier As SyntaxToken) As ModifiedIdentifierSyntax
            Return Syntax.ModifiedIdentifier(identifier, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
        ''' used in parameter declarations and variable declarations.
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier that names the item being declared.
        ''' </param>
        Public Shared Function ModifiedIdentifier(identifier As String) As ModifiedIdentifierSyntax
            Return Syntax.ModifiedIdentifier(Syntax.Identifier(identifier), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a modifier that describes an array type, without bounds, such as
        ''' "()" or "(,)".
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="commaTokens">
        ''' The comma tokens in the array type. There is one less comma than the rank.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function ArrayRankSpecifier(openParenToken As SyntaxToken, commaTokens As SyntaxTokenList, closeParenToken As SyntaxToken) As ArrayRankSpecifierSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ArrayRankSpecifierSyntax(SyntaxKind.ArrayRankSpecifier, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), commaTokens.Node, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a modifier that describes an array type, without bounds, such as
        ''' "()" or "(,)".
        ''' </summary>
        Public Shared Function ArrayRankSpecifier() As ArrayRankSpecifierSyntax
            Return Syntax.ArrayRankSpecifier(Syntax.Token(SyntaxKind.OpenParenToken), Nothing, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a group of attributes within "&lt;" and "&gt;" brackets.
        ''' </summary>
        ''' <param name="lessThanToken">
        ''' The "&lt;" token.
        ''' </param>
        ''' <param name="attributes">
        ''' A comma separated list of attribute declarations in this attribute block.
        ''' </param>
        ''' <param name="greaterThanToken">
        ''' The "&gt;" token.
        ''' </param>
        Public Shared Function AttributeBlock(lessThanToken As SyntaxToken, attributes As SeparatedSyntaxList(Of AttributeSyntax), greaterThanToken As SyntaxToken) As AttributeBlockSyntax
            Select Case lessThanToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("lessThanToken")
             End Select
            Select Case greaterThanToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("greaterThanToken")
             End Select
            Return New AttributeBlockSyntax(SyntaxKind.AttributeBlock, Nothing, Nothing, DirectCast(lessThanToken.Node, InternalSyntax.PunctuationSyntax), attributes.Node, DirectCast(greaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a group of attributes within "&lt;" and "&gt;" brackets.
        ''' </summary>
        ''' <param name="attributes">
        ''' A comma separated list of attribute declarations in this attribute block.
        ''' </param>
        Public Shared Function AttributeBlock(attributes As SeparatedSyntaxList(Of AttributeSyntax)) As AttributeBlockSyntax
            Return Syntax.AttributeBlock(Syntax.Token(SyntaxKind.LessThanToken), attributes, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents a group of attributes within "&lt;" and "&gt;" brackets.
        ''' </summary>
        Public Shared Function AttributeBlock() As AttributeBlockSyntax
            Return Syntax.AttributeBlock(Syntax.Token(SyntaxKind.LessThanToken), Nothing, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        ''' <param name="target">
        ''' Optional attribute target. Assembly|Module :
        ''' </param>
        ''' <param name="name">
        ''' The name of the attribute.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list, if present. If no argument list was supplied, Nothing is
        ''' returned.
        ''' </param>
        Public Shared Function Attribute(target As AttributeTargetSyntax, name As TypeSyntax, argumentList As ArgumentListSyntax) As AttributeSyntax
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.NullableType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New AttributeSyntax(SyntaxKind.Attribute, Nothing, Nothing, target, name, argumentList)
        End Function


        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        ''' <param name="name">
        ''' The name of the attribute.
        ''' </param>
        Public Shared Function Attribute(name As TypeSyntax) As AttributeSyntax
            Return Syntax.Attribute(Nothing, name, Nothing)
        End Function


        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        ''' <param name="attributeModifier">
        ''' The "Assembly" or "Module" attribute modifier, is present. If no attribute
        ''' modifier is present, Nothing is returned.
        ''' </param>
        ''' <param name="colonToken">
        ''' The ":" token, if an attribute modifier is present. If no attribute modifier is
        ''' present, Nothing is returned.
        ''' </param>
        Public Shared Function AttributeTarget(attributeModifier As SyntaxToken, colonToken As SyntaxToken) As AttributeTargetSyntax
            Select Case attributeModifier.Kind
                Case SyntaxKind.AssemblyKeyword:
                Case SyntaxKind.ModuleKeyword
                Case Else
                    Throw new ArgumentException("attributeModifier")
             End Select
            Select Case colonToken.Kind
                Case SyntaxKind.ColonToken
                Case Else
                    Throw new ArgumentException("colonToken")
             End Select
            Return New AttributeTargetSyntax(SyntaxKind.AttributeTarget, Nothing, Nothing, DirectCast(attributeModifier.Node, InternalSyntax.KeywordSyntax), DirectCast(colonToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a single attribute declaration within an attribute block.
        ''' </summary>
        ''' <param name="attributeModifier">
        ''' The "Assembly" or "Module" attribute modifier, is present. If no attribute
        ''' modifier is present, Nothing is returned.
        ''' </param>
        Public Shared Function AttributeTarget(attributeModifier As SyntaxToken) As AttributeTargetSyntax
            Return Syntax.AttributeTarget(attributeModifier, Syntax.Token(SyntaxKind.ColonToken))
        End Function


        ''' <summary>
        ''' Represents a file-level attribute, in which the attributes have no other
        ''' syntactic element they are attached to.
        ''' </summary>
        ''' <param name="attributes">
        ''' The list of attribute blocks.
        ''' </param>
        Public Shared Function AttributesStatement(attributes As SyntaxList(of AttributeBlockSyntax)) As AttributesStatementSyntax
            Return New AttributesStatementSyntax(SyntaxKind.AttributesStatement, Nothing, Nothing, attributes.Node)
        End Function


        ''' <summary>
        ''' Represents a file-level attribute, in which the attributes have no other
        ''' syntactic element they are attached to.
        ''' </summary>
        Public Shared Function AttributesStatement() As AttributesStatementSyntax
            Return Syntax.AttributesStatement(Nothing)
        End Function


        ''' <summary>
        ''' Represent an expression in a statement context.
        ''' </summary>
        ''' <param name="questionToken">
        ''' "?" token, if present.
        ''' </param>
        ''' <param name="expression">
        ''' The expression.
        ''' </param>
        Public Shared Function ExpressionStatement(questionToken As SyntaxToken, expression As ExpressionSyntax) As ExpressionStatementSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New ExpressionStatementSyntax(SyntaxKind.ExpressionStatement, Nothing, Nothing, DirectCast(questionToken.Node, InternalSyntax.PunctuationSyntax), expression)
        End Function


        ''' <summary>
        ''' Represent an expression in a statement context.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression.
        ''' </param>
        Public Shared Function ExpressionStatement(expression As ExpressionSyntax) As ExpressionStatementSyntax
            Return Syntax.ExpressionStatement(Nothing, expression)
        End Function


        ''' <summary>
        ''' Represents a While...End While statement, including the While, body and End
        ''' While.
        ''' </summary>
        ''' <param name="begin">
        ''' The While statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the While...End While. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End While statement that ends the block.
        ''' </param>
        Public Shared Function WhileBlock(begin As WhileStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As WhileBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.WhileStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndWhileStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New WhileBlockSyntax(SyntaxKind.WhileBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a While...End While statement, including the While, body and End
        ''' While.
        ''' </summary>
        ''' <param name="begin">
        ''' The While statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the While...End While. This might be an empty list.
        ''' </param>
        Public Shared Function WhileBlock(begin As WhileStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As WhileBlockSyntax
            Return Syntax.WhileBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, Syntax.EndWhileStatement())
        End Function


        ''' <summary>
        ''' Represents a While...End While statement, including the While, body and End
        ''' While.
        ''' </summary>
        ''' <param name="begin">
        ''' The While statement that begins the block.
        ''' </param>
        Public Shared Function WhileBlock(begin As WhileStatementSyntax) As WhileBlockSyntax
            Return Syntax.WhileBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndWhileStatement())
        End Function


        ''' <summary>
        ''' Represents an entire Using...End Using statement, including the Using, body and
        ''' End Using statements.
        ''' </summary>
        ''' <param name="begin">
        ''' The UsingStatement that begins the Using...End Using block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the Using...End Using block. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The End Using statement that ends the block.
        ''' </param>
        Public Shared Function UsingBlock(begin As UsingStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As UsingBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.UsingStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndUsingStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New UsingBlockSyntax(SyntaxKind.UsingBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents an entire Using...End Using statement, including the Using, body and
        ''' End Using statements.
        ''' </summary>
        ''' <param name="begin">
        ''' The UsingStatement that begins the Using...End Using block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the Using...End Using block. This might be an empty
        ''' list.
        ''' </param>
        Public Shared Function UsingBlock(begin As UsingStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As UsingBlockSyntax
            Return Syntax.UsingBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, Syntax.EndUsingStatement())
        End Function


        ''' <summary>
        ''' Represents an entire Using...End Using statement, including the Using, body and
        ''' End Using statements.
        ''' </summary>
        ''' <param name="begin">
        ''' The UsingStatement that begins the Using...End Using block.
        ''' </param>
        Public Shared Function UsingBlock(begin As UsingStatementSyntax) As UsingBlockSyntax
            Return Syntax.UsingBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndUsingStatement())
        End Function


        ''' <summary>
        ''' Represents a entire SyncLock...End SyncLock block, including the SyncLock
        ''' statement, the enclosed statements, and the End SyncLock statment.
        ''' </summary>
        ''' <param name="begin">
        ''' The SyncLock statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the SyncLock...End SyncLock statement. This might
        ''' be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The End SyncLock statement that ends the block.
        ''' </param>
        Public Shared Function SyncLockBlock(begin As SyncLockStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As SyncLockBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SyncLockStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSyncLockStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New SyncLockBlockSyntax(SyntaxKind.SyncLockBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a entire SyncLock...End SyncLock block, including the SyncLock
        ''' statement, the enclosed statements, and the End SyncLock statment.
        ''' </summary>
        ''' <param name="begin">
        ''' The SyncLock statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the SyncLock...End SyncLock statement. This might
        ''' be an empty list.
        ''' </param>
        Public Shared Function SyncLockBlock(begin As SyncLockStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As SyncLockBlockSyntax
            Return Syntax.SyncLockBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, Syntax.EndSyncLockStatement())
        End Function


        ''' <summary>
        ''' Represents a entire SyncLock...End SyncLock block, including the SyncLock
        ''' statement, the enclosed statements, and the End SyncLock statment.
        ''' </summary>
        ''' <param name="begin">
        ''' The SyncLock statement that begins the block.
        ''' </param>
        Public Shared Function SyncLockBlock(begin As SyncLockStatementSyntax) As SyncLockBlockSyntax
            Return Syntax.SyncLockBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndSyncLockStatement())
        End Function


        ''' <summary>
        ''' Represents a With...End With block, include the With statement, the body of the
        ''' block and the End With statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The WithStatement that begins the With...End With block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the With...End With block. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The End With statement that ends the block.
        ''' </param>
        Public Shared Function WithBlock(begin As WithStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As WithBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.WithStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndWithStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New WithBlockSyntax(SyntaxKind.WithBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a With...End With block, include the With statement, the body of the
        ''' block and the End With statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The WithStatement that begins the With...End With block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the With...End With block. This might be an empty
        ''' list.
        ''' </param>
        Public Shared Function WithBlock(begin As WithStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As WithBlockSyntax
            Return Syntax.WithBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, Syntax.EndWithStatement())
        End Function


        ''' <summary>
        ''' Represents a With...End With block, include the With statement, the body of the
        ''' block and the End With statement.
        ''' </summary>
        ''' <param name="begin">
        ''' The WithStatement that begins the With...End With block.
        ''' </param>
        Public Shared Function WithBlock(begin As WithStatementSyntax) As WithBlockSyntax
            Return Syntax.WithBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndWithStatement())
        End Function


        ''' <summary>
        ''' Represents the declaration of one or more local variables or constants.
        ''' </summary>
        ''' <param name="modifiers">
        ''' The modifier token (Static, Dim or Const) that introduces this local variable
        ''' declaration.
        ''' </param>
        ''' <param name="declarators">
        ''' The list of variable declarator. Each declarator specifies one or more variable
        ''' names along with a type and/or initializer.
        ''' </param>
        Public Shared Function LocalDeclaration(modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As LocalDeclarationSyntax
            Return New LocalDeclarationSyntax(SyntaxKind.LocalDeclaration, Nothing, Nothing, modifiers.Node, declarators.Node)
        End Function


        ''' <summary>
        ''' Represents a label statement.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The name of the label. If the label is a line number, returns an IntegerLiteral
        ''' that is the line number, otherwise, returns an Identifier.
        ''' </param>
        Public Shared Function LabelStatement(labelToken As SyntaxToken) As LabelStatementSyntax
            Select Case labelToken.Kind
                Case SyntaxKind.IdentifierToken:
                Case SyntaxKind.IntegerLiteralToken
                Case Else
                    Throw new ArgumentException("labelToken")
             End Select
            Return New LabelStatementSyntax(SyntaxKind.LabelStatement, Nothing, Nothing, DirectCast(labelToken.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a label statement.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The name of the label. If the label is a line number, returns an IntegerLiteral
        ''' that is the line number, otherwise, returns an Identifier.
        ''' </param>
        Public Shared Function LabelStatement(labelToken As String) As LabelStatementSyntax
            Return Syntax.LabelStatement(Syntax.Identifier(labelToken))
        End Function


        ''' <summary>
        ''' Represents a "GoTo" statement.
        ''' </summary>
        ''' <param name="goToKeyword">
        ''' The "GoTo" keyword.
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, wraps an IntegerLiteral
        ''' that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function GoToStatement(goToKeyword As SyntaxToken, label As LabelSyntax) As GoToStatementSyntax
            Select Case goToKeyword.Kind
                Case SyntaxKind.GoToKeyword
                Case Else
                    Throw new ArgumentException("goToKeyword")
             End Select
            if label Is Nothing Then
                Throw New ArgumentNullException("label")
            End If
            Select Case label.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel
                Case Else
                    Throw new ArgumentException("label")
             End Select
            Return New GoToStatementSyntax(SyntaxKind.GoToStatement, Nothing, Nothing, DirectCast(goToKeyword.Node, InternalSyntax.KeywordSyntax), label)
        End Function


        ''' <summary>
        ''' Represents a "GoTo" statement.
        ''' </summary>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, wraps an IntegerLiteral
        ''' that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function GoToStatement(label As LabelSyntax) As GoToStatementSyntax
            Return Syntax.GoToStatement(Syntax.Token(SyntaxKind.GoToKeyword), label)
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function IdentifierLabel(labelToken As SyntaxToken) As LabelSyntax
            Select Case labelToken.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("labelToken")
             End Select
            Return New LabelSyntax(SyntaxKind.IdentifierLabel, Nothing, Nothing, DirectCast(labelToken.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function IdentifierLabel(labelToken As String) As LabelSyntax
            Return Syntax.IdentifierLabel(Syntax.Identifier(labelToken))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function NumericLabel(labelToken As SyntaxToken) As LabelSyntax
            Select Case labelToken.Kind
                Case SyntaxKind.IntegerLiteralToken
                Case Else
                    Throw new ArgumentException("labelToken")
             End Select
            Return New LabelSyntax(SyntaxKind.NumericLabel, Nothing, Nothing, DirectCast(labelToken.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        Public Shared Function NumericLabel() As LabelSyntax
            Return Syntax.NumericLabel(Syntax.Token(SyntaxKind.IntegerLiteralToken))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function NextLabel(labelToken As SyntaxToken) As LabelSyntax
            Select Case labelToken.Kind
                Case SyntaxKind.NextKeyword
                Case Else
                    Throw new ArgumentException("labelToken")
             End Select
            Return New LabelSyntax(SyntaxKind.NextLabel, Nothing, Nothing, DirectCast(labelToken.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        Public Shared Function NextLabel() As LabelSyntax
            Return Syntax.NextLabel(Syntax.Token(SyntaxKind.NextKeyword))
        End Function


        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of LabelSyntax. One of
        ''' IdentifierLabel, NumericLabel, NextLabel.
        ''' </param>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function Label(ByVal kind As SyntaxKind, labelToken As SyntaxToken) As LabelSyntax
            If Not kind.IsLabel Then
                Throw New ArgumentException("kind")
            End If
            If labelToken.Kind <> GetLabelLabelTokenKind(kind) Then
                Throw new ArgumentException("labelToken")
            End If
            Return New LabelSyntax(kind, Nothing, Nothing, DirectCast(labelToken.Node, InternalSyntax.SyntaxToken))
        End Function

        Private Shared Function GetLabelLabelTokenKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.IdentifierLabel
                    Return SyntaxKind.IdentifierToken
                Case SyntaxKind.NumericLabel
                    Return SyntaxKind.IntegerLiteralToken
                Case SyntaxKind.NextLabel
                    Return SyntaxKind.NextKeyword
                Case Else
                    Throw New ArgumentException("LabelToken")
            End Select
        End Function

        ''' <summary>
        ''' A label for a GoTo, Resume, or On Error statement. An identifier, line number,
        ''' or next keyword.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of LabelSyntax. One of
        ''' IdentifierLabel, NumericLabel, NextLabel.
        ''' </param>
        ''' <param name="labelToken">
        ''' The label name (identifier), line number (integer literal), or next keyword
        ''' token.
        ''' </param>
        Public Shared Function Label(ByVal kind As SyntaxKind, labelToken As String) As LabelSyntax
            Return Syntax.Label(kind, Syntax.Identifier(labelToken))
        End Function


        ''' <summary>
        ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
        ''' kind of statement this is.
        ''' </summary>
        ''' <param name="stopOrEndKeyword">
        ''' The "Stop" or "End" keyword.
        ''' </param>
        Public Shared Function StopStatement(stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax
            Select Case stopOrEndKeyword.Kind
                Case SyntaxKind.StopKeyword:
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("stopOrEndKeyword")
             End Select
            Return New StopOrEndStatementSyntax(SyntaxKind.StopStatement, Nothing, Nothing, DirectCast(stopOrEndKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
        ''' kind of statement this is.
        ''' </summary>
        ''' <param name="stopOrEndKeyword">
        ''' The "Stop" or "End" keyword.
        ''' </param>
        Public Shared Function EndStatement(stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax
            Select Case stopOrEndKeyword.Kind
                Case SyntaxKind.StopKeyword:
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("stopOrEndKeyword")
             End Select
            Return New StopOrEndStatementSyntax(SyntaxKind.EndStatement, Nothing, Nothing, DirectCast(stopOrEndKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a "Stop" or "End" statement. The Kind can be used to determine which
        ''' kind of statement this is.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' StopOrEndStatementSyntax. One of StopStatement, EndStatement.
        ''' </param>
        ''' <param name="stopOrEndKeyword">
        ''' The "Stop" or "End" keyword.
        ''' </param>
        Public Shared Function StopOrEndStatement(ByVal kind As SyntaxKind, stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax
            If Not kind.IsStopOrEndStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case stopOrEndKeyword.Kind
                Case SyntaxKind.StopKeyword:
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("stopOrEndKeyword")
             End Select
            Return New StopOrEndStatementSyntax(kind, Nothing, Nothing, DirectCast(stopOrEndKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitDoStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.DoKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitDoStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitDoStatement() As ExitStatementSyntax
            Return Syntax.ExitDoStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.DoKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitForStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.ForKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitForStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitForStatement() As ExitStatementSyntax
            Return Syntax.ExitForStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.ForKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitSubStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitSubStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitSubStatement() As ExitStatementSyntax
            Return Syntax.ExitSubStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.SubKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitFunctionStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitFunctionStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitFunctionStatement() As ExitStatementSyntax
            Return Syntax.ExitFunctionStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.FunctionKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitOperatorStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.OperatorKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitOperatorStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitOperatorStatement() As ExitStatementSyntax
            Return Syntax.ExitOperatorStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.OperatorKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitPropertyStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.PropertyKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitPropertyStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitPropertyStatement() As ExitStatementSyntax
            Return Syntax.ExitPropertyStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.PropertyKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitTryStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.TryKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitTryStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitTryStatement() As ExitStatementSyntax
            Return Syntax.ExitTryStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.TryKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitSelectStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.SelectKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitSelectStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitSelectStatement() As ExitStatementSyntax
            Return Syntax.ExitSelectStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.SelectKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitWhileStatement(exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ExitStatementSyntax(SyntaxKind.ExitWhileStatement, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        Public Shared Function ExitWhileStatement() As ExitStatementSyntax
            Return Syntax.ExitWhileStatement(Syntax.Token(SyntaxKind.ExitKeyword), Syntax.Token(SyntaxKind.WhileKeyword))
        End Function


        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of ExitStatementSyntax.
        ''' One of ExitDoStatement, ExitForStatement, ExitSubStatement,
        ''' ExitFunctionStatement, ExitOperatorStatement, ExitPropertyStatement,
        ''' ExitTryStatement, ExitSelectStatement, ExitWhileStatement.
        ''' </param>
        ''' <param name="exitKeyword">
        ''' The "Exit" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitStatement(ByVal kind As SyntaxKind, exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax
            If Not kind.IsExitStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case exitKeyword.Kind
                Case SyntaxKind.ExitKeyword
                Case Else
                    Throw new ArgumentException("exitKeyword")
             End Select
            If blockKeyword.Kind <> GetExitStatementBlockKeywordKind(kind) Then
                Throw new ArgumentException("blockKeyword")
            End If
            Return New ExitStatementSyntax(kind, Nothing, Nothing, DirectCast(exitKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function

        Private Shared Function GetExitStatementBlockKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.ExitDoStatement
                    Return SyntaxKind.DoKeyword
                Case SyntaxKind.ExitForStatement
                    Return SyntaxKind.ForKeyword
                Case SyntaxKind.ExitSubStatement
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.ExitFunctionStatement
                    Return SyntaxKind.FunctionKeyword
                Case SyntaxKind.ExitOperatorStatement
                    Return SyntaxKind.OperatorKeyword
                Case SyntaxKind.ExitPropertyStatement
                    Return SyntaxKind.PropertyKeyword
                Case SyntaxKind.ExitTryStatement
                    Return SyntaxKind.TryKeyword
                Case SyntaxKind.ExitSelectStatement
                    Return SyntaxKind.SelectKeyword
                Case SyntaxKind.ExitWhileStatement
                    Return SyntaxKind.WhileKeyword
                Case Else
                    Throw New ArgumentException("BlockKeyword")
            End Select
        End Function

        ''' <summary>
        ''' An exit statement. The kind of block being exited can be found by examining the
        ''' Kind.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of ExitStatementSyntax.
        ''' One of ExitDoStatement, ExitForStatement, ExitSubStatement,
        ''' ExitFunctionStatement, ExitOperatorStatement, ExitPropertyStatement,
        ''' ExitTryStatement, ExitSelectStatement, ExitWhileStatement.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The keyword describing the block to exit.
        ''' </param>
        Public Shared Function ExitStatement(ByVal kind As SyntaxKind, blockKeyword As SyntaxToken) As ExitStatementSyntax
            Return Syntax.ExitStatement(kind, Syntax.Token(SyntaxKind.ExitKeyword), blockKeyword)
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ''' <param name="continueKeyword">
        ''' The "Continue" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </param>
        Public Shared Function ContinueWhileStatement(continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            Select Case continueKeyword.Kind
                Case SyntaxKind.ContinueKeyword
                Case Else
                    Throw new ArgumentException("continueKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ContinueStatementSyntax(SyntaxKind.ContinueWhileStatement, Nothing, Nothing, DirectCast(continueKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        Public Shared Function ContinueWhileStatement() As ContinueStatementSyntax
            Return Syntax.ContinueWhileStatement(Syntax.Token(SyntaxKind.ContinueKeyword), Syntax.Token(SyntaxKind.WhileKeyword))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ''' <param name="continueKeyword">
        ''' The "Continue" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </param>
        Public Shared Function ContinueDoStatement(continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            Select Case continueKeyword.Kind
                Case SyntaxKind.ContinueKeyword
                Case Else
                    Throw new ArgumentException("continueKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.DoKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ContinueStatementSyntax(SyntaxKind.ContinueDoStatement, Nothing, Nothing, DirectCast(continueKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        Public Shared Function ContinueDoStatement() As ContinueStatementSyntax
            Return Syntax.ContinueDoStatement(Syntax.Token(SyntaxKind.ContinueKeyword), Syntax.Token(SyntaxKind.DoKeyword))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ''' <param name="continueKeyword">
        ''' The "Continue" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </param>
        Public Shared Function ContinueForStatement(continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            Select Case continueKeyword.Kind
                Case SyntaxKind.ContinueKeyword
                Case Else
                    Throw new ArgumentException("continueKeyword")
             End Select
            Select Case blockKeyword.Kind
                Case SyntaxKind.ForKeyword
                Case Else
                    Throw new ArgumentException("blockKeyword")
             End Select
            Return New ContinueStatementSyntax(SyntaxKind.ContinueForStatement, Nothing, Nothing, DirectCast(continueKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        Public Shared Function ContinueForStatement() As ContinueStatementSyntax
            Return Syntax.ContinueForStatement(Syntax.Token(SyntaxKind.ContinueKeyword), Syntax.Token(SyntaxKind.ForKeyword))
        End Function


        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' ContinueStatementSyntax. One of ContinueWhileStatement, ContinueDoStatement,
        ''' ContinueForStatement.
        ''' </param>
        ''' <param name="continueKeyword">
        ''' The "Continue" keyword.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </param>
        Public Shared Function ContinueStatement(ByVal kind As SyntaxKind, continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            If Not kind.IsContinueStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case continueKeyword.Kind
                Case SyntaxKind.ContinueKeyword
                Case Else
                    Throw new ArgumentException("continueKeyword")
             End Select
            If blockKeyword.Kind <> GetContinueStatementBlockKeywordKind(kind) Then
                Throw new ArgumentException("blockKeyword")
            End If
            Return New ContinueStatementSyntax(kind, Nothing, Nothing, DirectCast(continueKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(blockKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function

        Private Shared Function GetContinueStatementBlockKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.ContinueWhileStatement
                    Return SyntaxKind.WhileKeyword
                Case SyntaxKind.ContinueDoStatement
                    Return SyntaxKind.DoKeyword
                Case SyntaxKind.ContinueForStatement
                    Return SyntaxKind.ForKeyword
                Case Else
                    Throw New ArgumentException("BlockKeyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents a "Continue (block)" statement. THe kind of block referenced can be
        ''' determined by examining the Kind.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' ContinueStatementSyntax. One of ContinueWhileStatement, ContinueDoStatement,
        ''' ContinueForStatement.
        ''' </param>
        ''' <param name="blockKeyword">
        ''' The "Do", "For" or "While" keyword that identifies the kind of loop being
        ''' continued.
        ''' </param>
        Public Shared Function ContinueStatement(ByVal kind As SyntaxKind, blockKeyword As SyntaxToken) As ContinueStatementSyntax
            Return Syntax.ContinueStatement(kind, Syntax.Token(SyntaxKind.ContinueKeyword), blockKeyword)
        End Function


        ''' <summary>
        ''' Represents a "Return" statement.
        ''' </summary>
        ''' <param name="returnKeyword">
        ''' The "Return" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being returned, if present.
        ''' </param>
        Public Shared Function ReturnStatement(returnKeyword As SyntaxToken, expression As ExpressionSyntax) As ReturnStatementSyntax
            Select Case returnKeyword.Kind
                Case SyntaxKind.ReturnKeyword
                Case Else
                    Throw new ArgumentException("returnKeyword")
             End Select
            Return New ReturnStatementSyntax(SyntaxKind.ReturnStatement, Nothing, Nothing, DirectCast(returnKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents a "Return" statement.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression being returned, if present.
        ''' </param>
        Public Shared Function ReturnStatement(expression As ExpressionSyntax) As ReturnStatementSyntax
            Return Syntax.ReturnStatement(Syntax.Token(SyntaxKind.ReturnKeyword), expression)
        End Function


        ''' <summary>
        ''' Represents a "Return" statement.
        ''' </summary>
        Public Shared Function ReturnStatement() As ReturnStatementSyntax
            Return Syntax.ReturnStatement(Syntax.Token(SyntaxKind.ReturnKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents a line If-Then-Else statement.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The If part of the statement.
        ''' </param>
        ''' <param name="elsePart">
        ''' The Else part of the statement. If there is no Else part, Nothing is returned.
        ''' </param>
        Public Shared Function SingleLineIfStatement(ifPart As SingleLineIfPartSyntax, elsePart As SingleLineElsePartSyntax) As SingleLineIfStatementSyntax
            if ifPart Is Nothing Then
                Throw New ArgumentNullException("ifPart")
            End If
            Select Case ifPart.Kind
                Case SyntaxKind.SingleLineIfPart
                Case Else
                    Throw new ArgumentException("ifPart")
             End Select
            Return New SingleLineIfStatementSyntax(SyntaxKind.SingleLineIfStatement, Nothing, Nothing, ifPart, elsePart)
        End Function


        ''' <summary>
        ''' Represents a line If-Then-Else statement.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The If part of the statement.
        ''' </param>
        Public Shared Function SingleLineIfStatement(ifPart As SingleLineIfPartSyntax) As SingleLineIfStatementSyntax
            Return Syntax.SingleLineIfStatement(ifPart, Nothing)
        End Function


        ''' <summary>
        ''' Represents part of a single line If statement, consisting of a beginning
        ''' if-statement, followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an SingleLineIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </param>
        Public Shared Function SingleLineIfPart(begin As IfStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As SingleLineIfPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.IfStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Return New SingleLineIfPartSyntax(SyntaxKind.SingleLineIfPart, Nothing, Nothing, begin, statements.Node)
        End Function


        ''' <summary>
        ''' Represents part of a single line If statement, consisting of a beginning
        ''' if-statement, followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an SingleLineIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        Public Shared Function SingleLineIfPart(begin As IfStatementSyntax) As SingleLineIfPartSyntax
            Return Syntax.SingleLineIfPart(begin, Nothing)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        ''' <param name="begin">
        ''' The Else statement that introduces this part.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by the Else.This might be an empty list.
        ''' </param>
        Public Shared Function SingleLineElsePart(begin As ElseStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As SingleLineElsePartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ElseStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Return New SingleLineElsePartSyntax(SyntaxKind.SingleLineElsePart, Nothing, Nothing, begin, statements.Node)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        ''' <param name="statements">
        ''' The statements controlled by the Else.This might be an empty list.
        ''' </param>
        Public Shared Function SingleLineElsePart(statements As SeparatedSyntaxList(Of StatementSyntax)) As SingleLineElsePartSyntax
            Return Syntax.SingleLineElsePart(Syntax.ElseStatement(), statements)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        Public Shared Function SingleLineElsePart() As SingleLineElsePartSyntax
            Return Syntax.SingleLineElsePart(Syntax.ElseStatement(), Nothing)
        End Function


        ''' <summary>
        ''' Represents a block If...Then...Else...EndIf Statement. The Kind property can be
        ''' used to determine if it is a block or line If.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The If part of the statement.
        ''' </param>
        ''' <param name="elseIfParts">
        ''' A list of the "ElseIf" parts of the statement. If there are no ElseIf parts,
        ''' then an empty list is returned.
        ''' </param>
        ''' <param name="elsePart">
        ''' The Else part of the statement. If there is no Else part, Nothing is returned.
        ''' </param>
        ''' <param name="end">
        ''' If this is a block if, returns the "End If" statement.
        ''' </param>
        Public Shared Function MultiLineIfBlock(ifPart As IfPartSyntax, elseIfParts As SyntaxList(of IfPartSyntax), elsePart As ElsePartSyntax, [end] As EndBlockStatementSyntax) As MultiLineIfBlockSyntax
            if ifPart Is Nothing Then
                Throw New ArgumentNullException("ifPart")
            End If
            Select Case ifPart.Kind
                Case SyntaxKind.IfPart
                Case Else
                    Throw new ArgumentException("ifPart")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndIfStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MultiLineIfBlockSyntax(SyntaxKind.MultiLineIfBlock, Nothing, Nothing, ifPart, elseIfParts.Node, elsePart, [end])
        End Function


        ''' <summary>
        ''' Represents a block If...Then...Else...EndIf Statement. The Kind property can be
        ''' used to determine if it is a block or line If.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The If part of the statement.
        ''' </param>
        ''' <param name="elseIfParts">
        ''' A list of the "ElseIf" parts of the statement. If there are no ElseIf parts,
        ''' then an empty list is returned.
        ''' </param>
        ''' <param name="elsePart">
        ''' The Else part of the statement. If there is no Else part, Nothing is returned.
        ''' </param>
        Public Shared Function MultiLineIfBlock(ifPart As IfPartSyntax, elseIfParts As SyntaxList(of IfPartSyntax), elsePart As ElsePartSyntax) As MultiLineIfBlockSyntax
            Return Syntax.MultiLineIfBlock(ifPart, elseIfParts, elsePart, Syntax.EndIfStatement())
        End Function


        ''' <summary>
        ''' Represents a block If...Then...Else...EndIf Statement. The Kind property can be
        ''' used to determine if it is a block or line If.
        ''' </summary>
        ''' <param name="ifPart">
        ''' The If part of the statement.
        ''' </param>
        Public Shared Function MultiLineIfBlock(ifPart As IfPartSyntax) As MultiLineIfBlockSyntax
            Return Syntax.MultiLineIfBlock(ifPart, Nothing, Nothing, Syntax.EndIfStatement())
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </param>
        Public Shared Function IfPart(begin As IfStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.IfStatement,
                     SyntaxKind.ElseIfStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New IfPartSyntax(SyntaxKind.IfPart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </param>
        Public Shared Function IfPart(begin As IfStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            Return Syntax.IfPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        Public Shared Function IfPart(begin As IfStatementSyntax) As IfPartSyntax
            Return Syntax.IfPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </param>
        Public Shared Function ElseIfPart(begin As IfStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.IfStatement,
                     SyntaxKind.ElseIfStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New IfPartSyntax(SyntaxKind.ElseIfPart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by this If or Else If. This might be an empty list.
        ''' </param>
        Public Shared Function ElseIfPart(begin As IfStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As IfPartSyntax
            Return Syntax.ElseIfPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents part of an If statement, consisting of a beginning statement (If or
        ''' ElseIf), followed by a body of statement controlled by that beginning
        ''' statement. The Kind property returns if this is an If or ElseIf.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that introduces this part of the If...Then...Else...End If. This
        ''' must be an IfStatement.
        ''' </param>
        Public Shared Function ElseIfPart(begin As IfStatementSyntax) As IfPartSyntax
            Return Syntax.ElseIfPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        ''' <param name="begin">
        ''' The Else statement that introduces this part.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by the Else. This might be an empty list.
        ''' </param>
        Public Shared Function ElsePart(begin As ElseStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As ElsePartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ElseStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New ElsePartSyntax(SyntaxKind.ElsePart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        ''' <param name="statements">
        ''' The statements controlled by the Else. This might be an empty list.
        ''' </param>
        Public Shared Function ElsePart(statements As SeparatedSyntaxList(Of StatementSyntax)) As ElsePartSyntax
            Return Syntax.ElsePart(Syntax.ElseStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents the Else part of an If statement, consisting of a Else statement,
        ''' followed by a body of statement controlled by that Else.
        ''' </summary>
        Public Shared Function ElsePart() As ElsePartSyntax
            Return Syntax.ElsePart(Syntax.ElseStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' If this ElseIf was written as "Else If", contains the "Else" keyword. Otherwise
        ''' returns Nothing.
        ''' </param>
        ''' <param name="ifOrElseIfKeyword">
        ''' The "If" or "ElseIf" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression that is being tested.
        ''' </param>
        ''' <param name="thenKeyword">
        ''' The "Then" keyword.
        ''' </param>
        Public Shared Function IfStatement(elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfStatementSyntax
            Select Case ifOrElseIfKeyword.Kind
                Case SyntaxKind.IfKeyword:
                Case SyntaxKind.ElseIfKeyword
                Case Else
                    Throw new ArgumentException("ifOrElseIfKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New IfStatementSyntax(SyntaxKind.IfStatement, Nothing, Nothing, DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(ifOrElseIfKeyword.Node, InternalSyntax.KeywordSyntax), condition, DirectCast(thenKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        ''' <param name="ifOrElseIfKeyword">
        ''' The "If" or "ElseIf" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression that is being tested.
        ''' </param>
        Public Shared Function IfStatement(ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfStatementSyntax
            Return Syntax.IfStatement(Nothing, ifOrElseIfKeyword, condition, Nothing)
        End Function


        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' If this ElseIf was written as "Else If", contains the "Else" keyword. Otherwise
        ''' returns Nothing.
        ''' </param>
        ''' <param name="ifOrElseIfKeyword">
        ''' The "If" or "ElseIf" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression that is being tested.
        ''' </param>
        ''' <param name="thenKeyword">
        ''' The "Then" keyword.
        ''' </param>
        Public Shared Function ElseIfStatement(elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfStatementSyntax
            Select Case ifOrElseIfKeyword.Kind
                Case SyntaxKind.IfKeyword:
                Case SyntaxKind.ElseIfKeyword
                Case Else
                    Throw new ArgumentException("ifOrElseIfKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New IfStatementSyntax(SyntaxKind.ElseIfStatement, Nothing, Nothing, DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(ifOrElseIfKeyword.Node, InternalSyntax.KeywordSyntax), condition, DirectCast(thenKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the If part or ElseIf part of a If...End If block (or line If). This
        ''' statement is always the Begin of a IfPart. The Kind can be examined to
        ''' determine if this is an If or an ElseIf statement.
        ''' </summary>
        ''' <param name="ifOrElseIfKeyword">
        ''' The "If" or "ElseIf" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression that is being tested.
        ''' </param>
        Public Shared Function ElseIfStatement(ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfStatementSyntax
            Return Syntax.ElseIfStatement(Nothing, ifOrElseIfKeyword, condition, Nothing)
        End Function


        ''' <summary>
        ''' Represents the Else part of a If...End If block (or line If). This statement is
        ''' always the Begin of a ElsePart.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' The "Else" keyword
        ''' </param>
        Public Shared Function ElseStatement(elseKeyword As SyntaxToken) As ElseStatementSyntax
            Select Case elseKeyword.Kind
                Case SyntaxKind.ElseKeyword
                Case Else
                    Throw new ArgumentException("elseKeyword")
             End Select
            Return New ElseStatementSyntax(SyntaxKind.ElseStatement, Nothing, Nothing, DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the Else part of a If...End If block (or line If). This statement is
        ''' always the Begin of a ElsePart.
        ''' </summary>
        Public Shared Function ElseStatement() As ElseStatementSyntax
            Return Syntax.ElseStatement(Syntax.Token(SyntaxKind.ElseKeyword))
        End Function


        ''' <summary>
        ''' Represents an entire Try...Catch...Finally...End Try statement.
        ''' </summary>
        ''' <param name="tryPart">
        ''' The Try part of the statement.
        ''' </param>
        ''' <param name="catchParts">
        ''' A list of the Catch parts of the statement. If there are no Catch parts, then
        ''' an empty list is returned.
        ''' </param>
        ''' <param name="finallyPart">
        ''' The Finally part of the statement, if present.
        ''' </param>
        ''' <param name="end">
        ''' The "End Try" statement.
        ''' </param>
        Public Shared Function TryBlock(tryPart As TryPartSyntax, catchParts As SyntaxList(of CatchPartSyntax), finallyPart As FinallyPartSyntax, [end] As EndBlockStatementSyntax) As TryBlockSyntax
            if tryPart Is Nothing Then
                Throw New ArgumentNullException("tryPart")
            End If
            Select Case tryPart.Kind
                Case SyntaxKind.TryPart
                Case Else
                    Throw new ArgumentException("tryPart")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndTryStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New TryBlockSyntax(SyntaxKind.TryBlock, Nothing, Nothing, tryPart, catchParts.Node, finallyPart, [end])
        End Function


        ''' <summary>
        ''' Represents an entire Try...Catch...Finally...End Try statement.
        ''' </summary>
        ''' <param name="tryPart">
        ''' The Try part of the statement.
        ''' </param>
        ''' <param name="catchParts">
        ''' A list of the Catch parts of the statement. If there are no Catch parts, then
        ''' an empty list is returned.
        ''' </param>
        ''' <param name="finallyPart">
        ''' The Finally part of the statement, if present.
        ''' </param>
        Public Shared Function TryBlock(tryPart As TryPartSyntax, catchParts As SyntaxList(of CatchPartSyntax), finallyPart As FinallyPartSyntax) As TryBlockSyntax
            Return Syntax.TryBlock(tryPart, catchParts, finallyPart, Syntax.EndTryStatement())
        End Function


        ''' <summary>
        ''' Represents an entire Try...Catch...Finally...End Try statement.
        ''' </summary>
        ''' <param name="tryPart">
        ''' The Try part of the statement.
        ''' </param>
        Public Shared Function TryBlock(tryPart As TryPartSyntax) As TryBlockSyntax
            Return Syntax.TryBlock(tryPart, Nothing, Nothing, Syntax.EndTryStatement())
        End Function


        ''' <summary>
        ''' Represents part of an Try...Catch...Finally...End Try statement, consisting of
        ''' a beginning statement (Try, Catch or Finally), followed by a body of statements
        ''' controlled by that beginning statement. The Kind property returns which kind of
        ''' part this is.
        ''' </summary>
        ''' <param name="begin">
        ''' The TryStatement that introduces this part of the Try...Catch...Finally...End
        ''' Try.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements inside the Try part of the Try...Catch...Finally...End Try. This
        ''' might be an empty list.
        ''' </param>
        Public Shared Function TryPart(begin As TryStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As TryPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.TryStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New TryPartSyntax(SyntaxKind.TryPart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents part of an Try...Catch...Finally...End Try statement, consisting of
        ''' a beginning statement (Try, Catch or Finally), followed by a body of statements
        ''' controlled by that beginning statement. The Kind property returns which kind of
        ''' part this is.
        ''' </summary>
        ''' <param name="statements">
        ''' The statements inside the Try part of the Try...Catch...Finally...End Try. This
        ''' might be an empty list.
        ''' </param>
        Public Shared Function TryPart(statements As SeparatedSyntaxList(Of StatementSyntax)) As TryPartSyntax
            Return Syntax.TryPart(Syntax.TryStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents part of an Try...Catch...Finally...End Try statement, consisting of
        ''' a beginning statement (Try, Catch or Finally), followed by a body of statements
        ''' controlled by that beginning statement. The Kind property returns which kind of
        ''' part this is.
        ''' </summary>
        Public Shared Function TryPart() As TryPartSyntax
            Return Syntax.TryPart(Syntax.TryStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents a Catch part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Catch statement, followed by a body of statements controlled by
        ''' that Catch statement. The Kind property returns which kind of part this is.
        ''' </summary>
        ''' <param name="begin">
        ''' The CatchStatement that introduces this part.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by the Catch statement. This might be an empty list.
        ''' </param>
        Public Shared Function CatchPart(begin As CatchStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As CatchPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.CatchStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New CatchPartSyntax(SyntaxKind.CatchPart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents a Catch part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Catch statement, followed by a body of statements controlled by
        ''' that Catch statement. The Kind property returns which kind of part this is.
        ''' </summary>
        ''' <param name="begin">
        ''' The CatchStatement that introduces this part.
        ''' </param>
        ''' <param name="statements">
        ''' The statements controlled by the Catch statement. This might be an empty list.
        ''' </param>
        Public Shared Function CatchPart(begin As CatchStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As CatchPartSyntax
            Return Syntax.CatchPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents a Catch part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Catch statement, followed by a body of statements controlled by
        ''' that Catch statement. The Kind property returns which kind of part this is.
        ''' </summary>
        ''' <param name="begin">
        ''' The CatchStatement that introduces this part.
        ''' </param>
        Public Shared Function CatchPart(begin As CatchStatementSyntax) As CatchPartSyntax
            Return Syntax.CatchPart(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents the Finally part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Finally statement, followed by a body of statements controlled
        ''' by the Finally.
        ''' </summary>
        ''' <param name="begin">
        ''' The FinallyStatement that introduces the Finally part of a Try.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements inside the Finally part of the Try...Catch...Finally...End Try.
        ''' This might be an empty list.
        ''' </param>
        Public Shared Function FinallyPart(begin As FinallyStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As FinallyPartSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.FinallyStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New FinallyPartSyntax(SyntaxKind.FinallyPart, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents the Finally part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Finally statement, followed by a body of statements controlled
        ''' by the Finally.
        ''' </summary>
        ''' <param name="statements">
        ''' The statements inside the Finally part of the Try...Catch...Finally...End Try.
        ''' This might be an empty list.
        ''' </param>
        Public Shared Function FinallyPart(statements As SeparatedSyntaxList(Of StatementSyntax)) As FinallyPartSyntax
            Return Syntax.FinallyPart(Syntax.FinallyStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents the Finally part of an Try...Catch...Finally...End Try statement,
        ''' consisting of a Finally statement, followed by a body of statements controlled
        ''' by the Finally.
        ''' </summary>
        Public Shared Function FinallyPart() As FinallyPartSyntax
            Return Syntax.FinallyPart(Syntax.FinallyStatement(), Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents the Try part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a TryPart.
        ''' </summary>
        ''' <param name="tryKeyword">
        ''' The "Try" keyword
        ''' </param>
        Public Shared Function TryStatement(tryKeyword As SyntaxToken) As TryStatementSyntax
            Select Case tryKeyword.Kind
                Case SyntaxKind.TryKeyword
                Case Else
                    Throw new ArgumentException("tryKeyword")
             End Select
            Return New TryStatementSyntax(SyntaxKind.TryStatement, Nothing, Nothing, DirectCast(tryKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the Try part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a TryPart.
        ''' </summary>
        Public Shared Function TryStatement() As TryStatementSyntax
            Return Syntax.TryStatement(Syntax.Token(SyntaxKind.TryKeyword))
        End Function


        ''' <summary>
        ''' Represents the Catch part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a CatchPart.
        ''' </summary>
        ''' <param name="catchKeyword">
        ''' The "Catch" keyword.
        ''' </param>
        ''' <param name="identifierName">
        ''' The identifier representing the exception that was caught, if present.
        ''' </param>
        ''' <param name="asClause">
        ''' The As clause that defines the type of exception being caught.
        ''' </param>
        ''' <param name="whenClause">
        ''' The "When" clause, if present.
        ''' </param>
        Public Shared Function CatchStatement(catchKeyword As SyntaxToken, identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax
            Select Case catchKeyword.Kind
                Case SyntaxKind.CatchKeyword
                Case Else
                    Throw new ArgumentException("catchKeyword")
             End Select
            Return New CatchStatementSyntax(SyntaxKind.CatchStatement, Nothing, Nothing, DirectCast(catchKeyword.Node, InternalSyntax.KeywordSyntax), identifierName, asClause, whenClause)
        End Function


        ''' <summary>
        ''' Represents the Catch part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a CatchPart.
        ''' </summary>
        ''' <param name="identifierName">
        ''' The identifier representing the exception that was caught, if present.
        ''' </param>
        ''' <param name="asClause">
        ''' The As clause that defines the type of exception being caught.
        ''' </param>
        ''' <param name="whenClause">
        ''' The "When" clause, if present.
        ''' </param>
        Public Shared Function CatchStatement(identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax
            Return Syntax.CatchStatement(Syntax.Token(SyntaxKind.CatchKeyword), identifierName, asClause, whenClause)
        End Function


        ''' <summary>
        ''' Represents the Catch part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a CatchPart.
        ''' </summary>
        Public Shared Function CatchStatement() As CatchStatementSyntax
            Return Syntax.CatchStatement(Syntax.Token(SyntaxKind.CatchKeyword), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the When/Filter clause of a Catch statement
        ''' </summary>
        ''' <param name="whenKeyword">
        ''' The "When" keyword
        ''' </param>
        ''' <param name="filter">
        ''' The filter expression
        ''' </param>
        Public Shared Function CatchFilterClause(whenKeyword As SyntaxToken, filter As ExpressionSyntax) As CatchFilterClauseSyntax
            Select Case whenKeyword.Kind
                Case SyntaxKind.WhenKeyword
                Case Else
                    Throw new ArgumentException("whenKeyword")
             End Select
            if filter Is Nothing Then
                Throw New ArgumentNullException("filter")
            End If
            Select Case filter.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("filter")
             End Select
            Return New CatchFilterClauseSyntax(SyntaxKind.CatchFilterClause, Nothing, Nothing, DirectCast(whenKeyword.Node, InternalSyntax.KeywordSyntax), filter)
        End Function


        ''' <summary>
        ''' Represents the When/Filter clause of a Catch statement
        ''' </summary>
        ''' <param name="filter">
        ''' The filter expression
        ''' </param>
        Public Shared Function CatchFilterClause(filter As ExpressionSyntax) As CatchFilterClauseSyntax
            Return Syntax.CatchFilterClause(Syntax.Token(SyntaxKind.WhenKeyword), filter)
        End Function


        ''' <summary>
        ''' Represents the Finally part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a FinallyPart.
        ''' </summary>
        ''' <param name="finallyKeyword">
        ''' The "Finally" keyword.
        ''' </param>
        Public Shared Function FinallyStatement(finallyKeyword As SyntaxToken) As FinallyStatementSyntax
            Select Case finallyKeyword.Kind
                Case SyntaxKind.FinallyKeyword
                Case Else
                    Throw new ArgumentException("finallyKeyword")
             End Select
            Return New FinallyStatementSyntax(SyntaxKind.FinallyStatement, Nothing, Nothing, DirectCast(finallyKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the Finally part part of a Try...Catch...Finally...End Try. This
        ''' statement is always the Begin of a FinallyPart.
        ''' </summary>
        Public Shared Function FinallyStatement() As FinallyStatementSyntax
            Return Syntax.FinallyStatement(Syntax.Token(SyntaxKind.FinallyKeyword))
        End Function


        ''' <summary>
        ''' Represents the "Error" statement.
        ''' </summary>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="errorNumber">
        ''' The expression that represents the error number.
        ''' </param>
        Public Shared Function ErrorStatement(errorKeyword As SyntaxToken, errorNumber As ExpressionSyntax) As ErrorStatementSyntax
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            if errorNumber Is Nothing Then
                Throw New ArgumentNullException("errorNumber")
            End If
            Select Case errorNumber.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("errorNumber")
             End Select
            Return New ErrorStatementSyntax(SyntaxKind.ErrorStatement, Nothing, Nothing, DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), errorNumber)
        End Function


        ''' <summary>
        ''' Represents the "Error" statement.
        ''' </summary>
        ''' <param name="errorNumber">
        ''' The expression that represents the error number.
        ''' </param>
        Public Shared Function ErrorStatement(errorNumber As ExpressionSyntax) As ErrorStatementSyntax
            Return Syntax.ErrorStatement(Syntax.Token(SyntaxKind.ErrorKeyword), errorNumber)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The "On" keyword
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="goToKeyword">
        ''' The "GoTo" keyword
        ''' </param>
        ''' <param name="minus">
        ''' An optional minus for On Error Goto -1
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToZeroStatement(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            Select Case goToKeyword.Kind
                Case SyntaxKind.GoToKeyword
                Case Else
                    Throw new ArgumentException("goToKeyword")
             End Select
            if label Is Nothing Then
                Throw New ArgumentNullException("label")
            End If
            Select Case label.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel
                Case Else
                    Throw new ArgumentException("label")
             End Select
            Return New OnErrorGoToStatementSyntax(SyntaxKind.OnErrorGoToZeroStatement, Nothing, Nothing, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(goToKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(minus.Node, InternalSyntax.PunctuationSyntax), label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToZeroStatement(label As LabelSyntax) As OnErrorGoToStatementSyntax
            Return Syntax.OnErrorGoToZeroStatement(Syntax.Token(SyntaxKind.OnKeyword), Syntax.Token(SyntaxKind.ErrorKeyword), Syntax.Token(SyntaxKind.GoToKeyword), Nothing, label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The "On" keyword
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="goToKeyword">
        ''' The "GoTo" keyword
        ''' </param>
        ''' <param name="minus">
        ''' An optional minus for On Error Goto -1
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToMinusOneStatement(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            Select Case goToKeyword.Kind
                Case SyntaxKind.GoToKeyword
                Case Else
                    Throw new ArgumentException("goToKeyword")
             End Select
            if label Is Nothing Then
                Throw New ArgumentNullException("label")
            End If
            Select Case label.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel
                Case Else
                    Throw new ArgumentException("label")
             End Select
            Return New OnErrorGoToStatementSyntax(SyntaxKind.OnErrorGoToMinusOneStatement, Nothing, Nothing, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(goToKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(minus.Node, InternalSyntax.PunctuationSyntax), label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToMinusOneStatement(label As LabelSyntax) As OnErrorGoToStatementSyntax
            Return Syntax.OnErrorGoToMinusOneStatement(Syntax.Token(SyntaxKind.OnKeyword), Syntax.Token(SyntaxKind.ErrorKeyword), Syntax.Token(SyntaxKind.GoToKeyword), Nothing, label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The "On" keyword
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="goToKeyword">
        ''' The "GoTo" keyword
        ''' </param>
        ''' <param name="minus">
        ''' An optional minus for On Error Goto -1
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToLabelStatement(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            Select Case goToKeyword.Kind
                Case SyntaxKind.GoToKeyword
                Case Else
                    Throw new ArgumentException("goToKeyword")
             End Select
            if label Is Nothing Then
                Throw New ArgumentNullException("label")
            End If
            Select Case label.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel
                Case Else
                    Throw new ArgumentException("label")
             End Select
            Return New OnErrorGoToStatementSyntax(SyntaxKind.OnErrorGoToLabelStatement, Nothing, Nothing, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(goToKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(minus.Node, InternalSyntax.PunctuationSyntax), label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToLabelStatement(label As LabelSyntax) As OnErrorGoToStatementSyntax
            Return Syntax.OnErrorGoToLabelStatement(Syntax.Token(SyntaxKind.OnKeyword), Syntax.Token(SyntaxKind.ErrorKeyword), Syntax.Token(SyntaxKind.GoToKeyword), Nothing, label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' OnErrorGoToStatementSyntax. One of OnErrorGoToZeroStatement,
        ''' OnErrorGoToMinusOneStatement, OnErrorGoToLabelStatement.
        ''' </param>
        ''' <param name="onKeyword">
        ''' The "On" keyword
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="goToKeyword">
        ''' The "GoTo" keyword
        ''' </param>
        ''' <param name="minus">
        ''' An optional minus for On Error Goto -1
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToStatement(ByVal kind As SyntaxKind, onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax
            If Not kind.IsOnErrorGoToStatement Then
                Throw New ArgumentException("kind")
            End If
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            Select Case goToKeyword.Kind
                Case SyntaxKind.GoToKeyword
                Case Else
                    Throw new ArgumentException("goToKeyword")
             End Select
            if label Is Nothing Then
                Throw New ArgumentNullException("label")
            End If
            Select Case label.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel
                Case Else
                    Throw new ArgumentException("label")
             End Select
            Return New OnErrorGoToStatementSyntax(kind, Nothing, Nothing, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(goToKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(minus.Node, InternalSyntax.PunctuationSyntax), label)
        End Function


        ''' <summary>
        ''' Represents an OnError Goto statement.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' OnErrorGoToStatementSyntax. One of OnErrorGoToZeroStatement,
        ''' OnErrorGoToMinusOneStatement, OnErrorGoToLabelStatement.
        ''' </param>
        ''' <param name="label">
        ''' The name of the label. If the label is a line number, 0 or -1, wraps an
        ''' IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
        ''' </param>
        Public Shared Function OnErrorGoToStatement(ByVal kind As SyntaxKind, label As LabelSyntax) As OnErrorGoToStatementSyntax
            Return Syntax.OnErrorGoToStatement(kind, Syntax.Token(SyntaxKind.OnKeyword), Syntax.Token(SyntaxKind.ErrorKeyword), Syntax.Token(SyntaxKind.GoToKeyword), Nothing, label)
        End Function


        ''' <summary>
        ''' Represents an OnError Resume Next statement.
        ''' </summary>
        ''' <param name="onKeyword">
        ''' The "On" keyword
        ''' </param>
        ''' <param name="errorKeyword">
        ''' The "Error" keyword.
        ''' </param>
        ''' <param name="resumeKeyword">
        ''' The "Resume" keyword.
        ''' </param>
        ''' <param name="nextKeyword">
        ''' The "Next"
        ''' </param>
        Public Shared Function OnErrorResumeNextStatement(onKeyword As SyntaxToken, errorKeyword As SyntaxToken, resumeKeyword As SyntaxToken, nextKeyword As SyntaxToken) As OnErrorResumeNextStatementSyntax
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case errorKeyword.Kind
                Case SyntaxKind.ErrorKeyword
                Case Else
                    Throw new ArgumentException("errorKeyword")
             End Select
            Select Case resumeKeyword.Kind
                Case SyntaxKind.ResumeKeyword
                Case Else
                    Throw new ArgumentException("resumeKeyword")
             End Select
            Select Case nextKeyword.Kind
                Case SyntaxKind.NextKeyword
                Case Else
                    Throw new ArgumentException("nextKeyword")
             End Select
            Return New OnErrorResumeNextStatementSyntax(SyntaxKind.OnErrorResumeNextStatement, Nothing, Nothing, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(errorKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(resumeKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(nextKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an OnError Resume Next statement.
        ''' </summary>
        Public Shared Function OnErrorResumeNextStatement() As OnErrorResumeNextStatementSyntax
            Return Syntax.OnErrorResumeNextStatement(Syntax.Token(SyntaxKind.OnKeyword), Syntax.Token(SyntaxKind.ErrorKeyword), Syntax.Token(SyntaxKind.ResumeKeyword), Syntax.Token(SyntaxKind.NextKeyword))
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="resumeKeyword">
        ''' The "Resume" keyword.
        ''' </param>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeStatement(resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax
            Select Case resumeKeyword.Kind
                Case SyntaxKind.ResumeKeyword
                Case Else
                    Throw new ArgumentException("resumeKeyword")
             End Select
            Return New ResumeStatementSyntax(SyntaxKind.ResumeStatement, Nothing, Nothing, DirectCast(resumeKeyword.Node, InternalSyntax.KeywordSyntax), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeStatement(label As LabelSyntax) As ResumeStatementSyntax
            Return Syntax.ResumeStatement(Syntax.Token(SyntaxKind.ResumeKeyword), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        Public Shared Function ResumeStatement() As ResumeStatementSyntax
            Return Syntax.ResumeStatement(Syntax.Token(SyntaxKind.ResumeKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="resumeKeyword">
        ''' The "Resume" keyword.
        ''' </param>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeLabelStatement(resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax
            Select Case resumeKeyword.Kind
                Case SyntaxKind.ResumeKeyword
                Case Else
                    Throw new ArgumentException("resumeKeyword")
             End Select
            Return New ResumeStatementSyntax(SyntaxKind.ResumeLabelStatement, Nothing, Nothing, DirectCast(resumeKeyword.Node, InternalSyntax.KeywordSyntax), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeLabelStatement(label As LabelSyntax) As ResumeStatementSyntax
            Return Syntax.ResumeLabelStatement(Syntax.Token(SyntaxKind.ResumeKeyword), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        Public Shared Function ResumeLabelStatement() As ResumeStatementSyntax
            Return Syntax.ResumeLabelStatement(Syntax.Token(SyntaxKind.ResumeKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="resumeKeyword">
        ''' The "Resume" keyword.
        ''' </param>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeNextStatement(resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax
            Select Case resumeKeyword.Kind
                Case SyntaxKind.ResumeKeyword
                Case Else
                    Throw new ArgumentException("resumeKeyword")
             End Select
            Return New ResumeStatementSyntax(SyntaxKind.ResumeNextStatement, Nothing, Nothing, DirectCast(resumeKeyword.Node, InternalSyntax.KeywordSyntax), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        ''' <param name="label">
        ''' The label. The value of this depends on the Kind. If Kind=Resume, returns
        ''' Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
        ''' wraps an Identifier or IntegerLiteralToken with the label or line number.
        ''' </param>
        Public Shared Function ResumeNextStatement(label As LabelSyntax) As ResumeStatementSyntax
            Return Syntax.ResumeNextStatement(Syntax.Token(SyntaxKind.ResumeKeyword), label)
        End Function


        ''' <summary>
        ''' Represents a "Resume" statement. The Kind property can be used to determine if
        ''' this is a "Resume", "Resume Next" or "Resume label" statement.
        ''' </summary>
        Public Shared Function ResumeNextStatement() As ResumeStatementSyntax
            Return Syntax.ResumeNextStatement(Syntax.Token(SyntaxKind.ResumeKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents a Select Case block, including the Select Case that begins it, the
        ''' contains Case blocks and the End Select.
        ''' </summary>
        ''' <param name="begin">
        ''' The Select Case statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="caseBlocks">
        ''' A list of the contained Case blocks.
        ''' </param>
        ''' <param name="end">
        ''' The End Select statement that ends the block.
        ''' </param>
        Public Shared Function SelectBlock(begin As SelectStatementSyntax, beginTerminator As SyntaxToken, caseBlocks As SyntaxList(of CaseBlockSyntax), [end] As EndBlockStatementSyntax) As SelectBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SelectStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSelectStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New SelectBlockSyntax(SyntaxKind.SelectBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), caseBlocks.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Select Case block, including the Select Case that begins it, the
        ''' contains Case blocks and the End Select.
        ''' </summary>
        ''' <param name="begin">
        ''' The Select Case statement that begins the block.
        ''' </param>
        ''' <param name="caseBlocks">
        ''' A list of the contained Case blocks.
        ''' </param>
        Public Shared Function SelectBlock(begin As SelectStatementSyntax, caseBlocks As SyntaxList(of CaseBlockSyntax)) As SelectBlockSyntax
            Return Syntax.SelectBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), caseBlocks, Syntax.EndSelectStatement())
        End Function


        ''' <summary>
        ''' Represents a Select Case block, including the Select Case that begins it, the
        ''' contains Case blocks and the End Select.
        ''' </summary>
        ''' <param name="begin">
        ''' The Select Case statement that begins the block.
        ''' </param>
        Public Shared Function SelectBlock(begin As SelectStatementSyntax) As SelectBlockSyntax
            Return Syntax.SelectBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Syntax.EndSelectStatement())
        End Function


        ''' <summary>
        ''' Represents a Select Case statement. This statement always occurs as the Begin
        ''' of a SelectBlock.
        ''' </summary>
        ''' <param name="selectKeyword">
        ''' The "Select" keyword.
        ''' </param>
        ''' <param name="caseKeyword">
        ''' The "Case" keyword, if present.
        ''' </param>
        ''' <param name="expression">
        ''' The value that branching is based on.
        ''' </param>
        Public Shared Function SelectStatement(selectKeyword As SyntaxToken, caseKeyword As SyntaxToken, expression As ExpressionSyntax) As SelectStatementSyntax
            Select Case selectKeyword.Kind
                Case SyntaxKind.SelectKeyword
                Case Else
                    Throw new ArgumentException("selectKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New SelectStatementSyntax(SyntaxKind.SelectStatement, Nothing, Nothing, DirectCast(selectKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(caseKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents a Select Case statement. This statement always occurs as the Begin
        ''' of a SelectBlock.
        ''' </summary>
        ''' <param name="expression">
        ''' The value that branching is based on.
        ''' </param>
        Public Shared Function SelectStatement(expression As ExpressionSyntax) As SelectStatementSyntax
            Return Syntax.SelectStatement(Syntax.Token(SyntaxKind.SelectKeyword), Nothing, expression)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the case block. This might be an empty list.
        ''' </param>
        Public Shared Function CaseBlock(begin As CaseStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.CaseStatement,
                     SyntaxKind.CaseElseStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New CaseBlockSyntax(SyntaxKind.CaseBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the case block. This might be an empty list.
        ''' </param>
        Public Shared Function CaseBlock(begin As CaseStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            Return Syntax.CaseBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        Public Shared Function CaseBlock(begin As CaseStatementSyntax) As CaseBlockSyntax
            Return Syntax.CaseBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the case block. This might be an empty list.
        ''' </param>
        Public Shared Function CaseElseBlock(begin As CaseStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.CaseStatement,
                     SyntaxKind.CaseElseStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New CaseBlockSyntax(SyntaxKind.CaseElseBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the case block. This might be an empty list.
        ''' </param>
        Public Shared Function CaseElseBlock(begin As CaseStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax)) As CaseBlockSyntax
            Return Syntax.CaseElseBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements)
        End Function


        ''' <summary>
        ''' Represents a case statement and its subsequent block.
        ''' </summary>
        ''' <param name="begin">
        ''' The statement that begins the case block.
        ''' </param>
        Public Shared Function CaseElseBlock(begin As CaseStatementSyntax) As CaseBlockSyntax
            Return Syntax.CaseElseBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing)
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="caseKeyword">
        ''' The "Case" keyword
        ''' </param>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseStatement(caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            Select Case caseKeyword.Kind
                Case SyntaxKind.CaseKeyword
                Case Else
                    Throw new ArgumentException("caseKeyword")
             End Select
            Return New CaseStatementSyntax(SyntaxKind.CaseStatement, Nothing, Nothing, DirectCast(caseKeyword.Node, InternalSyntax.KeywordSyntax), cases.Node)
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseStatement(cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            Return Syntax.CaseStatement(Syntax.Token(SyntaxKind.CaseKeyword), cases)
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseStatement(ParamArray cases As CaseClauseSyntax()) As CaseStatementSyntax
            Return Syntax.CaseStatement(Syntax.Token(SyntaxKind.CaseKeyword), Syntax.SeparatedList(Of CaseClauseSyntax)().Add(SyntaxKind.CommaToken, cases))
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="caseKeyword">
        ''' The "Case" keyword
        ''' </param>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseElseStatement(caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            Select Case caseKeyword.Kind
                Case SyntaxKind.CaseKeyword
                Case Else
                    Throw new ArgumentException("caseKeyword")
             End Select
            Return New CaseStatementSyntax(SyntaxKind.CaseElseStatement, Nothing, Nothing, DirectCast(caseKeyword.Node, InternalSyntax.KeywordSyntax), cases.Node)
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseElseStatement(cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax
            Return Syntax.CaseElseStatement(Syntax.Token(SyntaxKind.CaseKeyword), cases)
        End Function


        ''' <summary>
        ''' Represents a Case or Case Else statement. This statement is always the Begin of
        ''' a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
        ''' Kind=Case.
        ''' </summary>
        ''' <param name="cases">
        ''' A list of clauses associated with this Case. If Kind=CaseElse, then this list
        ''' has exactly one child, which is a CaseElseClause.
        ''' </param>
        Public Shared Function CaseElseStatement(ParamArray cases As CaseClauseSyntax()) As CaseStatementSyntax
            Return Syntax.CaseElseStatement(Syntax.Token(SyntaxKind.CaseKeyword), Syntax.SeparatedList(Of CaseClauseSyntax)().Add(SyntaxKind.CommaToken, cases))
        End Function


        ''' <summary>
        ''' The "Else" part in a Case Else statement.
        ''' </summary>
        ''' <param name="elseKeyword">
        ''' The "Else" keyword.
        ''' </param>
        Public Shared Function CaseElseClause(elseKeyword As SyntaxToken) As CaseElseClauseSyntax
            Select Case elseKeyword.Kind
                Case SyntaxKind.ElseKeyword
                Case Else
                    Throw new ArgumentException("elseKeyword")
             End Select
            Return New CaseElseClauseSyntax(SyntaxKind.CaseElseClause, Nothing, Nothing, DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' The "Else" part in a Case Else statement.
        ''' </summary>
        Public Shared Function CaseElseClause() As CaseElseClauseSyntax
            Return Syntax.CaseElseClause(Syntax.Token(SyntaxKind.ElseKeyword))
        End Function


        ''' <summary>
        ''' Represents a single value in a Case.
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseValueClause(value As ExpressionSyntax) As CaseValueClauseSyntax
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseValueClauseSyntax(SyntaxKind.CaseValueClause, Nothing, Nothing, value)
        End Function


        ''' <summary>
        ''' Represents a range "expression To expression" in a Case.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The lower bound of the range.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The "To" keyword
        ''' </param>
        ''' <param name="upperBound">
        ''' The upper bound of the range.
        ''' </param>
        Public Shared Function CaseRangeClause(lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As CaseRangeClauseSyntax
            if lowerBound Is Nothing Then
                Throw New ArgumentNullException("lowerBound")
            End If
            Select Case lowerBound.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("lowerBound")
             End Select
            Select Case toKeyword.Kind
                Case SyntaxKind.ToKeyword
                Case Else
                    Throw new ArgumentException("toKeyword")
             End Select
            if upperBound Is Nothing Then
                Throw New ArgumentNullException("upperBound")
            End If
            Select Case upperBound.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("upperBound")
             End Select
            Return New CaseRangeClauseSyntax(SyntaxKind.CaseRangeClause, Nothing, Nothing, lowerBound, DirectCast(toKeyword.Node, InternalSyntax.KeywordSyntax), upperBound)
        End Function


        ''' <summary>
        ''' Represents a range "expression To expression" in a Case.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The lower bound of the range.
        ''' </param>
        ''' <param name="upperBound">
        ''' The upper bound of the range.
        ''' </param>
        Public Shared Function CaseRangeClause(lowerBound As ExpressionSyntax, upperBound As ExpressionSyntax) As CaseRangeClauseSyntax
            Return Syntax.CaseRangeClause(lowerBound, Syntax.Token(SyntaxKind.ToKeyword), upperBound)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseEqualsClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseEqualsClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseEqualsClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseEqualsClause(Nothing, Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseNotEqualsClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanGreaterThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseNotEqualsClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseNotEqualsClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseNotEqualsClause(Nothing, Syntax.Token(SyntaxKind.LessThanGreaterThanToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseLessThanClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseLessThanClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseLessThanClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseLessThanClause(Nothing, Syntax.Token(SyntaxKind.LessThanToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseLessThanOrEqualClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseLessThanOrEqualClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseLessThanOrEqualClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseLessThanOrEqualClause(Nothing, Syntax.Token(SyntaxKind.LessThanEqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseGreaterThanOrEqualClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.GreaterThanEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseGreaterThanOrEqualClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseGreaterThanOrEqualClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseGreaterThanOrEqualClause(Nothing, Syntax.Token(SyntaxKind.GreaterThanEqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseGreaterThanClause(isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(SyntaxKind.CaseGreaterThanClause, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseGreaterThanClause(value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseGreaterThanClause(Nothing, Syntax.Token(SyntaxKind.GreaterThanToken), value)
        End Function


        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' CaseRelationalClauseSyntax. One of CaseEqualsClause, CaseNotEqualsClause,
        ''' CaseLessThanClause, CaseLessThanOrEqualClause, CaseGreaterThanOrEqualClause,
        ''' CaseGreaterThanClause.
        ''' </param>
        ''' <param name="isKeyword">
        ''' The "Is" keyword, if present.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseRelationalClause(ByVal kind As SyntaxKind, isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            If Not kind.IsCaseRelationalClause Then
                Throw New ArgumentException("kind")
            End If
            If operatorToken.Kind <> GetCaseRelationalClauseOperatorTokenKind(kind) Then
                Throw new ArgumentException("operatorToken")
            End If
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New CaseRelationalClauseSyntax(kind, Nothing, Nothing, DirectCast(isKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function

        Private Shared Function GetCaseRelationalClauseOperatorTokenKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.CaseEqualsClause
                    Return SyntaxKind.EqualsToken
                Case SyntaxKind.CaseNotEqualsClause
                    Return SyntaxKind.LessThanGreaterThanToken
                Case SyntaxKind.CaseLessThanClause
                    Return SyntaxKind.LessThanToken
                Case SyntaxKind.CaseLessThanOrEqualClause
                    Return SyntaxKind.LessThanEqualsToken
                Case SyntaxKind.CaseGreaterThanOrEqualClause
                    Return SyntaxKind.GreaterThanEqualsToken
                Case SyntaxKind.CaseGreaterThanClause
                    Return SyntaxKind.GreaterThanToken
                Case Else
                    Throw New ArgumentException("OperatorToken")
            End Select
        End Function

        ''' <summary>
        ''' Represents a relation clause in a Case statement, such as "Is &gt; expression".
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' CaseRelationalClauseSyntax. One of CaseEqualsClause, CaseNotEqualsClause,
        ''' CaseLessThanClause, CaseLessThanOrEqualClause, CaseGreaterThanOrEqualClause,
        ''' CaseGreaterThanClause.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
        ''' "&gt;=".
        ''' </param>
        ''' <param name="value">
        ''' The expression that denotes the value being tested against.
        ''' </param>
        Public Shared Function CaseRelationalClause(ByVal kind As SyntaxKind, operatorToken As SyntaxToken, value As ExpressionSyntax) As CaseRelationalClauseSyntax
            Return Syntax.CaseRelationalClause(kind, Nothing, operatorToken, value)
        End Function


        ''' <summary>
        ''' Represents the "SyncLock" statement. This statement always occurs as the Begin
        ''' of a SyncLockBlock.
        ''' </summary>
        ''' <param name="syncLockKeyword">
        ''' The "SyncLock" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being synchronized on.
        ''' </param>
        Public Shared Function SyncLockStatement(syncLockKeyword As SyntaxToken, expression As ExpressionSyntax) As SyncLockStatementSyntax
            Select Case syncLockKeyword.Kind
                Case SyntaxKind.SyncLockKeyword
                Case Else
                    Throw new ArgumentException("syncLockKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New SyncLockStatementSyntax(SyntaxKind.SyncLockStatement, Nothing, Nothing, DirectCast(syncLockKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents the "SyncLock" statement. This statement always occurs as the Begin
        ''' of a SyncLockBlock.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression being synchronized on.
        ''' </param>
        Public Shared Function SyncLockStatement(expression As ExpressionSyntax) As SyncLockStatementSyntax
            Return Syntax.SyncLockStatement(Syntax.Token(SyntaxKind.SyncLockKeyword), expression)
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopTopTestBlock(begin As DoStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.DoStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.LoopStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New DoLoopBlockSyntax(SyntaxKind.DoLoopTopTestBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopTopTestBlock(begin As DoStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopTopTestBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopTopTestBlock(begin As DoStatementSyntax, [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopTopTestBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBottomTestBlock(begin As DoStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.DoStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.LoopStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New DoLoopBlockSyntax(SyntaxKind.DoLoopBottomTestBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBottomTestBlock(begin As DoStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopBottomTestBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBottomTestBlock(begin As DoStatementSyntax, [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopBottomTestBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopForeverBlock(begin As DoStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.DoStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.LoopStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New DoLoopBlockSyntax(SyntaxKind.DoLoopForeverBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopForeverBlock(begin As DoStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopForeverBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopForeverBlock(begin As DoStatementSyntax, [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopForeverBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of DoLoopBlockSyntax.
        ''' One of DoLoopTopTestBlock, DoLoopBottomTestBlock, DoLoopForeverBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBlock(ByVal kind As SyntaxKind, begin As DoStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            If Not kind.IsDoLoopBlock Then
                Throw New ArgumentException("kind")
            End If
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.DoStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.LoopStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New DoLoopBlockSyntax(kind, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of DoLoopBlockSyntax.
        ''' One of DoLoopTopTestBlock, DoLoopBottomTestBlock, DoLoopForeverBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the block statement. This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBlock(ByVal kind As SyntaxKind, begin As DoStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopBlock(kind, begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a Do-Loop block. The Kind property can be used to determine if this
        ''' is a top-test, bottom-test or infinite loop.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of DoLoopBlockSyntax.
        ''' One of DoLoopTopTestBlock, DoLoopBottomTestBlock, DoLoopForeverBlock.
        ''' </param>
        ''' <param name="begin">
        ''' The Do statement that begins the block.
        ''' </param>
        ''' <param name="end">
        ''' The Loop statement that ends the block.
        ''' </param>
        Public Shared Function DoLoopBlock(ByVal kind As SyntaxKind, begin As DoStatementSyntax, [end] As LoopStatementSyntax) As DoLoopBlockSyntax
            Return Syntax.DoLoopBlock(kind, begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, [end])
        End Function


        ''' <summary>
        ''' The Do statement that begins a Do-Loop block. This statement always occurs as
        ''' the Begin of a DoLoopBlock.
        ''' </summary>
        ''' <param name="doKeyword">
        ''' The "Do" keyword.
        ''' </param>
        ''' <param name="whileUntilClause">
        ''' The "While expression" or "Until expression" part of the Do statement, if
        ''' present.
        ''' </param>
        Public Shared Function DoStatement(doKeyword As SyntaxToken, whileUntilClause As WhileUntilClauseSyntax) As DoStatementSyntax
            Select Case doKeyword.Kind
                Case SyntaxKind.DoKeyword
                Case Else
                    Throw new ArgumentException("doKeyword")
             End Select
            Return New DoStatementSyntax(SyntaxKind.DoStatement, Nothing, Nothing, DirectCast(doKeyword.Node, InternalSyntax.KeywordSyntax), whileUntilClause)
        End Function


        ''' <summary>
        ''' The Do statement that begins a Do-Loop block. This statement always occurs as
        ''' the Begin of a DoLoopBlock.
        ''' </summary>
        ''' <param name="whileUntilClause">
        ''' The "While expression" or "Until expression" part of the Do statement, if
        ''' present.
        ''' </param>
        Public Shared Function DoStatement(whileUntilClause As WhileUntilClauseSyntax) As DoStatementSyntax
            Return Syntax.DoStatement(Syntax.Token(SyntaxKind.DoKeyword), whileUntilClause)
        End Function


        ''' <summary>
        ''' The Do statement that begins a Do-Loop block. This statement always occurs as
        ''' the Begin of a DoLoopBlock.
        ''' </summary>
        Public Shared Function DoStatement() As DoStatementSyntax
            Return Syntax.DoStatement(Syntax.Token(SyntaxKind.DoKeyword), Nothing)
        End Function


        ''' <summary>
        ''' The Loop statement that ends a Do-Loop block. This statement always occurs as
        ''' the End of a DoLoopBlock.
        ''' </summary>
        ''' <param name="loopKeyword">
        ''' The "Loop" keyword.
        ''' </param>
        ''' <param name="whileUntilClause">
        ''' The "While expression" or "Until expression" part of the Loop statement, if
        ''' present.
        ''' </param>
        Public Shared Function LoopStatement(loopKeyword As SyntaxToken, whileUntilClause As WhileUntilClauseSyntax) As LoopStatementSyntax
            Select Case loopKeyword.Kind
                Case SyntaxKind.LoopKeyword
                Case Else
                    Throw new ArgumentException("loopKeyword")
             End Select
            Return New LoopStatementSyntax(SyntaxKind.LoopStatement, Nothing, Nothing, DirectCast(loopKeyword.Node, InternalSyntax.KeywordSyntax), whileUntilClause)
        End Function


        ''' <summary>
        ''' The Loop statement that ends a Do-Loop block. This statement always occurs as
        ''' the End of a DoLoopBlock.
        ''' </summary>
        ''' <param name="whileUntilClause">
        ''' The "While expression" or "Until expression" part of the Loop statement, if
        ''' present.
        ''' </param>
        Public Shared Function LoopStatement(whileUntilClause As WhileUntilClauseSyntax) As LoopStatementSyntax
            Return Syntax.LoopStatement(Syntax.Token(SyntaxKind.LoopKeyword), whileUntilClause)
        End Function


        ''' <summary>
        ''' The Loop statement that ends a Do-Loop block. This statement always occurs as
        ''' the End of a DoLoopBlock.
        ''' </summary>
        Public Shared Function LoopStatement() As LoopStatementSyntax
            Return Syntax.LoopStatement(Syntax.Token(SyntaxKind.LoopKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        ''' <param name="whileOrUntilKeyword">
        ''' The "While" or "Until" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression after the While or Until.
        ''' </param>
        Public Shared Function WhileClause(whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileUntilClauseSyntax
            Select Case whileOrUntilKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("whileOrUntilKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New WhileUntilClauseSyntax(SyntaxKind.WhileClause, Nothing, Nothing, DirectCast(whileOrUntilKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression after the While or Until.
        ''' </param>
        Public Shared Function WhileClause(condition As ExpressionSyntax) As WhileUntilClauseSyntax
            Return Syntax.WhileClause(Syntax.Token(SyntaxKind.WhileKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        ''' <param name="whileOrUntilKeyword">
        ''' The "While" or "Until" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression after the While or Until.
        ''' </param>
        Public Shared Function UntilClause(whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileUntilClauseSyntax
            Select Case whileOrUntilKeyword.Kind
                Case SyntaxKind.UntilKeyword
                Case Else
                    Throw new ArgumentException("whileOrUntilKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New WhileUntilClauseSyntax(SyntaxKind.UntilClause, Nothing, Nothing, DirectCast(whileOrUntilKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression after the While or Until.
        ''' </param>
        Public Shared Function UntilClause(condition As ExpressionSyntax) As WhileUntilClauseSyntax
            Return Syntax.UntilClause(Syntax.Token(SyntaxKind.UntilKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "While expression" or "Until expression" in a Do or Loop
        ''' statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
        ''' indicate which kind of clause.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' WhileUntilClauseSyntax. One of WhileClause, UntilClause.
        ''' </param>
        ''' <param name="whileOrUntilKeyword">
        ''' The "While" or "Until" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression after the While or Until.
        ''' </param>
        Public Shared Function WhileUntilClause(ByVal kind As SyntaxKind, whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileUntilClauseSyntax
            If Not kind.IsWhileUntilClause Then
                Throw New ArgumentException("kind")
            End If
            If whileOrUntilKeyword.Kind <> GetWhileUntilClauseWhileOrUntilKeywordKind(kind) Then
                Throw new ArgumentException("whileOrUntilKeyword")
            End If
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New WhileUntilClauseSyntax(kind, Nothing, Nothing, DirectCast(whileOrUntilKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function

        Private Shared Function GetWhileUntilClauseWhileOrUntilKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.WhileClause
                    Return SyntaxKind.WhileKeyword
                Case SyntaxKind.UntilClause
                    Return SyntaxKind.UntilKeyword
                Case Else
                    Throw New ArgumentException("WhileOrUntilKeyword")
            End Select
        End Function

        ''' <summary>
        ''' The While statement that begins a While...End While block. This statement
        ''' always occurs as the Begin of a WhileBlock.
        ''' </summary>
        ''' <param name="whileKeyword">
        ''' The "While" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression that controls the While loop.
        ''' </param>
        Public Shared Function WhileStatement(whileKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileStatementSyntax
            Select Case whileKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("whileKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New WhileStatementSyntax(SyntaxKind.WhileStatement, Nothing, Nothing, DirectCast(whileKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' The While statement that begins a While...End While block. This statement
        ''' always occurs as the Begin of a WhileBlock.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression that controls the While loop.
        ''' </param>
        Public Shared Function WhileStatement(condition As ExpressionSyntax) As WhileStatementSyntax
            Return Syntax.WhileStatement(Syntax.Token(SyntaxKind.WhileKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the For or For Each loop. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The Next statement that ends the block. If two For statements are ended by a
        ''' single Next statement, the inner For will not have an EndStatment.
        ''' </param>
        Public Shared Function ForBlock(begin As ExecutableStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As NextStatementSyntax) As ForBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ForStatement,
                     SyntaxKind.ForEachStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New ForBlockSyntax(SyntaxKind.ForBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the For or For Each loop. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The Next statement that ends the block. If two For statements are ended by a
        ''' single Next statement, the inner For will not have an EndStatment.
        ''' </param>
        Public Shared Function ForBlock(begin As ExecutableStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As NextStatementSyntax) As ForBlockSyntax
            Return Syntax.ForBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        Public Shared Function ForBlock(begin As ExecutableStatementSyntax) As ForBlockSyntax
            Return Syntax.ForBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the For or For Each loop. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The Next statement that ends the block. If two For statements are ended by a
        ''' single Next statement, the inner For will not have an EndStatment.
        ''' </param>
        Public Shared Function ForEachBlock(begin As ExecutableStatementSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As NextStatementSyntax) As ForBlockSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.ForStatement,
                     SyntaxKind.ForEachStatement
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            Select Case beginTerminator.Kind
                Case SyntaxKind.ColonToken:
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("beginTerminator")
             End Select
            Return New ForBlockSyntax(SyntaxKind.ForEachBlock, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        ''' <param name="statements">
        ''' The statements contained in the For or For Each loop. This might be an empty
        ''' list.
        ''' </param>
        ''' <param name="end">
        ''' The Next statement that ends the block. If two For statements are ended by a
        ''' single Next statement, the inner For will not have an EndStatment.
        ''' </param>
        Public Shared Function ForEachBlock(begin As ExecutableStatementSyntax, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As NextStatementSyntax) As ForBlockSyntax
            Return Syntax.ForEachBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), statements, [end])
        End Function


        ''' <summary>
        ''' Represents a For or For Each block, including the introducting statement, the
        ''' body and the "Next" (which can be omitted if a containing For has a Next with
        ''' multiple variables).
        ''' </summary>
        ''' <param name="begin">
        ''' The For or For Each statement that begins the block.
        ''' </param>
        Public Shared Function ForEachBlock(begin As ExecutableStatementSyntax) As ForBlockSyntax
            Return Syntax.ForEachBlock(begin, Syntax.Token(SyntaxKind.StatementTerminatorToken), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' The For statement that begins a For-Next block. This statement always occurs as
        ''' the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ''' <param name="forKeyword">
        ''' The "For" keyword.
        ''' </param>
        ''' <param name="controlVariable">
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The "=" token.
        ''' </param>
        ''' <param name="fromValue">
        ''' The expression denoting the initial value of the iteration.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The "To" keyword.
        ''' </param>
        ''' <param name="toValue">
        ''' The expression denoting the final value of the iteration.
        ''' </param>
        ''' <param name="stepClause">
        ''' The optional Step clause.
        ''' </param>
        Public Shared Function ForStatement(forKeyword As SyntaxToken, controlVariable As SyntaxNode, equalsToken As SyntaxToken, fromValue As ExpressionSyntax, toKeyword As SyntaxToken, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax) As ForStatementSyntax
            Select Case forKeyword.Kind
                Case SyntaxKind.ForKeyword
                Case Else
                    Throw new ArgumentException("forKeyword")
             End Select
            if controlVariable Is Nothing Then
                Throw New ArgumentNullException("controlVariable")
            End If
            Select Case controlVariable.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName,
                     SyntaxKind.VariableDeclarator
                Case Else
                    Throw new ArgumentException("controlVariable")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if fromValue Is Nothing Then
                Throw New ArgumentNullException("fromValue")
            End If
            Select Case fromValue.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("fromValue")
             End Select
            Select Case toKeyword.Kind
                Case SyntaxKind.ToKeyword
                Case Else
                    Throw new ArgumentException("toKeyword")
             End Select
            if toValue Is Nothing Then
                Throw New ArgumentNullException("toValue")
            End If
            Select Case toValue.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("toValue")
             End Select
            Return New ForStatementSyntax(SyntaxKind.ForStatement, Nothing, Nothing, DirectCast(forKeyword.Node, InternalSyntax.KeywordSyntax), controlVariable, DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), fromValue, DirectCast(toKeyword.Node, InternalSyntax.KeywordSyntax), toValue, stepClause)
        End Function


        ''' <summary>
        ''' The For statement that begins a For-Next block. This statement always occurs as
        ''' the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ''' <param name="controlVariable">
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </param>
        ''' <param name="fromValue">
        ''' The expression denoting the initial value of the iteration.
        ''' </param>
        ''' <param name="toValue">
        ''' The expression denoting the final value of the iteration.
        ''' </param>
        ''' <param name="stepClause">
        ''' The optional Step clause.
        ''' </param>
        Public Shared Function ForStatement(controlVariable As SyntaxNode, fromValue As ExpressionSyntax, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax) As ForStatementSyntax
            Return Syntax.ForStatement(Syntax.Token(SyntaxKind.ForKeyword), controlVariable, Syntax.Token(SyntaxKind.EqualsToken), fromValue, Syntax.Token(SyntaxKind.ToKeyword), toValue, stepClause)
        End Function


        ''' <summary>
        ''' The For statement that begins a For-Next block. This statement always occurs as
        ''' the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ''' <param name="controlVariable">
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </param>
        ''' <param name="fromValue">
        ''' The expression denoting the initial value of the iteration.
        ''' </param>
        ''' <param name="toValue">
        ''' The expression denoting the final value of the iteration.
        ''' </param>
        Public Shared Function ForStatement(controlVariable As SyntaxNode, fromValue As ExpressionSyntax, toValue As ExpressionSyntax) As ForStatementSyntax
            Return Syntax.ForStatement(Syntax.Token(SyntaxKind.ForKeyword), controlVariable, Syntax.Token(SyntaxKind.EqualsToken), fromValue, Syntax.Token(SyntaxKind.ToKeyword), toValue, Nothing)
        End Function


        ''' <summary>
        ''' The Step clause in a For Statement.
        ''' </summary>
        ''' <param name="stepKeyword">
        ''' The "Step" keyword.
        ''' </param>
        ''' <param name="stepValue">
        ''' The expression denoting the step increment.
        ''' </param>
        Public Shared Function ForStepClause(stepKeyword As SyntaxToken, stepValue As ExpressionSyntax) As ForStepClauseSyntax
            Select Case stepKeyword.Kind
                Case SyntaxKind.StepKeyword
                Case Else
                    Throw new ArgumentException("stepKeyword")
             End Select
            if stepValue Is Nothing Then
                Throw New ArgumentNullException("stepValue")
            End If
            Select Case stepValue.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("stepValue")
             End Select
            Return New ForStepClauseSyntax(SyntaxKind.ForStepClause, Nothing, Nothing, DirectCast(stepKeyword.Node, InternalSyntax.KeywordSyntax), stepValue)
        End Function


        ''' <summary>
        ''' The Step clause in a For Statement.
        ''' </summary>
        ''' <param name="stepValue">
        ''' The expression denoting the step increment.
        ''' </param>
        Public Shared Function ForStepClause(stepValue As ExpressionSyntax) As ForStepClauseSyntax
            Return Syntax.ForStepClause(Syntax.Token(SyntaxKind.StepKeyword), stepValue)
        End Function


        ''' <summary>
        ''' The For Each statement that begins a For Each-Next block. This statement always
        ''' occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
        ''' Body of that ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ''' <param name="forKeyword">
        ''' The "For" keyword.
        ''' </param>
        ''' <param name="eachKeyword">
        ''' The "Each" keyword.
        ''' </param>
        ''' <param name="controlVariable">
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </param>
        ''' <param name="inKeyword">
        ''' The "In" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression denoting the collection to iterate over.
        ''' </param>
        Public Shared Function ForEachStatement(forKeyword As SyntaxToken, eachKeyword As SyntaxToken, controlVariable As SyntaxNode, inKeyword As SyntaxToken, expression As ExpressionSyntax) As ForEachStatementSyntax
            Select Case forKeyword.Kind
                Case SyntaxKind.ForKeyword
                Case Else
                    Throw new ArgumentException("forKeyword")
             End Select
            Select Case eachKeyword.Kind
                Case SyntaxKind.EachKeyword
                Case Else
                    Throw new ArgumentException("eachKeyword")
             End Select
            if controlVariable Is Nothing Then
                Throw New ArgumentNullException("controlVariable")
            End If
            Select Case controlVariable.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName,
                     SyntaxKind.VariableDeclarator
                Case Else
                    Throw new ArgumentException("controlVariable")
             End Select
            Select Case inKeyword.Kind
                Case SyntaxKind.InKeyword
                Case Else
                    Throw new ArgumentException("inKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New ForEachStatementSyntax(SyntaxKind.ForEachStatement, Nothing, Nothing, DirectCast(forKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(eachKeyword.Node, InternalSyntax.KeywordSyntax), controlVariable, DirectCast(inKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' The For Each statement that begins a For Each-Next block. This statement always
        ''' occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
        ''' Body of that ForBlock. Most of the time, the End of that ForBlock is the
        ''' corresponding Next statement. However, multiple nested For statements are ended
        ''' by a single Next statement with multiple variables, then the inner For
        ''' statements will have End set to Nothing, and the Next statement is the End of
        ''' the outermost For statement that is being ended.
        ''' </summary>
        ''' <param name="controlVariable">
        ''' If the For or For Each statement is of a form that does not declare a new loop
        ''' control variable, this is the expression that denotes the loop control
        ''' variable. If this loop is of a form that does declare a new control variable,
        ''' this is a VariableDeclarator that has the variable being declared.
        ''' </param>
        ''' <param name="expression">
        ''' The expression denoting the collection to iterate over.
        ''' </param>
        Public Shared Function ForEachStatement(controlVariable As SyntaxNode, expression As ExpressionSyntax) As ForEachStatementSyntax
            Return Syntax.ForEachStatement(Syntax.Token(SyntaxKind.ForKeyword), Syntax.Token(SyntaxKind.EachKeyword), controlVariable, Syntax.Token(SyntaxKind.InKeyword), expression)
        End Function


        ''' <summary>
        ''' The Next statement that ends a For-Next or For Each-Next block. This statement
        ''' always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
        ''' and the body of the For-Next is the Body of that ForBlock. The Begin of that
        ''' ForBlock has the corresponding For or For Each statement.
        ''' </summary>
        ''' <param name="nextKeyword">
        ''' The "Next" keyword.
        ''' </param>
        ''' <param name="controlVariables">
        ''' The variables in the Next statement, if present
        ''' </param>
        Public Shared Function NextStatement(nextKeyword As SyntaxToken, controlVariables As SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax
            Select Case nextKeyword.Kind
                Case SyntaxKind.NextKeyword
                Case Else
                    Throw new ArgumentException("nextKeyword")
             End Select
            Return New NextStatementSyntax(SyntaxKind.NextStatement, Nothing, Nothing, DirectCast(nextKeyword.Node, InternalSyntax.KeywordSyntax), controlVariables.Node)
        End Function


        ''' <summary>
        ''' The Next statement that ends a For-Next or For Each-Next block. This statement
        ''' always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
        ''' and the body of the For-Next is the Body of that ForBlock. The Begin of that
        ''' ForBlock has the corresponding For or For Each statement.
        ''' </summary>
        ''' <param name="controlVariables">
        ''' The variables in the Next statement, if present
        ''' </param>
        Public Shared Function NextStatement(controlVariables As SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax
            Return Syntax.NextStatement(Syntax.Token(SyntaxKind.NextKeyword), controlVariables)
        End Function


        ''' <summary>
        ''' The Next statement that ends a For-Next or For Each-Next block. This statement
        ''' always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
        ''' and the body of the For-Next is the Body of that ForBlock. The Begin of that
        ''' ForBlock has the corresponding For or For Each statement.
        ''' </summary>
        Public Shared Function NextStatement() As NextStatementSyntax
            Return Syntax.NextStatement(Syntax.Token(SyntaxKind.NextKeyword), Nothing)
        End Function


        ''' <summary>
        ''' The Using statement that begins a Using block. This statement always occurs as
        ''' the Begin of a UsingBlock, and the body of the Using is the Body of that
        ''' UsingBlock.
        ''' </summary>
        ''' <param name="usingKeyword">
        ''' The "Using" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' If the Using statement is of a form that does not declare a new variable, this
        ''' is the expression used in the using. Otherwise, Nothing is returned.
        ''' </param>
        ''' <param name="variables">
        ''' If the Using statement is of a form that declares one or more new variables,
        ''' this is the list of variable declarations. Otherwise, Nothing is returned.
        ''' </param>
        Public Shared Function UsingStatement(usingKeyword As SyntaxToken, expression As ExpressionSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax
            Select Case usingKeyword.Kind
                Case SyntaxKind.UsingKeyword
                Case Else
                    Throw new ArgumentException("usingKeyword")
             End Select
            Return New UsingStatementSyntax(SyntaxKind.UsingStatement, Nothing, Nothing, DirectCast(usingKeyword.Node, InternalSyntax.KeywordSyntax), expression, variables.Node)
        End Function


        ''' <summary>
        ''' The Using statement that begins a Using block. This statement always occurs as
        ''' the Begin of a UsingBlock, and the body of the Using is the Body of that
        ''' UsingBlock.
        ''' </summary>
        ''' <param name="expression">
        ''' If the Using statement is of a form that does not declare a new variable, this
        ''' is the expression used in the using. Otherwise, Nothing is returned.
        ''' </param>
        ''' <param name="variables">
        ''' If the Using statement is of a form that declares one or more new variables,
        ''' this is the list of variable declarations. Otherwise, Nothing is returned.
        ''' </param>
        Public Shared Function UsingStatement(expression As ExpressionSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax
            Return Syntax.UsingStatement(Syntax.Token(SyntaxKind.UsingKeyword), expression, variables)
        End Function


        ''' <summary>
        ''' The Using statement that begins a Using block. This statement always occurs as
        ''' the Begin of a UsingBlock, and the body of the Using is the Body of that
        ''' UsingBlock.
        ''' </summary>
        Public Shared Function UsingStatement() As UsingStatementSyntax
            Return Syntax.UsingStatement(Syntax.Token(SyntaxKind.UsingKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a Throw statement.
        ''' </summary>
        ''' <param name="throwKeyword">
        ''' The "Throw" keyword
        ''' </param>
        ''' <param name="expression">
        ''' The expression denoting the value being thrown.
        ''' </param>
        Public Shared Function ThrowStatement(throwKeyword As SyntaxToken, expression As ExpressionSyntax) As ThrowStatementSyntax
            Select Case throwKeyword.Kind
                Case SyntaxKind.ThrowKeyword
                Case Else
                    Throw new ArgumentException("throwKeyword")
             End Select
            Return New ThrowStatementSyntax(SyntaxKind.ThrowStatement, Nothing, Nothing, DirectCast(throwKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents a Throw statement.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression denoting the value being thrown.
        ''' </param>
        Public Shared Function ThrowStatement(expression As ExpressionSyntax) As ThrowStatementSyntax
            Return Syntax.ThrowStatement(Syntax.Token(SyntaxKind.ThrowKeyword), expression)
        End Function


        ''' <summary>
        ''' Represents a Throw statement.
        ''' </summary>
        Public Shared Function ThrowStatement() As ThrowStatementSyntax
            Return Syntax.ThrowStatement(Syntax.Token(SyntaxKind.ThrowKeyword), Nothing)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function AssignmentStatement(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.AssignmentStatement, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function MidAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.MidAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function AddAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.AddAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function SubtractAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.SubtractAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function MultiplyAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.MultiplyAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function DivideAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.DivideAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function IntegerDivideAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.IntegerDivideAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function PowerAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.PowerAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function LeftShiftAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.LeftShiftAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function RightShiftAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.RightShiftAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents an assignment or compound assignment statement. Which one can be
        ''' determined by checking the Kind.
        ''' </summary>
        ''' <param name="left">
        ''' The target (left hand side) of the assignment.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
        ''' "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
        ''' </param>
        ''' <param name="right">
        ''' The source (right hand side) of the assignment.
        ''' </param>
        Public Shared Function ConcatenateAssignment(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken:
                Case SyntaxKind.PlusEqualsToken:
                Case SyntaxKind.MinusEqualsToken:
                Case SyntaxKind.AsteriskEqualsToken:
                Case SyntaxKind.SlashEqualsToken:
                Case SyntaxKind.BackslashEqualsToken:
                Case SyntaxKind.CaretEqualsToken:
                Case SyntaxKind.LessThanLessThanEqualsToken:
                Case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                Case SyntaxKind.AmpersandEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New AssignmentStatementSyntax(SyntaxKind.ConcatenateAssignment, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represent an call statement (also known as a invocation statement).
        ''' </summary>
        ''' <param name="callKeyword">
        ''' The "Call" keyword, if present.
        ''' </param>
        ''' <param name="invocation">
        ''' The expression denoting the call. This could be an Invocation or a MemberAccess
        ''' (in the case where no parentheses were supplied.)
        ''' </param>
        Public Shared Function CallStatement(callKeyword As SyntaxToken, invocation As ExpressionSyntax) As CallStatementSyntax
            if invocation Is Nothing Then
                Throw New ArgumentNullException("invocation")
            End If
            Select Case invocation.Kind
                Case SyntaxKind.InvocationExpression,
                     SyntaxKind.MemberAccessExpression
                Case Else
                    Throw new ArgumentException("invocation")
             End Select
            Return New CallStatementSyntax(SyntaxKind.CallStatement, Nothing, Nothing, DirectCast(callKeyword.Node, InternalSyntax.KeywordSyntax), invocation)
        End Function


        ''' <summary>
        ''' Represent an call statement (also known as a invocation statement).
        ''' </summary>
        ''' <param name="invocation">
        ''' The expression denoting the call. This could be an Invocation or a MemberAccess
        ''' (in the case where no parentheses were supplied.)
        ''' </param>
        Public Shared Function CallStatement(invocation As ExpressionSyntax) As CallStatementSyntax
            Return Syntax.CallStatement(Nothing, invocation)
        End Function


        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="addHandlerOrRemoveHandlerKeyword">
        ''' The "AddHandler" or "RemoveHandler" keyword.
        ''' </param>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function AddHandlerStatement(addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Select Case addHandlerOrRemoveHandlerKeyword.Kind
                Case SyntaxKind.AddHandlerKeyword
                Case Else
                    Throw new ArgumentException("addHandlerOrRemoveHandlerKeyword")
             End Select
            if eventExpression Is Nothing Then
                Throw New ArgumentNullException("eventExpression")
            End If
            Select Case eventExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("eventExpression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if delegateExpression Is Nothing Then
                Throw New ArgumentNullException("delegateExpression")
            End If
            Select Case delegateExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("delegateExpression")
             End Select
            Return New AddRemoveHandlerStatementSyntax(SyntaxKind.AddHandlerStatement, Nothing, Nothing, DirectCast(addHandlerOrRemoveHandlerKeyword.Node, InternalSyntax.KeywordSyntax), eventExpression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), delegateExpression)
        End Function


        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function AddHandlerStatement(eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Return Syntax.AddHandlerStatement(Syntax.Token(SyntaxKind.AddHandlerKeyword), eventExpression, Syntax.Token(SyntaxKind.CommaToken), delegateExpression)
        End Function


        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="addHandlerOrRemoveHandlerKeyword">
        ''' The "AddHandler" or "RemoveHandler" keyword.
        ''' </param>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function RemoveHandlerStatement(addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Select Case addHandlerOrRemoveHandlerKeyword.Kind
                Case SyntaxKind.RemoveHandlerKeyword
                Case Else
                    Throw new ArgumentException("addHandlerOrRemoveHandlerKeyword")
             End Select
            if eventExpression Is Nothing Then
                Throw New ArgumentNullException("eventExpression")
            End If
            Select Case eventExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("eventExpression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if delegateExpression Is Nothing Then
                Throw New ArgumentNullException("delegateExpression")
            End If
            Select Case delegateExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("delegateExpression")
             End Select
            Return New AddRemoveHandlerStatementSyntax(SyntaxKind.RemoveHandlerStatement, Nothing, Nothing, DirectCast(addHandlerOrRemoveHandlerKeyword.Node, InternalSyntax.KeywordSyntax), eventExpression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), delegateExpression)
        End Function


        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function RemoveHandlerStatement(eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Return Syntax.RemoveHandlerStatement(Syntax.Token(SyntaxKind.RemoveHandlerKeyword), eventExpression, Syntax.Token(SyntaxKind.CommaToken), delegateExpression)
        End Function


        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' AddRemoveHandlerStatementSyntax. One of AddHandlerStatement,
        ''' RemoveHandlerStatement.
        ''' </param>
        ''' <param name="addHandlerOrRemoveHandlerKeyword">
        ''' The "AddHandler" or "RemoveHandler" keyword.
        ''' </param>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function AddRemoveHandlerStatement(ByVal kind As SyntaxKind, addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            If Not kind.IsAddRemoveHandlerStatement Then
                Throw New ArgumentException("kind")
            End If
            If addHandlerOrRemoveHandlerKeyword.Kind <> GetAddRemoveHandlerStatementAddHandlerOrRemoveHandlerKeywordKind(kind) Then
                Throw new ArgumentException("addHandlerOrRemoveHandlerKeyword")
            End If
            if eventExpression Is Nothing Then
                Throw New ArgumentNullException("eventExpression")
            End If
            Select Case eventExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("eventExpression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if delegateExpression Is Nothing Then
                Throw New ArgumentNullException("delegateExpression")
            End If
            Select Case delegateExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("delegateExpression")
             End Select
            Return New AddRemoveHandlerStatementSyntax(kind, Nothing, Nothing, DirectCast(addHandlerOrRemoveHandlerKeyword.Node, InternalSyntax.KeywordSyntax), eventExpression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), delegateExpression)
        End Function

        Private Shared Function GetAddRemoveHandlerStatementAddHandlerOrRemoveHandlerKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.AddHandlerStatement
                    Return SyntaxKind.AddHandlerKeyword
                Case SyntaxKind.RemoveHandlerStatement
                    Return SyntaxKind.RemoveHandlerKeyword
                Case Else
                    Throw New ArgumentException("AddHandlerOrRemoveHandlerKeyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents an AddHandler or RemoveHandler statement. The Kind property
        ''' determines which one.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' AddRemoveHandlerStatementSyntax. One of AddHandlerStatement,
        ''' RemoveHandlerStatement.
        ''' </param>
        ''' <param name="addHandlerOrRemoveHandlerKeyword">
        ''' The "AddHandler" or "RemoveHandler" keyword.
        ''' </param>
        ''' <param name="eventExpression">
        ''' The event being accessed.
        ''' </param>
        ''' <param name="delegateExpression">
        ''' The delegate being added or removed.
        ''' </param>
        Public Shared Function AddRemoveHandlerStatement(ByVal kind As SyntaxKind, addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax
            Return Syntax.AddRemoveHandlerStatement(kind, addHandlerOrRemoveHandlerKeyword, eventExpression, Syntax.Token(SyntaxKind.CommaToken), delegateExpression)
        End Function


        ''' <summary>
        ''' Represent a RaiseEvent statement.
        ''' </summary>
        ''' <param name="raiseEventKeyword">
        ''' The "RaiseEvent" keyword
        ''' </param>
        ''' <param name="identifier">
        ''' The name of the event being raised.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list, if present.
        ''' </param>
        Public Shared Function RaiseEventStatement(raiseEventKeyword As SyntaxToken, identifier As IdentifierNameSyntax, argumentList As ArgumentListSyntax) As RaiseEventStatementSyntax
            Select Case raiseEventKeyword.Kind
                Case SyntaxKind.RaiseEventKeyword
                Case Else
                    Throw new ArgumentException("raiseEventKeyword")
             End Select
            if identifier Is Nothing Then
                Throw New ArgumentNullException("identifier")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierName
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New RaiseEventStatementSyntax(SyntaxKind.RaiseEventStatement, Nothing, Nothing, DirectCast(raiseEventKeyword.Node, InternalSyntax.KeywordSyntax), identifier, argumentList)
        End Function


        ''' <summary>
        ''' Represent a RaiseEvent statement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the event being raised.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list, if present.
        ''' </param>
        Public Shared Function RaiseEventStatement(identifier As IdentifierNameSyntax, argumentList As ArgumentListSyntax) As RaiseEventStatementSyntax
            Return Syntax.RaiseEventStatement(Syntax.Token(SyntaxKind.RaiseEventKeyword), identifier, argumentList)
        End Function


        ''' <summary>
        ''' Represent a RaiseEvent statement.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the event being raised.
        ''' </param>
        Public Shared Function RaiseEventStatement(identifier As IdentifierNameSyntax) As RaiseEventStatementSyntax
            Return Syntax.RaiseEventStatement(Syntax.Token(SyntaxKind.RaiseEventKeyword), identifier, Nothing)
        End Function


        ''' <summary>
        ''' Represents a "With" statement. This statement always occurs as the
        ''' BeginStatement of a WithBlock, and the body of the With is the Body of that
        ''' WithBlock.
        ''' </summary>
        ''' <param name="withKeyword">
        ''' The "With" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that is the operand of the With statement.
        ''' </param>
        Public Shared Function WithStatement(withKeyword As SyntaxToken, expression As ExpressionSyntax) As WithStatementSyntax
            Select Case withKeyword.Kind
                Case SyntaxKind.WithKeyword
                Case Else
                    Throw new ArgumentException("withKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New WithStatementSyntax(SyntaxKind.WithStatement, Nothing, Nothing, DirectCast(withKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents a "With" statement. This statement always occurs as the
        ''' BeginStatement of a WithBlock, and the body of the With is the Body of that
        ''' WithBlock.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression that is the operand of the With statement.
        ''' </param>
        Public Shared Function WithStatement(expression As ExpressionSyntax) As WithStatementSyntax
            Return Syntax.WithStatement(Syntax.Token(SyntaxKind.WithKeyword), expression)
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="reDimKeyword">
        ''' The "ReDim" keyword.
        ''' </param>
        ''' <param name="preserveKeyword">
        ''' Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
        ''' Kind=RedimPreserve.
        ''' </param>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimStatement(reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            Select Case reDimKeyword.Kind
                Case SyntaxKind.ReDimKeyword
                Case Else
                    Throw new ArgumentException("reDimKeyword")
             End Select
            Return New ReDimStatementSyntax(SyntaxKind.ReDimStatement, Nothing, Nothing, DirectCast(reDimKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(preserveKeyword.Node, InternalSyntax.KeywordSyntax), clauses.Node)
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimStatement(clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            Return Syntax.ReDimStatement(Syntax.Token(SyntaxKind.ReDimKeyword), Nothing, clauses)
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimStatement(ParamArray clauses As InvocationExpressionSyntax()) As ReDimStatementSyntax
            Return Syntax.ReDimStatement(Syntax.Token(SyntaxKind.ReDimKeyword), Nothing, Syntax.SeparatedList(Of InvocationExpressionSyntax)().Add(SyntaxKind.CommaToken, clauses))
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="reDimKeyword">
        ''' The "ReDim" keyword.
        ''' </param>
        ''' <param name="preserveKeyword">
        ''' Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
        ''' Kind=RedimPreserve.
        ''' </param>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimPreserveStatement(reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            Select Case reDimKeyword.Kind
                Case SyntaxKind.ReDimKeyword
                Case Else
                    Throw new ArgumentException("reDimKeyword")
             End Select
            Return New ReDimStatementSyntax(SyntaxKind.ReDimPreserveStatement, Nothing, Nothing, DirectCast(reDimKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(preserveKeyword.Node, InternalSyntax.KeywordSyntax), clauses.Node)
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimPreserveStatement(clauses As SeparatedSyntaxList(Of InvocationExpressionSyntax)) As ReDimStatementSyntax
            Return Syntax.ReDimPreserveStatement(Syntax.Token(SyntaxKind.ReDimKeyword), Nothing, clauses)
        End Function


        ''' <summary>
        ''' Represents a ReDim statement.
        ''' </summary>
        ''' <param name="clauses">
        ''' The list of ReDim clauses. Each clause is a Invocation node with an argument
        ''' list denoting the new bounds for the array.
        ''' </param>
        Public Shared Function ReDimPreserveStatement(ParamArray clauses As InvocationExpressionSyntax()) As ReDimStatementSyntax
            Return Syntax.ReDimPreserveStatement(Syntax.Token(SyntaxKind.ReDimKeyword), Nothing, Syntax.SeparatedList(Of InvocationExpressionSyntax)().Add(SyntaxKind.CommaToken, clauses))
        End Function


        ''' <summary>
        ''' Represents an "Erase" statement.
        ''' </summary>
        ''' <param name="eraseKeyword">
        ''' The "Erase" keyword.
        ''' </param>
        ''' <param name="expressions">
        ''' A list of expressions denoting the arrays to erase.
        ''' </param>
        Public Shared Function EraseStatement(eraseKeyword As SyntaxToken, expressions As SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax
            Select Case eraseKeyword.Kind
                Case SyntaxKind.EraseKeyword
                Case Else
                    Throw new ArgumentException("eraseKeyword")
             End Select
            Return New EraseStatementSyntax(SyntaxKind.EraseStatement, Nothing, Nothing, DirectCast(eraseKeyword.Node, InternalSyntax.KeywordSyntax), expressions.Node)
        End Function


        ''' <summary>
        ''' Represents an "Erase" statement.
        ''' </summary>
        ''' <param name="expressions">
        ''' A list of expressions denoting the arrays to erase.
        ''' </param>
        Public Shared Function EraseStatement(expressions As SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax
            Return Syntax.EraseStatement(Syntax.Token(SyntaxKind.EraseKeyword), expressions)
        End Function


        ''' <summary>
        ''' Represents an "Erase" statement.
        ''' </summary>
        ''' <param name="expressions">
        ''' A list of expressions denoting the arrays to erase.
        ''' </param>
        Public Shared Function EraseStatement(ParamArray expressions As ExpressionSyntax()) As EraseStatementSyntax
            Return Syntax.EraseStatement(Syntax.Token(SyntaxKind.EraseKeyword), Syntax.SeparatedList(Of ExpressionSyntax)().Add(SyntaxKind.CommaToken, expressions))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function CharacterLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.CharacterLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function TrueLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.TrueLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function FalseLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.FalseLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function NumericLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.NumericLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function DateLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.DateLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function StringLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.StringLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function NothingLiteralExpression(token As SyntaxToken) As LiteralExpressionSyntax
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(SyntaxKind.NothingLiteralExpression, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a literal. The kind of literal is determined by the Kind property:
        ''' IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
        ''' FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
        ''' determined by casting the associated Token to the correct type and getting the
        ''' value from the token.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' LiteralExpressionSyntax. One of CharacterLiteralExpression,
        ''' TrueLiteralExpression, FalseLiteralExpression, NumericLiteralExpression,
        ''' DateLiteralExpression, StringLiteralExpression, NothingLiteralExpression.
        ''' </param>
        ''' <param name="token">
        ''' The token that represents the literal. The Kind property determines what type
        ''' this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
        ''' Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
        ''' ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
        ''' FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
        ''' Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
        ''' Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
        ''' Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
        ''' NothingKeyword)
        ''' </param>
        Public Shared Function LiteralExpression(ByVal kind As SyntaxKind, token As SyntaxToken) As LiteralExpressionSyntax
            If Not kind.IsLiteralExpression Then
                Throw New ArgumentException("kind")
            End If
            Select Case token.Kind
                Case SyntaxKind.IntegerLiteralToken:
                Case SyntaxKind.CharacterLiteralToken:
                Case SyntaxKind.DecimalLiteralToken:
                Case SyntaxKind.FloatingLiteralToken:
                Case SyntaxKind.DateLiteralToken:
                Case SyntaxKind.StringLiteralToken:
                Case SyntaxKind.TrueKeyword:
                Case SyntaxKind.FalseKeyword:
                Case SyntaxKind.NothingKeyword
                Case Else
                    Throw new ArgumentException("token")
             End Select
            Return New LiteralExpressionSyntax(kind, Nothing, Nothing, DirectCast(token.Node, InternalSyntax.SyntaxToken))
        End Function


        ''' <summary>
        ''' Represents a parenthesized expression.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token
        ''' </param>
        ''' <param name="expression">
        ''' The expression inside the parentheses.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token
        ''' </param>
        Public Shared Function ParenthesizedExpression(openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As ParenthesizedExpressionSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ParenthesizedExpressionSyntax(SyntaxKind.ParenthesizedExpression, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a parenthesized expression.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression inside the parentheses.
        ''' </param>
        Public Shared Function ParenthesizedExpression(expression As ExpressionSyntax) As ParenthesizedExpressionSyntax
            Return Syntax.ParenthesizedExpression(Syntax.Token(SyntaxKind.OpenParenToken), expression, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Identifies the special instance "Me"
        ''' </summary>
        ''' <param name="keyword">
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </param>
        Public Shared Function MeExpression(keyword As SyntaxToken) As MeExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.MeKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New MeExpressionSyntax(SyntaxKind.MeExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Identifies the special instance "Me"
        ''' </summary>
        Public Shared Function MeExpression() As MeExpressionSyntax
            Return Syntax.MeExpression(Syntax.Token(SyntaxKind.MeKeyword))
        End Function


        ''' <summary>
        ''' Identifies the special instance "MyBase"
        ''' </summary>
        ''' <param name="keyword">
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </param>
        Public Shared Function MyBaseExpression(keyword As SyntaxToken) As MyBaseExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.MyBaseKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New MyBaseExpressionSyntax(SyntaxKind.MyBaseExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Identifies the special instance "MyBase"
        ''' </summary>
        Public Shared Function MyBaseExpression() As MyBaseExpressionSyntax
            Return Syntax.MyBaseExpression(Syntax.Token(SyntaxKind.MyBaseKeyword))
        End Function


        ''' <summary>
        ''' Identifies the special instance "MyClass"
        ''' </summary>
        ''' <param name="keyword">
        ''' The "Me", "MyClass" or "MyBase" keyword.
        ''' </param>
        Public Shared Function MyClassExpression(keyword As SyntaxToken) As MyClassExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.MyClassKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New MyClassExpressionSyntax(SyntaxKind.MyClassExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Identifies the special instance "MyClass"
        ''' </summary>
        Public Shared Function MyClassExpression() As MyClassExpressionSyntax
            Return Syntax.MyClassExpression(Syntax.Token(SyntaxKind.MyClassKeyword))
        End Function


        ''' <summary>
        ''' Represents a GetType expression.
        ''' </summary>
        ''' <param name="getTypeKeyword">
        ''' The "GetType" keyword.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="type">
        ''' The type to get the Type object for. This can be an open generic type.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function GetTypeExpression(getTypeKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As GetTypeExpressionSyntax
            Select Case getTypeKeyword.Kind
                Case SyntaxKind.GetTypeKeyword
                Case Else
                    Throw new ArgumentException("getTypeKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New GetTypeExpressionSyntax(SyntaxKind.GetTypeExpression, Nothing, Nothing, DirectCast(getTypeKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), type, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a GetType expression.
        ''' </summary>
        ''' <param name="type">
        ''' The type to get the Type object for. This can be an open generic type.
        ''' </param>
        Public Shared Function GetTypeExpression(type As TypeSyntax) As GetTypeExpressionSyntax
            Return Syntax.GetTypeExpression(Syntax.Token(SyntaxKind.GetTypeKeyword), Syntax.Token(SyntaxKind.OpenParenToken), type, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="typeOfKeyword">
        ''' The "TypeOf" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "Is" or "IsNot" keyword.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfIsExpression(typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax
            Select Case typeOfKeyword.Kind
                Case SyntaxKind.TypeOfKeyword
                Case Else
                    Throw new ArgumentException("typeOfKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.IsKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New TypeOfExpressionSyntax(SyntaxKind.TypeOfIsExpression, Nothing, Nothing, DirectCast(typeOfKeyword.Node, InternalSyntax.KeywordSyntax), expression, DirectCast(operatorToken.Node, InternalSyntax.KeywordSyntax), type)
        End Function


        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfIsExpression(expression As ExpressionSyntax, type As TypeSyntax) As TypeOfExpressionSyntax
            Return Syntax.TypeOfIsExpression(Syntax.Token(SyntaxKind.TypeOfKeyword), expression, Syntax.Token(SyntaxKind.IsKeyword), type)
        End Function


        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="typeOfKeyword">
        ''' The "TypeOf" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "Is" or "IsNot" keyword.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfIsNotExpression(typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax
            Select Case typeOfKeyword.Kind
                Case SyntaxKind.TypeOfKeyword
                Case Else
                    Throw new ArgumentException("typeOfKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.IsNotKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New TypeOfExpressionSyntax(SyntaxKind.TypeOfIsNotExpression, Nothing, Nothing, DirectCast(typeOfKeyword.Node, InternalSyntax.KeywordSyntax), expression, DirectCast(operatorToken.Node, InternalSyntax.KeywordSyntax), type)
        End Function


        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfIsNotExpression(expression As ExpressionSyntax, type As TypeSyntax) As TypeOfExpressionSyntax
            Return Syntax.TypeOfIsNotExpression(Syntax.Token(SyntaxKind.TypeOfKeyword), expression, Syntax.Token(SyntaxKind.IsNotKeyword), type)
        End Function


        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' TypeOfExpressionSyntax. One of TypeOfIsExpression, TypeOfIsNotExpression.
        ''' </param>
        ''' <param name="typeOfKeyword">
        ''' The "TypeOf" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "Is" or "IsNot" keyword.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfExpression(ByVal kind As SyntaxKind, typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax
            If Not kind.IsTypeOfExpression Then
                Throw New ArgumentException("kind")
            End If
            Select Case typeOfKeyword.Kind
                Case SyntaxKind.TypeOfKeyword
                Case Else
                    Throw new ArgumentException("typeOfKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            If operatorToken.Kind <> GetTypeOfExpressionOperatorTokenKind(kind) Then
                Throw new ArgumentException("operatorToken")
            End If
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New TypeOfExpressionSyntax(kind, Nothing, Nothing, DirectCast(typeOfKeyword.Node, InternalSyntax.KeywordSyntax), expression, DirectCast(operatorToken.Node, InternalSyntax.KeywordSyntax), type)
        End Function

        Private Shared Function GetTypeOfExpressionOperatorTokenKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.TypeOfIsExpression
                    Return SyntaxKind.IsKeyword
                Case SyntaxKind.TypeOfIsNotExpression
                    Return SyntaxKind.IsNotKeyword
                Case Else
                    Throw New ArgumentException("OperatorToken")
            End Select
        End Function

        ''' <summary>
        ''' Represents a TypeOf...Is or IsNot expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' TypeOfExpressionSyntax. One of TypeOfIsExpression, TypeOfIsNotExpression.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being tested.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "Is" or "IsNot" keyword.
        ''' </param>
        ''' <param name="type">
        ''' The name of the type being tested against.
        ''' </param>
        Public Shared Function TypeOfExpression(ByVal kind As SyntaxKind, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax
            Return Syntax.TypeOfExpression(kind, Syntax.Token(SyntaxKind.TypeOfKeyword), expression, operatorToken, type)
        End Function


        ''' <summary>
        ''' Represents a GetXmlNamespace expression.
        ''' </summary>
        ''' <param name="getXmlNamespaceKeyword">
        ''' The "GetXmlNamespace" keyword.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="name">
        ''' The Xml namespace name being referenced.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function GetXmlNamespaceExpression(getXmlNamespaceKeyword As SyntaxToken, openParenToken As SyntaxToken, name As SyntaxToken, closeParenToken As SyntaxToken) As GetXmlNamespaceExpressionSyntax
            Select Case getXmlNamespaceKeyword.Kind
                Case SyntaxKind.GetXmlNamespaceKeyword
                Case Else
                    Throw new ArgumentException("getXmlNamespaceKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New GetXmlNamespaceExpressionSyntax(SyntaxKind.GetXmlNamespaceExpression, Nothing, Nothing, DirectCast(getXmlNamespaceKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(name.Node, InternalSyntax.XmlNameTokenSyntax), DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a GetXmlNamespace expression.
        ''' </summary>
        Public Shared Function GetXmlNamespaceExpression() As GetXmlNamespaceExpressionSyntax
            Return Syntax.GetXmlNamespaceExpression(Syntax.Token(SyntaxKind.GetXmlNamespaceKeyword), Syntax.Token(SyntaxKind.OpenParenToken), Nothing, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression on the left-hand-side of the "." or "!" token.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "." or "!" token.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the "." or "!" token.
        ''' </param>
        Public Shared Function MemberAccessExpression(expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.DotToken:
                Case SyntaxKind.ExclamationToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New MemberAccessExpressionSyntax(SyntaxKind.MemberAccessExpression, Nothing, Nothing, expression, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The "." or "!" token.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the "." or "!" token.
        ''' </param>
        Public Shared Function MemberAccessExpression(operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax
            Return Syntax.MemberAccessExpression(Nothing, operatorToken, name)
        End Function


        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression on the left-hand-side of the "." or "!" token.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The "." or "!" token.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the "." or "!" token.
        ''' </param>
        Public Shared Function DictionaryAccess(expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.DotToken:
                Case SyntaxKind.ExclamationToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New MemberAccessExpressionSyntax(SyntaxKind.DictionaryAccess, Nothing, Nothing, expression, DirectCast(operatorToken.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents member access (.name) or dictionary access (!name). The Kind
        ''' property determines which kind of access.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The "." or "!" token.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the "." or "!" token.
        ''' </param>
        Public Shared Function DictionaryAccess(operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax
            Return Syntax.DictionaryAccess(Nothing, operatorToken, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token1">
        ''' The initial dot "." part of the separator.
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="token3">
        ''' The third "." in a "..." separator.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlElementAccessExpression(base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Select Case token1.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("token1")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New XmlMemberAccessExpressionSyntax(SyntaxKind.XmlElementAccessExpression, Nothing, Nothing, base, DirectCast(token1.Node, InternalSyntax.PunctuationSyntax), DirectCast(token2.Node, InternalSyntax.PunctuationSyntax), DirectCast(token3.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlElementAccessExpression(base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlElementAccessExpression(base, Syntax.Token(SyntaxKind.DotToken), token2, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlElementAccessExpression(name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlElementAccessExpression(Nothing, Syntax.Token(SyntaxKind.DotToken), Nothing, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token1">
        ''' The initial dot "." part of the separator.
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="token3">
        ''' The third "." in a "..." separator.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlDescendantAccessExpression(base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Select Case token1.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("token1")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New XmlMemberAccessExpressionSyntax(SyntaxKind.XmlDescendantAccessExpression, Nothing, Nothing, base, DirectCast(token1.Node, InternalSyntax.PunctuationSyntax), DirectCast(token2.Node, InternalSyntax.PunctuationSyntax), DirectCast(token3.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlDescendantAccessExpression(base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlDescendantAccessExpression(base, Syntax.Token(SyntaxKind.DotToken), token2, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlDescendantAccessExpression(name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlDescendantAccessExpression(Nothing, Syntax.Token(SyntaxKind.DotToken), Nothing, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token1">
        ''' The initial dot "." part of the separator.
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="token3">
        ''' The third "." in a "..." separator.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlAttributeAccessExpression(base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Select Case token1.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("token1")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New XmlMemberAccessExpressionSyntax(SyntaxKind.XmlAttributeAccessExpression, Nothing, Nothing, base, DirectCast(token1.Node, InternalSyntax.PunctuationSyntax), DirectCast(token2.Node, InternalSyntax.PunctuationSyntax), DirectCast(token3.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlAttributeAccessExpression(base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlAttributeAccessExpression(base, Syntax.Token(SyntaxKind.DotToken), token2, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlAttributeAccessExpression(name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlAttributeAccessExpression(Nothing, Syntax.Token(SyntaxKind.DotToken), Nothing, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
        ''' XmlDescendantAccessExpression, XmlAttributeAccessExpression.
        ''' </param>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token1">
        ''' The initial dot "." part of the separator.
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="token3">
        ''' The third "." in a "..." separator.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlMemberAccessExpression(ByVal kind As SyntaxKind, base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            If Not kind.IsXmlMemberAccessExpression Then
                Throw New ArgumentException("kind")
            End If
            Select Case token1.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("token1")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New XmlMemberAccessExpressionSyntax(kind, Nothing, Nothing, base, DirectCast(token1.Node, InternalSyntax.PunctuationSyntax), DirectCast(token2.Node, InternalSyntax.PunctuationSyntax), DirectCast(token3.Node, InternalSyntax.PunctuationSyntax), name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
        ''' XmlDescendantAccessExpression, XmlAttributeAccessExpression.
        ''' </param>
        ''' <param name="base">
        ''' The expression on the left-hand-side of the ".", ".@" or "..." .
        ''' </param>
        ''' <param name="token2">
        ''' The "@" part of .@ or the second "." of "...".
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlMemberAccessExpression(ByVal kind As SyntaxKind, base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlMemberAccessExpression(kind, base, Syntax.Token(SyntaxKind.DotToken), token2, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an XML member element access (node.&lt;Element&gt;), attribute
        ''' access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
        ''' Kind property determines which kind of access.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
        ''' XmlDescendantAccessExpression, XmlAttributeAccessExpression.
        ''' </param>
        ''' <param name="name">
        ''' The identifier after the ".", ".@" or "..."
        ''' </param>
        Public Shared Function XmlMemberAccessExpression(ByVal kind As SyntaxKind, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax
            Return Syntax.XmlMemberAccessExpression(kind, Nothing, Syntax.Token(SyntaxKind.DotToken), Nothing, Nothing, name)
        End Function


        ''' <summary>
        ''' Represents an invocation expression consisting of an invocation target and an
        ''' optional argument list or an array, parameterized property or object default
        ''' property index.
        ''' </summary>
        ''' <param name="expression">
        ''' The target of the call or index expression.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list.
        ''' </param>
        Public Shared Function InvocationExpression(expression As ExpressionSyntax, argumentList As ArgumentListSyntax) As InvocationExpressionSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New InvocationExpressionSyntax(SyntaxKind.InvocationExpression, Nothing, Nothing, expression, argumentList)
        End Function


        ''' <summary>
        ''' Represents an invocation expression consisting of an invocation target and an
        ''' optional argument list or an array, parameterized property or object default
        ''' property index.
        ''' </summary>
        ''' <param name="expression">
        ''' The target of the call or index expression.
        ''' </param>
        Public Shared Function InvocationExpression(expression As ExpressionSyntax) As InvocationExpressionSyntax
            Return Syntax.InvocationExpression(expression, Nothing)
        End Function


        ''' <summary>
        ''' Represents a New expression that creates a new non-array object, possibly with
        ''' a "With" or "From" clause.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The "New" keyword.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The type of the object being initialized.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list, if present. If no argument list was supplied, Nothing is
        ''' returned.
        ''' </param>
        ''' <param name="initializer">
        ''' An optional From or With clause to initialize the new object.
        ''' </param>
        Public Shared Function ObjectCreationExpression(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax
            Select Case newKeyword.Kind
                Case SyntaxKind.NewKeyword
                Case Else
                    Throw new ArgumentException("newKeyword")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.NullableType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Return New ObjectCreationExpressionSyntax(SyntaxKind.ObjectCreationExpression, Nothing, Nothing, DirectCast(newKeyword.Node, InternalSyntax.KeywordSyntax), attributes.Node, type, argumentList, initializer)
        End Function


        ''' <summary>
        ''' Represents a New expression that creates a new non-array object, possibly with
        ''' a "With" or "From" clause.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The type of the object being initialized.
        ''' </param>
        ''' <param name="argumentList">
        ''' The argument list, if present. If no argument list was supplied, Nothing is
        ''' returned.
        ''' </param>
        ''' <param name="initializer">
        ''' An optional From or With clause to initialize the new object.
        ''' </param>
        Public Shared Function ObjectCreationExpression(attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax
            Return Syntax.ObjectCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), attributes, type, argumentList, initializer)
        End Function


        ''' <summary>
        ''' Represents a New expression that creates a new non-array object, possibly with
        ''' a "With" or "From" clause.
        ''' </summary>
        ''' <param name="type">
        ''' The type of the object being initialized.
        ''' </param>
        Public Shared Function ObjectCreationExpression(type As TypeSyntax) As ObjectCreationExpressionSyntax
            Return Syntax.ObjectCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), Nothing, type, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a New expression that create an object of anonymous type.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The "New" keyword.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' The With clause to initialize the new object.
        ''' </param>
        Public Shared Function AnonymousObjectCreationExpression(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax
            Select Case newKeyword.Kind
                Case SyntaxKind.NewKeyword
                Case Else
                    Throw new ArgumentException("newKeyword")
             End Select
            if initializer Is Nothing Then
                Throw New ArgumentNullException("initializer")
            End If
            Select Case initializer.Kind
                Case SyntaxKind.ObjectMemberInitializer
                Case Else
                    Throw new ArgumentException("initializer")
             End Select
            Return New AnonymousObjectCreationExpressionSyntax(SyntaxKind.AnonymousObjectCreationExpression, Nothing, Nothing, DirectCast(newKeyword.Node, InternalSyntax.KeywordSyntax), attributes.Node, initializer)
        End Function


        ''' <summary>
        ''' Represents a New expression that create an object of anonymous type.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' The With clause to initialize the new object.
        ''' </param>
        Public Shared Function AnonymousObjectCreationExpression(attributes As SyntaxList(of AttributeBlockSyntax), initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax
            Return Syntax.AnonymousObjectCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), attributes, initializer)
        End Function


        ''' <summary>
        ''' Represents a New expression that create an object of anonymous type.
        ''' </summary>
        ''' <param name="initializer">
        ''' The With clause to initialize the new object.
        ''' </param>
        Public Shared Function AnonymousObjectCreationExpression(initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax
            Return Syntax.AnonymousObjectCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), Nothing, initializer)
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array.
        ''' </summary>
        ''' <param name="newKeyword">
        ''' The "New" keyword.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The element type of the array being created.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </param>
        ''' <param name="rankSpecifiers">
        ''' A list of array modifiers such as "()" or "(,)". If no array modifiers were
        ''' present, an empty list is returned.
        ''' </param>
        ''' <param name="initializer">
        ''' The initializer including the braces.
        ''' </param>
        Public Shared Function ArrayCreationExpression(newKeyword As SyntaxToken, attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, arrayBounds As ArgumentListSyntax, rankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax), initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax
            Select Case newKeyword.Kind
                Case SyntaxKind.NewKeyword
                Case Else
                    Throw new ArgumentException("newKeyword")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.NullableType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            if initializer Is Nothing Then
                Throw New ArgumentNullException("initializer")
            End If
            Select Case initializer.Kind
                Case SyntaxKind.CollectionInitializer
                Case Else
                    Throw new ArgumentException("initializer")
             End Select
            Return New ArrayCreationExpressionSyntax(SyntaxKind.ArrayCreationExpression, Nothing, Nothing, DirectCast(newKeyword.Node, InternalSyntax.KeywordSyntax), attributes.Node, type, arrayBounds, rankSpecifiers.Node, initializer)
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array.
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on the type. If no attributes were specified, an
        ''' empty list is returned.
        ''' </param>
        ''' <param name="type">
        ''' The element type of the array being created.
        ''' </param>
        ''' <param name="arrayBounds">
        ''' The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
        ''' </param>
        ''' <param name="initializer">
        ''' The initializer including the braces.
        ''' </param>
        Public Shared Function ArrayCreationExpression(attributes As SyntaxList(of AttributeBlockSyntax), type As TypeSyntax, arrayBounds As ArgumentListSyntax, initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax
            Return Syntax.ArrayCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), attributes, type, arrayBounds, Nothing, initializer)
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array.
        ''' </summary>
        ''' <param name="type">
        ''' The element type of the array being created.
        ''' </param>
        ''' <param name="initializer">
        ''' The initializer including the braces.
        ''' </param>
        Public Shared Function ArrayCreationExpression(type As TypeSyntax, initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax
            Return Syntax.ArrayCreationExpression(Syntax.Token(SyntaxKind.NewKeyword), Nothing, type, Nothing, Nothing, initializer)
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array wihout naming the element
        ''' type.
        ''' </summary>
        ''' <param name="openBraceToken">
        ''' The "{" token.
        ''' </param>
        ''' <param name="initializers">
        ''' The list of initializers between the braces.
        ''' </param>
        ''' <param name="closeBraceToken">
        ''' The "}" token.
        ''' </param>
        Public Shared Function CollectionInitializer(openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of ExpressionSyntax), closeBraceToken As SyntaxToken) As CollectionInitializerSyntax
            Select Case openBraceToken.Kind
                Case SyntaxKind.OpenBraceToken
                Case Else
                    Throw new ArgumentException("openBraceToken")
             End Select
            Select Case closeBraceToken.Kind
                Case SyntaxKind.CloseBraceToken
                Case Else
                    Throw new ArgumentException("closeBraceToken")
             End Select
            Return New CollectionInitializerSyntax(SyntaxKind.CollectionInitializer, Nothing, Nothing, DirectCast(openBraceToken.Node, InternalSyntax.PunctuationSyntax), initializers.Node, DirectCast(closeBraceToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array wihout naming the element
        ''' type.
        ''' </summary>
        ''' <param name="initializers">
        ''' The list of initializers between the braces.
        ''' </param>
        Public Shared Function CollectionInitializer(initializers As SeparatedSyntaxList(Of ExpressionSyntax)) As CollectionInitializerSyntax
            Return Syntax.CollectionInitializer(Syntax.Token(SyntaxKind.OpenBraceToken), initializers, Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <summary>
        ''' Represents an expression that creates a new array wihout naming the element
        ''' type.
        ''' </summary>
        Public Shared Function CollectionInitializer() As CollectionInitializerSyntax
            Return Syntax.CollectionInitializer(Syntax.Token(SyntaxKind.OpenBraceToken), Nothing, Syntax.Token(SyntaxKind.CloseBraceToken))
        End Function


        ''' <param name="keyword">
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function CTypeExpression(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As CTypeExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.CTypeKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New CTypeExpressionSyntax(SyntaxKind.CTypeExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), type, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        Public Shared Function CTypeExpression(expression As ExpressionSyntax, type As TypeSyntax) As CTypeExpressionSyntax
            Return Syntax.CTypeExpression(Syntax.Token(SyntaxKind.CTypeKeyword), Syntax.Token(SyntaxKind.OpenParenToken), expression, Syntax.Token(SyntaxKind.CommaToken), type, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <param name="keyword">
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function DirectCastExpression(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As DirectCastExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.DirectCastKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New DirectCastExpressionSyntax(SyntaxKind.DirectCastExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), type, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        Public Shared Function DirectCastExpression(expression As ExpressionSyntax, type As TypeSyntax) As DirectCastExpressionSyntax
            Return Syntax.DirectCastExpression(Syntax.Token(SyntaxKind.DirectCastKeyword), Syntax.Token(SyntaxKind.OpenParenToken), expression, Syntax.Token(SyntaxKind.CommaToken), type, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <param name="keyword">
        ''' The "CType", "DirectCast" or "TryCast" keyword.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function TryCastExpression(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As TryCastExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.TryCastKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if type Is Nothing Then
                Throw New ArgumentNullException("type")
            End If
            Select Case type.Kind
                Case SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("type")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New TryCastExpressionSyntax(SyntaxKind.TryCastExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), type, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="type">
        ''' The type the expression is being cast to.
        ''' </param>
        Public Shared Function TryCastExpression(expression As ExpressionSyntax, type As TypeSyntax) As TryCastExpressionSyntax
            Return Syntax.TryCastExpression(Syntax.Token(SyntaxKind.TryCastKeyword), Syntax.Token(SyntaxKind.OpenParenToken), expression, Syntax.Token(SyntaxKind.CommaToken), type, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a cast to a pre-defined type using a pre-defined cast expression,
        ''' such as CInt or CLng.
        ''' </summary>
        ''' <param name="keyword">
        ''' The keyword that was used in the cast operation.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function PredefinedCastExpression(keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As PredefinedCastExpressionSyntax
            Select Case keyword.Kind
                Case SyntaxKind.CObjKeyword:
                Case SyntaxKind.CBoolKeyword:
                Case SyntaxKind.CDateKeyword:
                Case SyntaxKind.CCharKeyword:
                Case SyntaxKind.CStrKeyword:
                Case SyntaxKind.CDecKeyword:
                Case SyntaxKind.CByteKeyword:
                Case SyntaxKind.CSByteKeyword:
                Case SyntaxKind.CUShortKeyword:
                Case SyntaxKind.CShortKeyword:
                Case SyntaxKind.CUIntKeyword:
                Case SyntaxKind.CIntKeyword:
                Case SyntaxKind.CULngKeyword:
                Case SyntaxKind.CLngKeyword:
                Case SyntaxKind.CSngKeyword:
                Case SyntaxKind.CDblKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New PredefinedCastExpressionSyntax(SyntaxKind.PredefinedCastExpression, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a cast to a pre-defined type using a pre-defined cast expression,
        ''' such as CInt or CLng.
        ''' </summary>
        ''' <param name="keyword">
        ''' The keyword that was used in the cast operation.
        ''' </param>
        ''' <param name="expression">
        ''' The expression being cast.
        ''' </param>
        Public Shared Function PredefinedCastExpression(keyword As SyntaxToken, expression As ExpressionSyntax) As PredefinedCastExpressionSyntax
            Return Syntax.PredefinedCastExpression(keyword, Syntax.Token(SyntaxKind.OpenParenToken), expression, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AddExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.PlusToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.AddExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AddExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.AddExpression(left, Syntax.Token(SyntaxKind.PlusToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function SubtractExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.MinusToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.SubtractExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function SubtractExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.SubtractExpression(left, Syntax.Token(SyntaxKind.MinusToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function MultiplyExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.AsteriskToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.MultiplyExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function MultiplyExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.MultiplyExpression(left, Syntax.Token(SyntaxKind.AsteriskToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function DivideExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.SlashToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.DivideExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function DivideExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.DivideExpression(left, Syntax.Token(SyntaxKind.SlashToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IntegerDivideExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.BackslashToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.IntegerDivideExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IntegerDivideExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.IntegerDivideExpression(left, Syntax.Token(SyntaxKind.BackslashToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function PowerExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.CaretToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.PowerExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function PowerExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.PowerExpression(left, Syntax.Token(SyntaxKind.CaretToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LeftShiftExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanLessThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.LeftShiftExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LeftShiftExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.LeftShiftExpression(left, Syntax.Token(SyntaxKind.LessThanLessThanToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function RightShiftExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.GreaterThanGreaterThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.RightShiftExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function RightShiftExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.RightShiftExpression(left, Syntax.Token(SyntaxKind.GreaterThanGreaterThanToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function ConcatenateExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.AmpersandToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.ConcatenateExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function ConcatenateExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.ConcatenateExpression(left, Syntax.Token(SyntaxKind.AmpersandToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function ModuloExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.ModKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.ModuloExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function ModuloExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.ModuloExpression(left, Syntax.Token(SyntaxKind.ModKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function EqualsExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.EqualsExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function EqualsExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.EqualsExpression(left, Syntax.Token(SyntaxKind.EqualsToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function NotEqualsExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanGreaterThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.NotEqualsExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function NotEqualsExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.NotEqualsExpression(left, Syntax.Token(SyntaxKind.LessThanGreaterThanToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LessThanExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.LessThanExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LessThanExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.LessThanExpression(left, Syntax.Token(SyntaxKind.LessThanToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LessThanOrEqualExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.LessThanEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.LessThanOrEqualExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LessThanOrEqualExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.LessThanOrEqualExpression(left, Syntax.Token(SyntaxKind.LessThanEqualsToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function GreaterThanOrEqualExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.GreaterThanEqualsToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.GreaterThanOrEqualExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function GreaterThanOrEqualExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.GreaterThanOrEqualExpression(left, Syntax.Token(SyntaxKind.GreaterThanEqualsToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function GreaterThanExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.GreaterThanExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function GreaterThanExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.GreaterThanExpression(left, Syntax.Token(SyntaxKind.GreaterThanToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IsExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.IsKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.IsExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IsExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.IsExpression(left, Syntax.Token(SyntaxKind.IsKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IsNotExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.IsNotKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.IsNotExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function IsNotExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.IsNotExpression(left, Syntax.Token(SyntaxKind.IsNotKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LikeExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.LikeKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.LikeExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function LikeExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.LikeExpression(left, Syntax.Token(SyntaxKind.LikeKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function OrExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.OrKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.OrExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function OrExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.OrExpression(left, Syntax.Token(SyntaxKind.OrKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function XorExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.XorKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.XorExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function XorExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.XorExpression(left, Syntax.Token(SyntaxKind.XorKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AndExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.AndKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.AndExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AndExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.AndExpression(left, Syntax.Token(SyntaxKind.AndKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function OrElseExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.OrElseKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.OrElseExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function OrElseExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.OrElseExpression(left, Syntax.Token(SyntaxKind.OrElseKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AndAlsoExpression(left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case operatorToken.Kind
                Case SyntaxKind.AndAlsoKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(SyntaxKind.AndAlsoExpression, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function AndAlsoExpression(left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax
            Return Syntax.AndAlsoExpression(left, Syntax.Token(SyntaxKind.AndAlsoKeyword), right)
        End Function


        ''' <summary>
        ''' Represents a binary operator. The Kind property classifies the operators into
        ''' similar kind of operators (arithmetic, relational, logical or string); the
        ''' exact operation being performed is determined by the Operator property.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' BinaryExpressionSyntax. One of AddExpression, SubtractExpression,
        ''' MultiplyExpression, DivideExpression, IntegerDivideExpression, PowerExpression,
        ''' LeftShiftExpression, RightShiftExpression, ConcatenateExpression,
        ''' ModuloExpression, EqualsExpression, NotEqualsExpression, LessThanExpression,
        ''' LessThanOrEqualExpression, GreaterThanOrEqualExpression, GreaterThanExpression,
        ''' IsExpression, IsNotExpression, LikeExpression, OrExpression, XorExpression,
        ''' AndExpression, OrElseExpression, AndAlsoExpression.
        ''' </param>
        ''' <param name="left">
        ''' The left operand.
        ''' </param>
        ''' <param name="right">
        ''' The right operand.
        ''' </param>
        Public Shared Function BinaryExpression(ByVal kind As SyntaxKind, left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax
            If Not kind.IsBinaryExpression Then
                Throw New ArgumentException("kind")
            End If
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            If operatorToken.Kind <> GetBinaryExpressionOperatorTokenKind(kind) Then
                Throw new ArgumentException("operatorToken")
            End If
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New BinaryExpressionSyntax(kind, Nothing, Nothing, left, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), right)
        End Function

        Private Shared Function GetBinaryExpressionOperatorTokenKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.AddExpression
                    Return SyntaxKind.PlusToken
                Case SyntaxKind.SubtractExpression
                    Return SyntaxKind.MinusToken
                Case SyntaxKind.MultiplyExpression
                    Return SyntaxKind.AsteriskToken
                Case SyntaxKind.DivideExpression
                    Return SyntaxKind.SlashToken
                Case SyntaxKind.IntegerDivideExpression
                    Return SyntaxKind.BackslashToken
                Case SyntaxKind.PowerExpression
                    Return SyntaxKind.CaretToken
                Case SyntaxKind.LeftShiftExpression
                    Return SyntaxKind.LessThanLessThanToken
                Case SyntaxKind.RightShiftExpression
                    Return SyntaxKind.GreaterThanGreaterThanToken
                Case SyntaxKind.ConcatenateExpression
                    Return SyntaxKind.AmpersandToken
                Case SyntaxKind.ModuloExpression
                    Return SyntaxKind.ModKeyword
                Case SyntaxKind.EqualsExpression
                    Return SyntaxKind.EqualsToken
                Case SyntaxKind.NotEqualsExpression
                    Return SyntaxKind.LessThanGreaterThanToken
                Case SyntaxKind.LessThanExpression
                    Return SyntaxKind.LessThanToken
                Case SyntaxKind.LessThanOrEqualExpression
                    Return SyntaxKind.LessThanEqualsToken
                Case SyntaxKind.GreaterThanOrEqualExpression
                    Return SyntaxKind.GreaterThanEqualsToken
                Case SyntaxKind.GreaterThanExpression
                    Return SyntaxKind.GreaterThanToken
                Case SyntaxKind.IsExpression
                    Return SyntaxKind.IsKeyword
                Case SyntaxKind.IsNotExpression
                    Return SyntaxKind.IsNotKeyword
                Case SyntaxKind.LikeExpression
                    Return SyntaxKind.LikeKeyword
                Case SyntaxKind.OrExpression
                    Return SyntaxKind.OrKeyword
                Case SyntaxKind.XorExpression
                    Return SyntaxKind.XorKeyword
                Case SyntaxKind.AndExpression
                    Return SyntaxKind.AndKeyword
                Case SyntaxKind.OrElseExpression
                    Return SyntaxKind.OrElseKeyword
                Case SyntaxKind.AndAlsoExpression
                    Return SyntaxKind.AndAlsoKeyword
                Case Else
                    Throw New ArgumentException("OperatorToken")
            End Select
        End Function

        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The token that is the operator.
        ''' </param>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function PlusExpression(operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.PlusToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if operand Is Nothing Then
                Throw New ArgumentNullException("operand")
            End If
            Select Case operand.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("operand")
             End Select
            Return New UnaryExpressionSyntax(SyntaxKind.PlusExpression, Nothing, Nothing, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function PlusExpression(operand As ExpressionSyntax) As UnaryExpressionSyntax
            Return Syntax.PlusExpression(Syntax.Token(SyntaxKind.PlusToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The token that is the operator.
        ''' </param>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function NegateExpression(operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.MinusToken
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if operand Is Nothing Then
                Throw New ArgumentNullException("operand")
            End If
            Select Case operand.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("operand")
             End Select
            Return New UnaryExpressionSyntax(SyntaxKind.NegateExpression, Nothing, Nothing, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function NegateExpression(operand As ExpressionSyntax) As UnaryExpressionSyntax
            Return Syntax.NegateExpression(Syntax.Token(SyntaxKind.MinusToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The token that is the operator.
        ''' </param>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function NotExpression(operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.NotKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if operand Is Nothing Then
                Throw New ArgumentNullException("operand")
            End If
            Select Case operand.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("operand")
             End Select
            Return New UnaryExpressionSyntax(SyntaxKind.NotExpression, Nothing, Nothing, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function NotExpression(operand As ExpressionSyntax) As UnaryExpressionSyntax
            Return Syntax.NotExpression(Syntax.Token(SyntaxKind.NotKeyword), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operatorToken">
        ''' The token that is the operator.
        ''' </param>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function AddressOfExpression(operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            Select Case operatorToken.Kind
                Case SyntaxKind.AddressOfKeyword
                Case Else
                    Throw new ArgumentException("operatorToken")
             End Select
            if operand Is Nothing Then
                Throw New ArgumentNullException("operand")
            End If
            Select Case operand.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("operand")
             End Select
            Return New UnaryExpressionSyntax(SyntaxKind.AddressOfExpression, Nothing, Nothing, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function AddressOfExpression(operand As ExpressionSyntax) As UnaryExpressionSyntax
            Return Syntax.AddressOfExpression(Syntax.Token(SyntaxKind.AddressOfKeyword), operand)
        End Function


        ''' <summary>
        ''' Describes a unary operator: Plus, Negate, Not or AddressOf.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' UnaryExpressionSyntax. One of PlusExpression, NegateExpression, NotExpression,
        ''' AddressOfExpression.
        ''' </param>
        ''' <param name="operatorToken">
        ''' The token that is the operator.
        ''' </param>
        ''' <param name="operand">
        ''' The expression being operated on.
        ''' </param>
        Public Shared Function UnaryExpression(ByVal kind As SyntaxKind, operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax
            If Not kind.IsUnaryExpression Then
                Throw New ArgumentException("kind")
            End If
            If operatorToken.Kind <> GetUnaryExpressionOperatorTokenKind(kind) Then
                Throw new ArgumentException("operatorToken")
            End If
            if operand Is Nothing Then
                Throw New ArgumentNullException("operand")
            End If
            Select Case operand.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("operand")
             End Select
            Return New UnaryExpressionSyntax(kind, Nothing, Nothing, DirectCast(operatorToken.Node, InternalSyntax.SyntaxToken), operand)
        End Function

        Private Shared Function GetUnaryExpressionOperatorTokenKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.PlusExpression
                    Return SyntaxKind.PlusToken
                Case SyntaxKind.NegateExpression
                    Return SyntaxKind.MinusToken
                Case SyntaxKind.NotExpression
                    Return SyntaxKind.NotKeyword
                Case SyntaxKind.AddressOfExpression
                    Return SyntaxKind.AddressOfKeyword
                Case Else
                    Throw New ArgumentException("OperatorToken")
            End Select
        End Function

        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        ''' <param name="ifKeyword">
        ''' The "If" keyword
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token
        ''' </param>
        ''' <param name="firstExpression">
        ''' The first expression inside the parentheses.
        ''' </param>
        ''' <param name="commaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="secondExpression">
        ''' The second expression inside the parentheses.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token
        ''' </param>
        Public Shared Function BinaryConditionalExpression(ifKeyword As SyntaxToken, openParenToken As SyntaxToken, firstExpression As ExpressionSyntax, commaToken As SyntaxToken, secondExpression As ExpressionSyntax, closeParenToken As SyntaxToken) As BinaryConditionalExpressionSyntax
            Select Case ifKeyword.Kind
                Case SyntaxKind.IfKeyword
                Case Else
                    Throw new ArgumentException("ifKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if firstExpression Is Nothing Then
                Throw New ArgumentNullException("firstExpression")
            End If
            Select Case firstExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("firstExpression")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            if secondExpression Is Nothing Then
                Throw New ArgumentNullException("secondExpression")
            End If
            Select Case secondExpression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("secondExpression")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New BinaryConditionalExpressionSyntax(SyntaxKind.BinaryConditionalExpression, Nothing, Nothing, DirectCast(ifKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), firstExpression, DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), secondExpression, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        ''' <param name="firstExpression">
        ''' The first expression inside the parentheses.
        ''' </param>
        ''' <param name="secondExpression">
        ''' The second expression inside the parentheses.
        ''' </param>
        Public Shared Function BinaryConditionalExpression(firstExpression As ExpressionSyntax, secondExpression As ExpressionSyntax) As BinaryConditionalExpressionSyntax
            Return Syntax.BinaryConditionalExpression(Syntax.Token(SyntaxKind.IfKeyword), Syntax.Token(SyntaxKind.OpenParenToken), firstExpression, Syntax.Token(SyntaxKind.CommaToken), secondExpression, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        ''' <param name="ifKeyword">
        ''' The "If" keyword
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token
        ''' </param>
        ''' <param name="condition">
        ''' The first expression inside the parentheses.
        ''' </param>
        ''' <param name="firstCommaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="whenTrue">
        ''' The second expression inside the parentheses.
        ''' </param>
        ''' <param name="secondCommaToken">
        ''' The "," token.
        ''' </param>
        ''' <param name="whenFalse">
        ''' The second expression inside the parentheses.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token
        ''' </param>
        Public Shared Function TernaryConditionalExpression(ifKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, firstCommaToken As SyntaxToken, whenTrue As ExpressionSyntax, secondCommaToken As SyntaxToken, whenFalse As ExpressionSyntax, closeParenToken As SyntaxToken) As TernaryConditionalExpressionSyntax
            Select Case ifKeyword.Kind
                Case SyntaxKind.IfKeyword
                Case Else
                    Throw new ArgumentException("ifKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Select Case firstCommaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("firstCommaToken")
             End Select
            if whenTrue Is Nothing Then
                Throw New ArgumentNullException("whenTrue")
            End If
            Select Case whenTrue.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("whenTrue")
             End Select
            Select Case secondCommaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("secondCommaToken")
             End Select
            if whenFalse Is Nothing Then
                Throw New ArgumentNullException("whenFalse")
            End If
            Select Case whenFalse.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("whenFalse")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New TernaryConditionalExpressionSyntax(SyntaxKind.TernaryConditionalExpression, Nothing, Nothing, DirectCast(ifKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), condition, DirectCast(firstCommaToken.Node, InternalSyntax.PunctuationSyntax), whenTrue, DirectCast(secondCommaToken.Node, InternalSyntax.PunctuationSyntax), whenFalse, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a conditional expression, If(condition, true-expr, false-expr) or
        ''' If(expr, nothing-expr).
        ''' </summary>
        ''' <param name="condition">
        ''' The first expression inside the parentheses.
        ''' </param>
        ''' <param name="whenTrue">
        ''' The second expression inside the parentheses.
        ''' </param>
        ''' <param name="whenFalse">
        ''' The second expression inside the parentheses.
        ''' </param>
        Public Shared Function TernaryConditionalExpression(condition As ExpressionSyntax, whenTrue As ExpressionSyntax, whenFalse As ExpressionSyntax) As TernaryConditionalExpressionSyntax
            Return Syntax.TernaryConditionalExpression(Syntax.Token(SyntaxKind.IfKeyword), Syntax.Token(SyntaxKind.OpenParenToken), condition, Syntax.Token(SyntaxKind.CommaToken), whenTrue, Syntax.Token(SyntaxKind.CommaToken), whenFalse, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineFunctionLambdaExpression(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if body Is Nothing Then
                Throw New ArgumentNullException("body")
            End If
            Select Case body.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName,
                     SyntaxKind.EmptyStatement,
                     SyntaxKind.EndIfStatement,
                     SyntaxKind.EndUsingStatement,
                     SyntaxKind.EndWithStatement,
                     SyntaxKind.EndSelectStatement,
                     SyntaxKind.EndStructureStatement,
                     SyntaxKind.EndEnumStatement,
                     SyntaxKind.EndInterfaceStatement,
                     SyntaxKind.EndClassStatement,
                     SyntaxKind.EndModuleStatement,
                     SyntaxKind.EndNamespaceStatement,
                     SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndPropertyStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndEventStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement,
                     SyntaxKind.EndWhileStatement,
                     SyntaxKind.EndTryStatement,
                     SyntaxKind.EndSyncLockStatement,
                     SyntaxKind.OptionStatement,
                     SyntaxKind.ImportsStatement,
                     SyntaxKind.NamespaceBlock,
                     SyntaxKind.NamespaceStatement,
                     SyntaxKind.ModuleBlock,
                     SyntaxKind.StructureBlock,
                     SyntaxKind.InterfaceBlock,
                     SyntaxKind.ClassBlock,
                     SyntaxKind.EnumBlock,
                     SyntaxKind.InheritsStatement,
                     SyntaxKind.ImplementsStatement,
                     SyntaxKind.ModuleStatement,
                     SyntaxKind.StructureStatement,
                     SyntaxKind.InterfaceStatement,
                     SyntaxKind.ClassStatement,
                     SyntaxKind.EnumStatement,
                     SyntaxKind.EnumMemberDeclaration,
                     SyntaxKind.SubBlock,
                     SyntaxKind.FunctionBlock,
                     SyntaxKind.ConstructorBlock,
                     SyntaxKind.OperatorBlock,
                     SyntaxKind.PropertyGetBlock,
                     SyntaxKind.PropertySetBlock,
                     SyntaxKind.AddHandlerBlock,
                     SyntaxKind.RemoveHandlerBlock,
                     SyntaxKind.RaiseEventBlock,
                     SyntaxKind.PropertyBlock,
                     SyntaxKind.EventBlock,
                     SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.DeclareSubStatement,
                     SyntaxKind.DeclareFunctionStatement,
                     SyntaxKind.DelegateSubStatement,
                     SyntaxKind.DelegateFunctionStatement,
                     SyntaxKind.EventStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.PropertyStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement,
                     SyntaxKind.IncompleteMember,
                     SyntaxKind.FieldDeclaration,
                     SyntaxKind.AttributesStatement,
                     SyntaxKind.ExpressionStatement,
                     SyntaxKind.WhileBlock,
                     SyntaxKind.UsingBlock,
                     SyntaxKind.SyncLockBlock,
                     SyntaxKind.WithBlock,
                     SyntaxKind.LocalDeclaration,
                     SyntaxKind.LabelStatement,
                     SyntaxKind.GoToStatement,
                     SyntaxKind.StopStatement,
                     SyntaxKind.EndStatement,
                     SyntaxKind.ExitDoStatement,
                     SyntaxKind.ExitForStatement,
                     SyntaxKind.ExitSubStatement,
                     SyntaxKind.ExitFunctionStatement,
                     SyntaxKind.ExitOperatorStatement,
                     SyntaxKind.ExitPropertyStatement,
                     SyntaxKind.ExitTryStatement,
                     SyntaxKind.ExitSelectStatement,
                     SyntaxKind.ExitWhileStatement,
                     SyntaxKind.ContinueWhileStatement,
                     SyntaxKind.ContinueDoStatement,
                     SyntaxKind.ContinueForStatement,
                     SyntaxKind.ReturnStatement,
                     SyntaxKind.SingleLineIfStatement,
                     SyntaxKind.MultiLineIfBlock,
                     SyntaxKind.IfStatement,
                     SyntaxKind.ElseIfStatement,
                     SyntaxKind.ElseStatement,
                     SyntaxKind.TryBlock,
                     SyntaxKind.TryStatement,
                     SyntaxKind.CatchStatement,
                     SyntaxKind.FinallyStatement,
                     SyntaxKind.ErrorStatement,
                     SyntaxKind.OnErrorGoToZeroStatement,
                     SyntaxKind.OnErrorGoToMinusOneStatement,
                     SyntaxKind.OnErrorGoToLabelStatement,
                     SyntaxKind.OnErrorResumeNextStatement,
                     SyntaxKind.ResumeStatement,
                     SyntaxKind.ResumeLabelStatement,
                     SyntaxKind.ResumeNextStatement,
                     SyntaxKind.SelectBlock,
                     SyntaxKind.SelectStatement,
                     SyntaxKind.CaseStatement,
                     SyntaxKind.CaseElseStatement,
                     SyntaxKind.SyncLockStatement,
                     SyntaxKind.DoLoopTopTestBlock,
                     SyntaxKind.DoLoopBottomTestBlock,
                     SyntaxKind.DoLoopForeverBlock,
                     SyntaxKind.DoStatement,
                     SyntaxKind.LoopStatement,
                     SyntaxKind.WhileStatement,
                     SyntaxKind.ForBlock,
                     SyntaxKind.ForEachBlock,
                     SyntaxKind.ForStatement,
                     SyntaxKind.ForEachStatement,
                     SyntaxKind.NextStatement,
                     SyntaxKind.UsingStatement,
                     SyntaxKind.ThrowStatement,
                     SyntaxKind.AssignmentStatement,
                     SyntaxKind.MidAssignment,
                     SyntaxKind.AddAssignment,
                     SyntaxKind.SubtractAssignment,
                     SyntaxKind.MultiplyAssignment,
                     SyntaxKind.DivideAssignment,
                     SyntaxKind.IntegerDivideAssignment,
                     SyntaxKind.PowerAssignment,
                     SyntaxKind.LeftShiftAssignment,
                     SyntaxKind.RightShiftAssignment,
                     SyntaxKind.ConcatenateAssignment,
                     SyntaxKind.CallStatement,
                     SyntaxKind.AddHandlerStatement,
                     SyntaxKind.RemoveHandlerStatement,
                     SyntaxKind.RaiseEventStatement,
                     SyntaxKind.WithStatement,
                     SyntaxKind.ReDimStatement,
                     SyntaxKind.ReDimPreserveStatement,
                     SyntaxKind.EraseStatement,
                     SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader,
                     SyntaxKind.ConstDirective,
                     SyntaxKind.IfDirective,
                     SyntaxKind.ElseIfDirective,
                     SyntaxKind.ElseDirective,
                     SyntaxKind.EndIfDirective,
                     SyntaxKind.RegionDirective,
                     SyntaxKind.EndRegionDirective,
                     SyntaxKind.ExternalSourceDirective,
                     SyntaxKind.EndExternalSourceDirective,
                     SyntaxKind.ExternalChecksumDirective,
                     SyntaxKind.ReferenceDirective,
                     SyntaxKind.BadDirective
                Case Else
                    Throw new ArgumentException("body")
             End Select
            Return New SingleLineLambdaExpressionSyntax(SyntaxKind.SingleLineFunctionLambdaExpression, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), body)
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineFunctionLambdaExpression(begin As LambdaHeaderSyntax, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            Return Syntax.SingleLineFunctionLambdaExpression(begin, Nothing, body)
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineSubLambdaExpression(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if body Is Nothing Then
                Throw New ArgumentNullException("body")
            End If
            Select Case body.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName,
                     SyntaxKind.EmptyStatement,
                     SyntaxKind.EndIfStatement,
                     SyntaxKind.EndUsingStatement,
                     SyntaxKind.EndWithStatement,
                     SyntaxKind.EndSelectStatement,
                     SyntaxKind.EndStructureStatement,
                     SyntaxKind.EndEnumStatement,
                     SyntaxKind.EndInterfaceStatement,
                     SyntaxKind.EndClassStatement,
                     SyntaxKind.EndModuleStatement,
                     SyntaxKind.EndNamespaceStatement,
                     SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndPropertyStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndEventStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement,
                     SyntaxKind.EndWhileStatement,
                     SyntaxKind.EndTryStatement,
                     SyntaxKind.EndSyncLockStatement,
                     SyntaxKind.OptionStatement,
                     SyntaxKind.ImportsStatement,
                     SyntaxKind.NamespaceBlock,
                     SyntaxKind.NamespaceStatement,
                     SyntaxKind.ModuleBlock,
                     SyntaxKind.StructureBlock,
                     SyntaxKind.InterfaceBlock,
                     SyntaxKind.ClassBlock,
                     SyntaxKind.EnumBlock,
                     SyntaxKind.InheritsStatement,
                     SyntaxKind.ImplementsStatement,
                     SyntaxKind.ModuleStatement,
                     SyntaxKind.StructureStatement,
                     SyntaxKind.InterfaceStatement,
                     SyntaxKind.ClassStatement,
                     SyntaxKind.EnumStatement,
                     SyntaxKind.EnumMemberDeclaration,
                     SyntaxKind.SubBlock,
                     SyntaxKind.FunctionBlock,
                     SyntaxKind.ConstructorBlock,
                     SyntaxKind.OperatorBlock,
                     SyntaxKind.PropertyGetBlock,
                     SyntaxKind.PropertySetBlock,
                     SyntaxKind.AddHandlerBlock,
                     SyntaxKind.RemoveHandlerBlock,
                     SyntaxKind.RaiseEventBlock,
                     SyntaxKind.PropertyBlock,
                     SyntaxKind.EventBlock,
                     SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.DeclareSubStatement,
                     SyntaxKind.DeclareFunctionStatement,
                     SyntaxKind.DelegateSubStatement,
                     SyntaxKind.DelegateFunctionStatement,
                     SyntaxKind.EventStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.PropertyStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement,
                     SyntaxKind.IncompleteMember,
                     SyntaxKind.FieldDeclaration,
                     SyntaxKind.AttributesStatement,
                     SyntaxKind.ExpressionStatement,
                     SyntaxKind.WhileBlock,
                     SyntaxKind.UsingBlock,
                     SyntaxKind.SyncLockBlock,
                     SyntaxKind.WithBlock,
                     SyntaxKind.LocalDeclaration,
                     SyntaxKind.LabelStatement,
                     SyntaxKind.GoToStatement,
                     SyntaxKind.StopStatement,
                     SyntaxKind.EndStatement,
                     SyntaxKind.ExitDoStatement,
                     SyntaxKind.ExitForStatement,
                     SyntaxKind.ExitSubStatement,
                     SyntaxKind.ExitFunctionStatement,
                     SyntaxKind.ExitOperatorStatement,
                     SyntaxKind.ExitPropertyStatement,
                     SyntaxKind.ExitTryStatement,
                     SyntaxKind.ExitSelectStatement,
                     SyntaxKind.ExitWhileStatement,
                     SyntaxKind.ContinueWhileStatement,
                     SyntaxKind.ContinueDoStatement,
                     SyntaxKind.ContinueForStatement,
                     SyntaxKind.ReturnStatement,
                     SyntaxKind.SingleLineIfStatement,
                     SyntaxKind.MultiLineIfBlock,
                     SyntaxKind.IfStatement,
                     SyntaxKind.ElseIfStatement,
                     SyntaxKind.ElseStatement,
                     SyntaxKind.TryBlock,
                     SyntaxKind.TryStatement,
                     SyntaxKind.CatchStatement,
                     SyntaxKind.FinallyStatement,
                     SyntaxKind.ErrorStatement,
                     SyntaxKind.OnErrorGoToZeroStatement,
                     SyntaxKind.OnErrorGoToMinusOneStatement,
                     SyntaxKind.OnErrorGoToLabelStatement,
                     SyntaxKind.OnErrorResumeNextStatement,
                     SyntaxKind.ResumeStatement,
                     SyntaxKind.ResumeLabelStatement,
                     SyntaxKind.ResumeNextStatement,
                     SyntaxKind.SelectBlock,
                     SyntaxKind.SelectStatement,
                     SyntaxKind.CaseStatement,
                     SyntaxKind.CaseElseStatement,
                     SyntaxKind.SyncLockStatement,
                     SyntaxKind.DoLoopTopTestBlock,
                     SyntaxKind.DoLoopBottomTestBlock,
                     SyntaxKind.DoLoopForeverBlock,
                     SyntaxKind.DoStatement,
                     SyntaxKind.LoopStatement,
                     SyntaxKind.WhileStatement,
                     SyntaxKind.ForBlock,
                     SyntaxKind.ForEachBlock,
                     SyntaxKind.ForStatement,
                     SyntaxKind.ForEachStatement,
                     SyntaxKind.NextStatement,
                     SyntaxKind.UsingStatement,
                     SyntaxKind.ThrowStatement,
                     SyntaxKind.AssignmentStatement,
                     SyntaxKind.MidAssignment,
                     SyntaxKind.AddAssignment,
                     SyntaxKind.SubtractAssignment,
                     SyntaxKind.MultiplyAssignment,
                     SyntaxKind.DivideAssignment,
                     SyntaxKind.IntegerDivideAssignment,
                     SyntaxKind.PowerAssignment,
                     SyntaxKind.LeftShiftAssignment,
                     SyntaxKind.RightShiftAssignment,
                     SyntaxKind.ConcatenateAssignment,
                     SyntaxKind.CallStatement,
                     SyntaxKind.AddHandlerStatement,
                     SyntaxKind.RemoveHandlerStatement,
                     SyntaxKind.RaiseEventStatement,
                     SyntaxKind.WithStatement,
                     SyntaxKind.ReDimStatement,
                     SyntaxKind.ReDimPreserveStatement,
                     SyntaxKind.EraseStatement,
                     SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader,
                     SyntaxKind.ConstDirective,
                     SyntaxKind.IfDirective,
                     SyntaxKind.ElseIfDirective,
                     SyntaxKind.ElseDirective,
                     SyntaxKind.EndIfDirective,
                     SyntaxKind.RegionDirective,
                     SyntaxKind.EndRegionDirective,
                     SyntaxKind.ExternalSourceDirective,
                     SyntaxKind.EndExternalSourceDirective,
                     SyntaxKind.ExternalChecksumDirective,
                     SyntaxKind.ReferenceDirective,
                     SyntaxKind.BadDirective
                Case Else
                    Throw new ArgumentException("body")
             End Select
            Return New SingleLineLambdaExpressionSyntax(SyntaxKind.SingleLineSubLambdaExpression, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), body)
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineSubLambdaExpression(begin As LambdaHeaderSyntax, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            Return Syntax.SingleLineSubLambdaExpression(begin, Nothing, body)
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' SingleLineLambdaExpressionSyntax. One of SingleLineFunctionLambdaExpression,
        ''' SingleLineSubLambdaExpression.
        ''' </param>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineLambdaExpression(ByVal kind As SyntaxKind, begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            If Not kind.IsSingleLineLambdaExpression Then
                Throw New ArgumentException("kind")
            End If
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if body Is Nothing Then
                Throw New ArgumentNullException("body")
            End If
            Select Case body.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName,
                     SyntaxKind.EmptyStatement,
                     SyntaxKind.EndIfStatement,
                     SyntaxKind.EndUsingStatement,
                     SyntaxKind.EndWithStatement,
                     SyntaxKind.EndSelectStatement,
                     SyntaxKind.EndStructureStatement,
                     SyntaxKind.EndEnumStatement,
                     SyntaxKind.EndInterfaceStatement,
                     SyntaxKind.EndClassStatement,
                     SyntaxKind.EndModuleStatement,
                     SyntaxKind.EndNamespaceStatement,
                     SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement,
                     SyntaxKind.EndGetStatement,
                     SyntaxKind.EndSetStatement,
                     SyntaxKind.EndPropertyStatement,
                     SyntaxKind.EndOperatorStatement,
                     SyntaxKind.EndEventStatement,
                     SyntaxKind.EndAddHandlerStatement,
                     SyntaxKind.EndRemoveHandlerStatement,
                     SyntaxKind.EndRaiseEventStatement,
                     SyntaxKind.EndWhileStatement,
                     SyntaxKind.EndTryStatement,
                     SyntaxKind.EndSyncLockStatement,
                     SyntaxKind.OptionStatement,
                     SyntaxKind.ImportsStatement,
                     SyntaxKind.NamespaceBlock,
                     SyntaxKind.NamespaceStatement,
                     SyntaxKind.ModuleBlock,
                     SyntaxKind.StructureBlock,
                     SyntaxKind.InterfaceBlock,
                     SyntaxKind.ClassBlock,
                     SyntaxKind.EnumBlock,
                     SyntaxKind.InheritsStatement,
                     SyntaxKind.ImplementsStatement,
                     SyntaxKind.ModuleStatement,
                     SyntaxKind.StructureStatement,
                     SyntaxKind.InterfaceStatement,
                     SyntaxKind.ClassStatement,
                     SyntaxKind.EnumStatement,
                     SyntaxKind.EnumMemberDeclaration,
                     SyntaxKind.SubBlock,
                     SyntaxKind.FunctionBlock,
                     SyntaxKind.ConstructorBlock,
                     SyntaxKind.OperatorBlock,
                     SyntaxKind.PropertyGetBlock,
                     SyntaxKind.PropertySetBlock,
                     SyntaxKind.AddHandlerBlock,
                     SyntaxKind.RemoveHandlerBlock,
                     SyntaxKind.RaiseEventBlock,
                     SyntaxKind.PropertyBlock,
                     SyntaxKind.EventBlock,
                     SyntaxKind.SubStatement,
                     SyntaxKind.FunctionStatement,
                     SyntaxKind.ConstructorStatement,
                     SyntaxKind.DeclareSubStatement,
                     SyntaxKind.DeclareFunctionStatement,
                     SyntaxKind.DelegateSubStatement,
                     SyntaxKind.DelegateFunctionStatement,
                     SyntaxKind.EventStatement,
                     SyntaxKind.OperatorStatement,
                     SyntaxKind.PropertyStatement,
                     SyntaxKind.GetAccessorStatement,
                     SyntaxKind.SetAccessorStatement,
                     SyntaxKind.AddHandlerAccessorStatement,
                     SyntaxKind.RemoveHandlerAccessorStatement,
                     SyntaxKind.RaiseEventHandlerAccessorStatement,
                     SyntaxKind.IncompleteMember,
                     SyntaxKind.FieldDeclaration,
                     SyntaxKind.AttributesStatement,
                     SyntaxKind.ExpressionStatement,
                     SyntaxKind.WhileBlock,
                     SyntaxKind.UsingBlock,
                     SyntaxKind.SyncLockBlock,
                     SyntaxKind.WithBlock,
                     SyntaxKind.LocalDeclaration,
                     SyntaxKind.LabelStatement,
                     SyntaxKind.GoToStatement,
                     SyntaxKind.StopStatement,
                     SyntaxKind.EndStatement,
                     SyntaxKind.ExitDoStatement,
                     SyntaxKind.ExitForStatement,
                     SyntaxKind.ExitSubStatement,
                     SyntaxKind.ExitFunctionStatement,
                     SyntaxKind.ExitOperatorStatement,
                     SyntaxKind.ExitPropertyStatement,
                     SyntaxKind.ExitTryStatement,
                     SyntaxKind.ExitSelectStatement,
                     SyntaxKind.ExitWhileStatement,
                     SyntaxKind.ContinueWhileStatement,
                     SyntaxKind.ContinueDoStatement,
                     SyntaxKind.ContinueForStatement,
                     SyntaxKind.ReturnStatement,
                     SyntaxKind.SingleLineIfStatement,
                     SyntaxKind.MultiLineIfBlock,
                     SyntaxKind.IfStatement,
                     SyntaxKind.ElseIfStatement,
                     SyntaxKind.ElseStatement,
                     SyntaxKind.TryBlock,
                     SyntaxKind.TryStatement,
                     SyntaxKind.CatchStatement,
                     SyntaxKind.FinallyStatement,
                     SyntaxKind.ErrorStatement,
                     SyntaxKind.OnErrorGoToZeroStatement,
                     SyntaxKind.OnErrorGoToMinusOneStatement,
                     SyntaxKind.OnErrorGoToLabelStatement,
                     SyntaxKind.OnErrorResumeNextStatement,
                     SyntaxKind.ResumeStatement,
                     SyntaxKind.ResumeLabelStatement,
                     SyntaxKind.ResumeNextStatement,
                     SyntaxKind.SelectBlock,
                     SyntaxKind.SelectStatement,
                     SyntaxKind.CaseStatement,
                     SyntaxKind.CaseElseStatement,
                     SyntaxKind.SyncLockStatement,
                     SyntaxKind.DoLoopTopTestBlock,
                     SyntaxKind.DoLoopBottomTestBlock,
                     SyntaxKind.DoLoopForeverBlock,
                     SyntaxKind.DoStatement,
                     SyntaxKind.LoopStatement,
                     SyntaxKind.WhileStatement,
                     SyntaxKind.ForBlock,
                     SyntaxKind.ForEachBlock,
                     SyntaxKind.ForStatement,
                     SyntaxKind.ForEachStatement,
                     SyntaxKind.NextStatement,
                     SyntaxKind.UsingStatement,
                     SyntaxKind.ThrowStatement,
                     SyntaxKind.AssignmentStatement,
                     SyntaxKind.MidAssignment,
                     SyntaxKind.AddAssignment,
                     SyntaxKind.SubtractAssignment,
                     SyntaxKind.MultiplyAssignment,
                     SyntaxKind.DivideAssignment,
                     SyntaxKind.IntegerDivideAssignment,
                     SyntaxKind.PowerAssignment,
                     SyntaxKind.LeftShiftAssignment,
                     SyntaxKind.RightShiftAssignment,
                     SyntaxKind.ConcatenateAssignment,
                     SyntaxKind.CallStatement,
                     SyntaxKind.AddHandlerStatement,
                     SyntaxKind.RemoveHandlerStatement,
                     SyntaxKind.RaiseEventStatement,
                     SyntaxKind.WithStatement,
                     SyntaxKind.ReDimStatement,
                     SyntaxKind.ReDimPreserveStatement,
                     SyntaxKind.EraseStatement,
                     SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader,
                     SyntaxKind.ConstDirective,
                     SyntaxKind.IfDirective,
                     SyntaxKind.ElseIfDirective,
                     SyntaxKind.ElseDirective,
                     SyntaxKind.EndIfDirective,
                     SyntaxKind.RegionDirective,
                     SyntaxKind.EndRegionDirective,
                     SyntaxKind.ExternalSourceDirective,
                     SyntaxKind.EndExternalSourceDirective,
                     SyntaxKind.ExternalChecksumDirective,
                     SyntaxKind.ReferenceDirective,
                     SyntaxKind.BadDirective
                Case Else
                    Throw new ArgumentException("body")
             End Select
            Return New SingleLineLambdaExpressionSyntax(kind, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), body)
        End Function


        ''' <summary>
        ''' Represents a single line lambda expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' SingleLineLambdaExpressionSyntax. One of SingleLineFunctionLambdaExpression,
        ''' SingleLineSubLambdaExpression.
        ''' </param>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="body">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' Statement (single-line Sub lambda) or Expression (single-line Function).
        ''' </param>
        Public Shared Function SingleLineLambdaExpression(ByVal kind As SyntaxKind, begin As LambdaHeaderSyntax, body As SyntaxNode) As SingleLineLambdaExpressionSyntax
            Return Syntax.SingleLineLambdaExpression(kind, begin, Nothing, body)
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="statements">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
        ''' Expression (single-line Function). This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineFunctionLambdaExpression(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MultiLineLambdaExpressionSyntax(SyntaxKind.MultiLineFunctionLambdaExpression, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineFunctionLambdaExpression(begin As LambdaHeaderSyntax, [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            Return Syntax.MultiLineFunctionLambdaExpression(begin, Nothing, Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="statements">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
        ''' Expression (single-line Function). This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineSubLambdaExpression(begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MultiLineLambdaExpressionSyntax(SyntaxKind.MultiLineSubLambdaExpression, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineSubLambdaExpression(begin As LambdaHeaderSyntax, [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            Return Syntax.MultiLineSubLambdaExpression(begin, Nothing, Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' MultiLineLambdaExpressionSyntax. One of MultiLineFunctionLambdaExpression,
        ''' MultiLineSubLambdaExpression.
        ''' </param>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="beginTerminator">
        ''' The statement terminator token that ended the Begin statement. Optional only
        ''' for single line lambdas.
        ''' </param>
        ''' <param name="statements">
        ''' The body of the lambda. Depending on the kind of lambda, this is either a
        ''' StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
        ''' Expression (single-line Function). This might be an empty list.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineLambdaExpression(ByVal kind As SyntaxKind, begin As LambdaHeaderSyntax, beginTerminator As SyntaxToken, statements As SeparatedSyntaxList(Of StatementSyntax), [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            If Not kind.IsMultiLineLambdaExpression Then
                Throw New ArgumentException("kind")
            End If
            if begin Is Nothing Then
                Throw New ArgumentNullException("begin")
            End If
            Select Case begin.Kind
                Case SyntaxKind.SubLambdaHeader,
                     SyntaxKind.FunctionLambdaHeader
                Case Else
                    Throw new ArgumentException("begin")
             End Select
            if [end] Is Nothing Then
                Throw New ArgumentNullException("[end]")
            End If
            Select Case [end].Kind
                Case SyntaxKind.EndSubStatement,
                     SyntaxKind.EndFunctionStatement
                Case Else
                    Throw new ArgumentException("[end]")
             End Select
            Return New MultiLineLambdaExpressionSyntax(kind, Nothing, Nothing, begin, DirectCast(beginTerminator.Node, InternalSyntax.PunctuationSyntax), statements.Node, [end])
        End Function


        ''' <summary>
        ''' Represents a multi-line lambda expression.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' MultiLineLambdaExpressionSyntax. One of MultiLineFunctionLambdaExpression,
        ''' MultiLineSubLambdaExpression.
        ''' </param>
        ''' <param name="begin">
        ''' The header part of the lambda that includes the "Sub" or "Function" keyword,
        ''' the argument list and return type.
        ''' </param>
        ''' <param name="end">
        ''' Returns the "End Sub" or "End Function" statement if this is a multi-line
        ''' lambda.
        ''' </param>
        Public Shared Function MultiLineLambdaExpression(ByVal kind As SyntaxKind, begin As LambdaHeaderSyntax, [end] As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax
            Return Syntax.MultiLineLambdaExpression(kind, begin, Nothing, Nothing, [end])
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function SubLambdaHeader(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            Select Case keyword.Kind
                Case SyntaxKind.SubKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New LambdaHeaderSyntax(SyntaxKind.SubLambdaHeader, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function SubLambdaHeader(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            Return Syntax.SubLambdaHeader(attributes, modifiers, Syntax.Token(SyntaxKind.SubKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        Public Shared Function SubLambdaHeader() As LambdaHeaderSyntax
            Return Syntax.SubLambdaHeader(Nothing, Nothing, Syntax.Token(SyntaxKind.SubKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function FunctionLambdaHeader(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            Select Case keyword.Kind
                Case SyntaxKind.FunctionKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New LambdaHeaderSyntax(SyntaxKind.FunctionLambdaHeader, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function FunctionLambdaHeader(attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            Return Syntax.FunctionLambdaHeader(attributes, modifiers, Syntax.Token(SyntaxKind.FunctionKeyword), parameterList, asClause)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        Public Shared Function FunctionLambdaHeader() As LambdaHeaderSyntax
            Return Syntax.FunctionLambdaHeader(Nothing, Nothing, Syntax.Token(SyntaxKind.FunctionKeyword), Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of LambdaHeaderSyntax.
        ''' One of SubLambdaHeader, FunctionLambdaHeader.
        ''' </param>
        ''' <param name="attributes">
        ''' A list of all attribute blocks on this declaration. If no attributes were
        ''' specified, Nothing is returned.
        ''' </param>
        ''' <param name="modifiers">
        ''' A list of all the modifier tokens that were present on this declaration. If no
        ''' modifiers were specified, an empty list is returned. A bitfield version of all
        ''' the modifiers ORed together, which is in many cases easier to use, can be
        ''' obtained with the Modifiers property.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        ''' <param name="parameterList">
        ''' The method's parameter list including the parentheses. If no parameter list was
        ''' present, Nothing is returned.
        ''' </param>
        ''' <param name="asClause">
        ''' The "As" clause that describes the return type. If no As clause was present,
        ''' Nothing is returned.
        ''' </param>
        Public Shared Function LambdaHeader(ByVal kind As SyntaxKind, attributes As SyntaxList(of AttributeBlockSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax) As LambdaHeaderSyntax
            If Not kind.IsLambdaHeader Then
                Throw New ArgumentException("kind")
            End If
            If keyword.Kind <> GetLambdaHeaderKeywordKind(kind) Then
                Throw new ArgumentException("keyword")
            End If
            Return New LambdaHeaderSyntax(kind, Nothing, Nothing, attributes.Node, modifiers.Node, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax), parameterList, asClause)
        End Function

        Private Shared Function GetLambdaHeaderKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.SubLambdaHeader
                    Return SyntaxKind.SubKeyword
                Case SyntaxKind.FunctionLambdaHeader
                    Return SyntaxKind.FunctionKeyword
                Case Else
                    Throw New ArgumentException("Keyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents the header part of a lambda expression
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of LambdaHeaderSyntax.
        ''' One of SubLambdaHeader, FunctionLambdaHeader.
        ''' </param>
        ''' <param name="keyword">
        ''' The keyword that introduces this method declaration. One of "Sub", "Function",
        ''' "Operator", "Event", "Property", "Get", "Set", "AddHandler", "RemoveHandler" or
        ''' "RaiseEvent".
        ''' </param>
        Public Shared Function LambdaHeader(ByVal kind As SyntaxKind, keyword As SyntaxToken) As LambdaHeaderSyntax
            Return Syntax.LambdaHeader(kind, Nothing, Nothing, keyword, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents a parenthesized argument list.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="arguments">
        ''' The list of arguments. This may be empty. Ommitted argument are represented by
        ''' an OmittedArgumentSyntax node.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function ArgumentList(openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeParenToken As SyntaxToken) As ArgumentListSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ArgumentListSyntax(SyntaxKind.ArgumentList, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), arguments.Node, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a parenthesized argument list.
        ''' </summary>
        ''' <param name="arguments">
        ''' The list of arguments. This may be empty. Ommitted argument are represented by
        ''' an OmittedArgumentSyntax node.
        ''' </param>
        Public Shared Function ArgumentList(arguments As SeparatedSyntaxList(Of ArgumentSyntax)) As ArgumentListSyntax
            Return Syntax.ArgumentList(Syntax.Token(SyntaxKind.OpenParenToken), arguments, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a parenthesized argument list.
        ''' </summary>
        Public Shared Function ArgumentList() As ArgumentListSyntax
            Return Syntax.ArgumentList(Syntax.Token(SyntaxKind.OpenParenToken), Nothing, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents an omitted argument in an argument list. An omitted argument is not
        ''' considered a syntax error but a valid case when no argument is required.
        ''' </summary>
        ''' <param name="empty">
        ''' An empty token because all non terminals must have a token.
        ''' </param>
        Public Shared Function OmittedArgument(empty As SyntaxToken) As OmittedArgumentSyntax
            Select Case empty.Kind
                Case SyntaxKind.EmptyToken
                Case Else
                    Throw new ArgumentException("empty")
             End Select
            Return New OmittedArgumentSyntax(SyntaxKind.OmittedArgument, Nothing, Nothing, DirectCast(empty.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an omitted argument in an argument list. An omitted argument is not
        ''' considered a syntax error but a valid case when no argument is required.
        ''' </summary>
        Public Shared Function OmittedArgument() As OmittedArgumentSyntax
            Return Syntax.OmittedArgument(Syntax.Token(SyntaxKind.EmptyToken))
        End Function


        ''' <summary>
        ''' Represents a simple argument that is just an expression.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression that is the argument.
        ''' </param>
        Public Shared Function SimpleArgument(expression As ExpressionSyntax) As SimpleArgumentSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New SimpleArgumentSyntax(SyntaxKind.SimpleArgument, Nothing, Nothing, expression)
        End Function


        ''' <summary>
        ''' Represents a named argument, such as "Value:=7".
        ''' </summary>
        ''' <param name="identifierName">
        ''' The name used to identify the named argument.
        ''' </param>
        ''' <param name="colonEqualsToken">
        ''' The ":=" token.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that is the named argument.
        ''' </param>
        Public Shared Function NamedArgument(identifierName As IdentifierNameSyntax, colonEqualsToken As SyntaxToken, expression As ExpressionSyntax) As NamedArgumentSyntax
            if identifierName Is Nothing Then
                Throw New ArgumentNullException("identifierName")
            End If
            Select Case identifierName.Kind
                Case SyntaxKind.IdentifierName
                Case Else
                    Throw new ArgumentException("identifierName")
             End Select
            Select Case colonEqualsToken.Kind
                Case SyntaxKind.ColonEqualsToken
                Case Else
                    Throw new ArgumentException("colonEqualsToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New NamedArgumentSyntax(SyntaxKind.NamedArgument, Nothing, Nothing, identifierName, DirectCast(colonEqualsToken.Node, InternalSyntax.PunctuationSyntax), expression)
        End Function


        ''' <summary>
        ''' Represents a named argument, such as "Value:=7".
        ''' </summary>
        ''' <param name="identifierName">
        ''' The name used to identify the named argument.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that is the named argument.
        ''' </param>
        Public Shared Function NamedArgument(identifierName As IdentifierNameSyntax, expression As ExpressionSyntax) As NamedArgumentSyntax
            Return Syntax.NamedArgument(identifierName, Syntax.Token(SyntaxKind.ColonEqualsToken), expression)
        End Function


        ''' <summary>
        ''' Represents a range argument, such as "0 to 5", used in array bounds. The
        ''' "Value" property represents the upper bound of the range.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The lower bound of the range. This is typically the integer constant zero.
        ''' </param>
        ''' <param name="toKeyword">
        ''' The "To" keyword.
        ''' </param>
        ''' <param name="upperBound">
        ''' The upper bound of the range.
        ''' </param>
        Public Shared Function RangeArgument(lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As RangeArgumentSyntax
            if lowerBound Is Nothing Then
                Throw New ArgumentNullException("lowerBound")
            End If
            Select Case lowerBound.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("lowerBound")
             End Select
            Select Case toKeyword.Kind
                Case SyntaxKind.ToKeyword
                Case Else
                    Throw new ArgumentException("toKeyword")
             End Select
            if upperBound Is Nothing Then
                Throw New ArgumentNullException("upperBound")
            End If
            Select Case upperBound.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("upperBound")
             End Select
            Return New RangeArgumentSyntax(SyntaxKind.RangeArgument, Nothing, Nothing, lowerBound, DirectCast(toKeyword.Node, InternalSyntax.KeywordSyntax), upperBound)
        End Function


        ''' <summary>
        ''' Represents a range argument, such as "0 to 5", used in array bounds. The
        ''' "Value" property represents the upper bound of the range.
        ''' </summary>
        ''' <param name="lowerBound">
        ''' The lower bound of the range. This is typically the integer constant zero.
        ''' </param>
        ''' <param name="upperBound">
        ''' The upper bound of the range.
        ''' </param>
        Public Shared Function RangeArgument(lowerBound As ExpressionSyntax, upperBound As ExpressionSyntax) As RangeArgumentSyntax
            Return Syntax.RangeArgument(lowerBound, Syntax.Token(SyntaxKind.ToKeyword), upperBound)
        End Function


        ''' <summary>
        ''' This class represents a query expression. A query expression is composed of one
        ''' or more query operators in a row. The first query operator must be a From or
        ''' Aggregate.
        ''' </summary>
        ''' <param name="clauses">
        ''' A list of all the query operators in this query expression. This list always
        ''' contains at least one operator.
        ''' </param>
        Public Shared Function QueryExpression(clauses As SyntaxList(of QueryClauseSyntax)) As QueryExpressionSyntax
            Return New QueryExpressionSyntax(SyntaxKind.QueryExpression, Nothing, Nothing, clauses.Node)
        End Function


        ''' <summary>
        ''' This class represents a query expression. A query expression is composed of one
        ''' or more query operators in a row. The first query operator must be a From or
        ''' Aggregate.
        ''' </summary>
        ''' <param name="clauses">
        ''' A list of all the query operators in this query expression. This list always
        ''' contains at least one operator.
        ''' </param>
        Public Shared Function QueryExpression(ParamArray clauses As QueryClauseSyntax()) As QueryExpressionSyntax
            Return Syntax.QueryExpression(Syntax.List(clauses))
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "x [As Type] In expression" for use in
        ''' query expressions.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the range variable being defined.
        ''' </param>
        ''' <param name="asClause">
        ''' Describes the type of the variable being defined.
        ''' </param>
        ''' <param name="inKeyword">
        ''' The "In" keyword.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that serves as the source of items for the range variable.
        ''' </param>
        Public Shared Function CollectionRangeVariable(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, inKeyword As SyntaxToken, expression As ExpressionSyntax) As CollectionRangeVariableSyntax
            if identifier Is Nothing Then
                Throw New ArgumentNullException("identifier")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.ModifiedIdentifier
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case inKeyword.Kind
                Case SyntaxKind.InKeyword
                Case Else
                    Throw new ArgumentException("inKeyword")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New CollectionRangeVariableSyntax(SyntaxKind.CollectionRangeVariable, Nothing, Nothing, identifier, asClause, DirectCast(inKeyword.Node, InternalSyntax.KeywordSyntax), expression)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "x [As Type] In expression" for use in
        ''' query expressions.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the range variable being defined.
        ''' </param>
        ''' <param name="asClause">
        ''' Describes the type of the variable being defined.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that serves as the source of items for the range variable.
        ''' </param>
        Public Shared Function CollectionRangeVariable(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, expression As ExpressionSyntax) As CollectionRangeVariableSyntax
            Return Syntax.CollectionRangeVariable(identifier, asClause, Syntax.Token(SyntaxKind.InKeyword), expression)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "x [As Type] In expression" for use in
        ''' query expressions.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the range variable being defined.
        ''' </param>
        ''' <param name="expression">
        ''' The expression that serves as the source of items for the range variable.
        ''' </param>
        Public Shared Function CollectionRangeVariable(identifier As ModifiedIdentifierSyntax, expression As ExpressionSyntax) As CollectionRangeVariableSyntax
            Return Syntax.CollectionRangeVariable(identifier, Nothing, Syntax.Token(SyntaxKind.InKeyword), expression)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] expression" for use in
        ''' query expressions.
        ''' </summary>
        ''' <param name="nameEquals">
        ''' The optional name and type of the expression range variable. If ommitted, the
        ''' name of the expression range variable is inferred from the expression.
        ''' </param>
        ''' <param name="expression">
        ''' The expression used to initialize the expression variable.
        ''' </param>
        Public Shared Function ExpressionRangeVariable(nameEquals As VariableNameEqualsSyntax, expression As ExpressionSyntax) As ExpressionRangeVariableSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New ExpressionRangeVariableSyntax(SyntaxKind.ExpressionRangeVariable, Nothing, Nothing, nameEquals, expression)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] expression" for use in
        ''' query expressions.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression used to initialize the expression variable.
        ''' </param>
        Public Shared Function ExpressionRangeVariable(expression As ExpressionSyntax) As ExpressionRangeVariableSyntax
            Return Syntax.ExpressionRangeVariable(Nothing, expression)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] aggregation-function"
        ''' for use in the Into clause of Aggregate or Group By or Group Join query
        ''' operators.
        ''' </summary>
        ''' <param name="nameEquals">
        ''' The optional name and type of the expression range variable. If ommitted, the
        ''' name of the expression range variable is inferred from the aggregation
        ''' expression.
        ''' </param>
        ''' <param name="aggregation">
        ''' The name of the aggregation function. The "Group" aggregation function is
        ''' represented by the identifier "Group".
        ''' </param>
        Public Shared Function AggregationRangeVariable(nameEquals As VariableNameEqualsSyntax, aggregation As AggregationSyntax) As AggregationRangeVariableSyntax
            if aggregation Is Nothing Then
                Throw New ArgumentNullException("aggregation")
            End If
            Select Case aggregation.Kind
                Case SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation
                Case Else
                    Throw new ArgumentException("aggregation")
             End Select
            Return New AggregationRangeVariableSyntax(SyntaxKind.AggregationRangeVariable, Nothing, Nothing, nameEquals, aggregation)
        End Function


        ''' <summary>
        ''' Describes a single variable of the form "[x [As Type] =] aggregation-function"
        ''' for use in the Into clause of Aggregate or Group By or Group Join query
        ''' operators.
        ''' </summary>
        ''' <param name="aggregation">
        ''' The name of the aggregation function. The "Group" aggregation function is
        ''' represented by the identifier "Group".
        ''' </param>
        Public Shared Function AggregationRangeVariable(aggregation As AggregationSyntax) As AggregationRangeVariableSyntax
            Return Syntax.AggregationRangeVariable(Nothing, aggregation)
        End Function


        ''' <summary>
        ''' Represents the name and optional type of an expression range variable.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the variable being defined.
        ''' </param>
        ''' <param name="asClause">
        ''' Describes the type of the variable being defined.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The "=" token.
        ''' </param>
        Public Shared Function VariableNameEquals(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, equalsToken As SyntaxToken) As VariableNameEqualsSyntax
            if identifier Is Nothing Then
                Throw New ArgumentNullException("identifier")
            End If
            Select Case identifier.Kind
                Case SyntaxKind.ModifiedIdentifier
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            Return New VariableNameEqualsSyntax(SyntaxKind.VariableNameEquals, Nothing, Nothing, identifier, asClause, DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the name and optional type of an expression range variable.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the variable being defined.
        ''' </param>
        ''' <param name="asClause">
        ''' Describes the type of the variable being defined.
        ''' </param>
        Public Shared Function VariableNameEquals(identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax) As VariableNameEqualsSyntax
            Return Syntax.VariableNameEquals(identifier, asClause, Syntax.Token(SyntaxKind.EqualsToken))
        End Function


        ''' <summary>
        ''' Represents the name and optional type of an expression range variable.
        ''' </summary>
        ''' <param name="identifier">
        ''' The name of the variable being defined.
        ''' </param>
        Public Shared Function VariableNameEquals(identifier As ModifiedIdentifierSyntax) As VariableNameEqualsSyntax
            Return Syntax.VariableNameEquals(identifier, Nothing, Syntax.Token(SyntaxKind.EqualsToken))
        End Function


        ''' <summary>
        ''' Represents an invocation of an Aggregation function in the aggregation range
        ''' variable declaration of a Group By, Group Join or Aggregate query operator.
        ''' </summary>
        ''' <param name="functionName">
        ''' The name of the aggregation function.
        ''' </param>
        ''' <param name="openParenToken">
        ''' The "(" token if present.
        ''' </param>
        ''' <param name="argument">
        ''' The argument to the aggregation function.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token, if present.
        ''' </param>
        Public Shared Function FunctionAggregation(functionName As SyntaxToken, openParenToken As SyntaxToken, argument As ExpressionSyntax, closeParenToken As SyntaxToken) As FunctionAggregationSyntax
            Select Case functionName.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("functionName")
             End Select
            Return New FunctionAggregationSyntax(SyntaxKind.FunctionAggregation, Nothing, Nothing, DirectCast(functionName.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), argument, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an invocation of an Aggregation function in the aggregation range
        ''' variable declaration of a Group By, Group Join or Aggregate query operator.
        ''' </summary>
        ''' <param name="functionName">
        ''' The name of the aggregation function.
        ''' </param>
        ''' <param name="argument">
        ''' The argument to the aggregation function.
        ''' </param>
        Public Shared Function FunctionAggregation(functionName As SyntaxToken, argument As ExpressionSyntax) As FunctionAggregationSyntax
            Return Syntax.FunctionAggregation(functionName, Nothing, argument, Nothing)
        End Function


        ''' <summary>
        ''' Represents an invocation of an Aggregation function in the aggregation range
        ''' variable declaration of a Group By, Group Join or Aggregate query operator.
        ''' </summary>
        ''' <param name="functionName">
        ''' The name of the aggregation function.
        ''' </param>
        Public Shared Function FunctionAggregation(functionName As SyntaxToken) As FunctionAggregationSyntax
            Return Syntax.FunctionAggregation(functionName, Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents an invocation of an Aggregation function in the aggregation range
        ''' variable declaration of a Group By, Group Join or Aggregate query operator.
        ''' </summary>
        ''' <param name="functionName">
        ''' The name of the aggregation function.
        ''' </param>
        Public Shared Function FunctionAggregation(functionName As String) As FunctionAggregationSyntax
            Return Syntax.FunctionAggregation(Syntax.Identifier(functionName), Nothing, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Represents the use of "Group" as the aggregation function in the in the
        ''' aggregation range variable declaration of a Group By or Group Join query
        ''' operator.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The "Group" keyword.
        ''' </param>
        Public Shared Function GroupAggregation(groupKeyword As SyntaxToken) As GroupAggregationSyntax
            Select Case groupKeyword.Kind
                Case SyntaxKind.GroupKeyword
                Case Else
                    Throw new ArgumentException("groupKeyword")
             End Select
            Return New GroupAggregationSyntax(SyntaxKind.GroupAggregation, Nothing, Nothing, DirectCast(groupKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the use of "Group" as the aggregation function in the in the
        ''' aggregation range variable declaration of a Group By or Group Join query
        ''' operator.
        ''' </summary>
        Public Shared Function GroupAggregation() As GroupAggregationSyntax
            Return Syntax.GroupAggregation(Syntax.Token(SyntaxKind.GroupKeyword))
        End Function


        ''' <summary>
        ''' Represents a "From" query operator. If this is the beginning of a query, the
        ''' Source will be Nothing. Otherwise, the Source will be the part of the query to
        ''' the left of the From.
        ''' </summary>
        ''' <param name="fromKeyword">
        ''' The "From" keyword.
        ''' </param>
        ''' <param name="variables">
        ''' The list of collection variables declared by this From operator.
        ''' </param>
        Public Shared Function FromClause(fromKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax
            Select Case fromKeyword.Kind
                Case SyntaxKind.FromKeyword
                Case Else
                    Throw new ArgumentException("fromKeyword")
             End Select
            Return New FromClauseSyntax(SyntaxKind.FromClause, Nothing, Nothing, DirectCast(fromKeyword.Node, InternalSyntax.KeywordSyntax), variables.Node)
        End Function


        ''' <summary>
        ''' Represents a "From" query operator. If this is the beginning of a query, the
        ''' Source will be Nothing. Otherwise, the Source will be the part of the query to
        ''' the left of the From.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of collection variables declared by this From operator.
        ''' </param>
        Public Shared Function FromClause(variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax
            Return Syntax.FromClause(Syntax.Token(SyntaxKind.FromKeyword), variables)
        End Function


        ''' <summary>
        ''' Represents a "From" query operator. If this is the beginning of a query, the
        ''' Source will be Nothing. Otherwise, the Source will be the part of the query to
        ''' the left of the From.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of collection variables declared by this From operator.
        ''' </param>
        Public Shared Function FromClause(ParamArray variables As CollectionRangeVariableSyntax()) As FromClauseSyntax
            Return Syntax.FromClause(Syntax.Token(SyntaxKind.FromKeyword), Syntax.SeparatedList(Of CollectionRangeVariableSyntax)().Add(SyntaxKind.CommaToken, variables))
        End Function


        ''' <summary>
        ''' Represents a "Let" query operator.
        ''' </summary>
        ''' <param name="letKeyword">
        ''' The "Let" keyword.
        ''' </param>
        ''' <param name="variables">
        ''' The list of expression range variable being defined by the Let operator.
        ''' </param>
        Public Shared Function LetClause(letKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax
            Select Case letKeyword.Kind
                Case SyntaxKind.LetKeyword
                Case Else
                    Throw new ArgumentException("letKeyword")
             End Select
            Return New LetClauseSyntax(SyntaxKind.LetClause, Nothing, Nothing, DirectCast(letKeyword.Node, InternalSyntax.KeywordSyntax), variables.Node)
        End Function


        ''' <summary>
        ''' Represents a "Let" query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of expression range variable being defined by the Let operator.
        ''' </param>
        Public Shared Function LetClause(variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax
            Return Syntax.LetClause(Syntax.Token(SyntaxKind.LetKeyword), variables)
        End Function


        ''' <summary>
        ''' Represents a "Let" query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of expression range variable being defined by the Let operator.
        ''' </param>
        Public Shared Function LetClause(ParamArray variables As ExpressionRangeVariableSyntax()) As LetClauseSyntax
            Return Syntax.LetClause(Syntax.Token(SyntaxKind.LetKeyword), Syntax.SeparatedList(Of ExpressionRangeVariableSyntax)().Add(SyntaxKind.CommaToken, variables))
        End Function


        ''' <summary>
        ''' Represents an Aggregate query operator.
        ''' </summary>
        ''' <param name="aggregateKeyword">
        ''' The "Aggregate" keyword.
        ''' </param>
        ''' <param name="variables">
        ''' The list of collection range variables declared by this Aggregate operator.
        ''' </param>
        ''' <param name="additionalQueryOperators">
        ''' A list of additional query operators. It may be empty.
        ''' </param>
        ''' <param name="intoKeyword">
        ''' The "Into" keyword.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables being defined by the aggregation.
        ''' </param>
        Public Shared Function AggregateClause(aggregateKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalQueryOperators As SyntaxList(of QueryClauseSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax
            Select Case aggregateKeyword.Kind
                Case SyntaxKind.AggregateKeyword
                Case Else
                    Throw new ArgumentException("aggregateKeyword")
             End Select
            Select Case intoKeyword.Kind
                Case SyntaxKind.IntoKeyword
                Case Else
                    Throw new ArgumentException("intoKeyword")
             End Select
            Return New AggregateClauseSyntax(SyntaxKind.AggregateClause, Nothing, Nothing, DirectCast(aggregateKeyword.Node, InternalSyntax.KeywordSyntax), variables.Node, additionalQueryOperators.Node, DirectCast(intoKeyword.Node, InternalSyntax.KeywordSyntax), aggregationVariables.Node)
        End Function


        ''' <summary>
        ''' Represents an Aggregate query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of collection range variables declared by this Aggregate operator.
        ''' </param>
        ''' <param name="additionalQueryOperators">
        ''' A list of additional query operators. It may be empty.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables being defined by the aggregation.
        ''' </param>
        Public Shared Function AggregateClause(variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalQueryOperators As SyntaxList(of QueryClauseSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax
            Return Syntax.AggregateClause(Syntax.Token(SyntaxKind.AggregateKeyword), variables, additionalQueryOperators, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents an Aggregate query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of collection range variables declared by this Aggregate operator.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables being defined by the aggregation.
        ''' </param>
        Public Shared Function AggregateClause(variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax
            Return Syntax.AggregateClause(Syntax.Token(SyntaxKind.AggregateKeyword), variables, Nothing, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents the "Distinct" query operator.
        ''' </summary>
        ''' <param name="distinctKeyword">
        ''' The "Distinct" keyword.
        ''' </param>
        Public Shared Function DistinctClause(distinctKeyword As SyntaxToken) As DistinctClauseSyntax
            Select Case distinctKeyword.Kind
                Case SyntaxKind.DistinctKeyword
                Case Else
                    Throw new ArgumentException("distinctKeyword")
             End Select
            Return New DistinctClauseSyntax(SyntaxKind.DistinctClause, Nothing, Nothing, DirectCast(distinctKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the "Distinct" query operator.
        ''' </summary>
        Public Shared Function DistinctClause() As DistinctClauseSyntax
            Return Syntax.DistinctClause(Syntax.Token(SyntaxKind.DistinctKeyword))
        End Function


        ''' <summary>
        ''' Represents a "Where" query operator.
        ''' </summary>
        ''' <param name="whereKeyword">
        ''' The "Where" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression used for filtering.
        ''' </param>
        Public Shared Function WhereClause(whereKeyword As SyntaxToken, condition As ExpressionSyntax) As WhereClauseSyntax
            Select Case whereKeyword.Kind
                Case SyntaxKind.WhereKeyword
                Case Else
                    Throw new ArgumentException("whereKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New WhereClauseSyntax(SyntaxKind.WhereClause, Nothing, Nothing, DirectCast(whereKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' Represents a "Where" query operator.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression used for filtering.
        ''' </param>
        Public Shared Function WhereClause(condition As ExpressionSyntax) As WhereClauseSyntax
            Return Syntax.WhereClause(Syntax.Token(SyntaxKind.WhereKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="whileKeyword">
        ''' The "While" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function SkipWhileClause(skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Select Case skipOrTakeKeyword.Kind
                Case SyntaxKind.SkipKeyword
                Case Else
                    Throw new ArgumentException("skipOrTakeKeyword")
             End Select
            Select Case whileKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("whileKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New PartitionWhileClauseSyntax(SyntaxKind.SkipWhileClause, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(whileKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function SkipWhileClause(condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Return Syntax.SkipWhileClause(Syntax.Token(SyntaxKind.SkipKeyword), Syntax.Token(SyntaxKind.WhileKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="whileKeyword">
        ''' The "While" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function TakeWhileClause(skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Select Case skipOrTakeKeyword.Kind
                Case SyntaxKind.TakeKeyword
                Case Else
                    Throw new ArgumentException("skipOrTakeKeyword")
             End Select
            Select Case whileKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("whileKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New PartitionWhileClauseSyntax(SyntaxKind.TakeWhileClause, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(whileKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function TakeWhileClause(condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Return Syntax.TakeWhileClause(Syntax.Token(SyntaxKind.TakeKeyword), Syntax.Token(SyntaxKind.WhileKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' PartitionWhileClauseSyntax. One of SkipWhileClause, TakeWhileClause.
        ''' </param>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="whileKeyword">
        ''' The "While" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function PartitionWhileClause(ByVal kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            If Not kind.IsPartitionWhileClause Then
                Throw New ArgumentException("kind")
            End If
            If skipOrTakeKeyword.Kind <> GetPartitionWhileClauseSkipOrTakeKeywordKind(kind) Then
                Throw new ArgumentException("skipOrTakeKeyword")
            End If
            Select Case whileKeyword.Kind
                Case SyntaxKind.WhileKeyword
                Case Else
                    Throw new ArgumentException("whileKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New PartitionWhileClauseSyntax(kind, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(whileKeyword.Node, InternalSyntax.KeywordSyntax), condition)
        End Function

        Private Shared Function GetPartitionWhileClauseSkipOrTakeKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.SkipWhileClause
                    Return SyntaxKind.SkipKeyword
                Case SyntaxKind.TakeWhileClause
                    Return SyntaxKind.TakeKeyword
                Case Else
                    Throw New ArgumentException("SkipOrTakeKeyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents a "Skip While" or "Take While" query operator. The Kind property
        ''' tells which.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' PartitionWhileClauseSyntax. One of SkipWhileClause, TakeWhileClause.
        ''' </param>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="condition">
        ''' The boolean expression used for partitioning.
        ''' </param>
        Public Shared Function PartitionWhileClause(ByVal kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax
            Return Syntax.PartitionWhileClause(kind, skipOrTakeKeyword, Syntax.Token(SyntaxKind.WhileKeyword), condition)
        End Function


        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="count">
        ''' Represents the expression with the number of items to take or skip.
        ''' </param>
        Public Shared Function SkipClause(skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax
            Select Case skipOrTakeKeyword.Kind
                Case SyntaxKind.SkipKeyword
                Case Else
                    Throw new ArgumentException("skipOrTakeKeyword")
             End Select
            if count Is Nothing Then
                Throw New ArgumentNullException("count")
            End If
            Select Case count.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("count")
             End Select
            Return New PartitionClauseSyntax(SyntaxKind.SkipClause, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), count)
        End Function


        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        ''' <param name="count">
        ''' Represents the expression with the number of items to take or skip.
        ''' </param>
        Public Shared Function SkipClause(count As ExpressionSyntax) As PartitionClauseSyntax
            Return Syntax.SkipClause(Syntax.Token(SyntaxKind.SkipKeyword), count)
        End Function


        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="count">
        ''' Represents the expression with the number of items to take or skip.
        ''' </param>
        Public Shared Function TakeClause(skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax
            Select Case skipOrTakeKeyword.Kind
                Case SyntaxKind.TakeKeyword
                Case Else
                    Throw new ArgumentException("skipOrTakeKeyword")
             End Select
            if count Is Nothing Then
                Throw New ArgumentNullException("count")
            End If
            Select Case count.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("count")
             End Select
            Return New PartitionClauseSyntax(SyntaxKind.TakeClause, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), count)
        End Function


        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        ''' <param name="count">
        ''' Represents the expression with the number of items to take or skip.
        ''' </param>
        Public Shared Function TakeClause(count As ExpressionSyntax) As PartitionClauseSyntax
            Return Syntax.TakeClause(Syntax.Token(SyntaxKind.TakeKeyword), count)
        End Function


        ''' <summary>
        ''' Represents a "Skip" or "Take" query operator. The Kind property tells which.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of
        ''' PartitionClauseSyntax. One of SkipClause, TakeClause.
        ''' </param>
        ''' <param name="skipOrTakeKeyword">
        ''' The "Skip" or "Take" keyword.
        ''' </param>
        ''' <param name="count">
        ''' Represents the expression with the number of items to take or skip.
        ''' </param>
        Public Shared Function PartitionClause(ByVal kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax
            If Not kind.IsPartitionClause Then
                Throw New ArgumentException("kind")
            End If
            If skipOrTakeKeyword.Kind <> GetPartitionClauseSkipOrTakeKeywordKind(kind) Then
                Throw new ArgumentException("skipOrTakeKeyword")
            End If
            if count Is Nothing Then
                Throw New ArgumentNullException("count")
            End If
            Select Case count.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("count")
             End Select
            Return New PartitionClauseSyntax(kind, Nothing, Nothing, DirectCast(skipOrTakeKeyword.Node, InternalSyntax.KeywordSyntax), count)
        End Function

        Private Shared Function GetPartitionClauseSkipOrTakeKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.SkipClause
                    Return SyntaxKind.SkipKeyword
                Case SyntaxKind.TakeClause
                    Return SyntaxKind.TakeKeyword
                Case Else
                    Throw New ArgumentException("SkipOrTakeKeyword")
            End Select
        End Function

        ''' <summary>
        ''' Represents the "Group By" query operator.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The "Group" keyword.
        ''' </param>
        ''' <param name="items">
        ''' The optional list of variables being grouped; the contents of the Group clause.
        ''' If none were specified, an empty list is returned.
        ''' </param>
        ''' <param name="byKeyword">
        ''' The "By" keyword.
        ''' </param>
        ''' <param name="keys">
        ''' The key values being used for grouping.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupByClause(groupKeyword As SyntaxToken, items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), byKeyword As SyntaxToken, keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax
            Select Case groupKeyword.Kind
                Case SyntaxKind.GroupKeyword
                Case Else
                    Throw new ArgumentException("groupKeyword")
             End Select
            Select Case byKeyword.Kind
                Case SyntaxKind.ByKeyword
                Case Else
                    Throw new ArgumentException("byKeyword")
             End Select
            Select Case intoKeyword.Kind
                Case SyntaxKind.IntoKeyword
                Case Else
                    Throw new ArgumentException("intoKeyword")
             End Select
            Return New GroupByClauseSyntax(SyntaxKind.GroupByClause, Nothing, Nothing, DirectCast(groupKeyword.Node, InternalSyntax.KeywordSyntax), items.Node, DirectCast(byKeyword.Node, InternalSyntax.KeywordSyntax), keys.Node, DirectCast(intoKeyword.Node, InternalSyntax.KeywordSyntax), aggregationVariables.Node)
        End Function


        ''' <summary>
        ''' Represents the "Group By" query operator.
        ''' </summary>
        ''' <param name="items">
        ''' The optional list of variables being grouped; the contents of the Group clause.
        ''' If none were specified, an empty list is returned.
        ''' </param>
        ''' <param name="keys">
        ''' The key values being used for grouping.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupByClause(items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax
            Return Syntax.GroupByClause(Syntax.Token(SyntaxKind.GroupKeyword), items, Syntax.Token(SyntaxKind.ByKeyword), keys, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents the "Group By" query operator.
        ''' </summary>
        ''' <param name="keys">
        ''' The key values being used for grouping.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupByClause(keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax
            Return Syntax.GroupByClause(Syntax.Token(SyntaxKind.GroupKeyword), Nothing, Syntax.Token(SyntaxKind.ByKeyword), keys, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents a Join query operator.
        ''' </summary>
        ''' <param name="joinKeyword">
        ''' The "Join" keyword.
        ''' </param>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' An additional Join or Group Join query operator.
        ''' </param>
        ''' <param name="onKeyword">
        ''' The "On" keyword.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        Public Shared Function JoinClause(joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax
            Select Case joinKeyword.Kind
                Case SyntaxKind.JoinKeyword
                Case Else
                    Throw new ArgumentException("joinKeyword")
             End Select
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Return New JoinClauseSyntax(SyntaxKind.JoinClause, Nothing, Nothing, DirectCast(joinKeyword.Node, InternalSyntax.KeywordSyntax), joinedVariables.Node, additionalJoins.Node, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), joinConditions.Node)
        End Function


        ''' <summary>
        ''' Represents a Join query operator.
        ''' </summary>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' An additional Join or Group Join query operator.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        Public Shared Function JoinClause(joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax
            Return Syntax.JoinClause(Syntax.Token(SyntaxKind.JoinKeyword), joinedVariables, additionalJoins, Syntax.Token(SyntaxKind.OnKeyword), joinConditions)
        End Function


        ''' <summary>
        ''' Represents a Join query operator.
        ''' </summary>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        Public Shared Function JoinClause(joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax
            Return Syntax.JoinClause(Syntax.Token(SyntaxKind.JoinKeyword), joinedVariables, Nothing, Syntax.Token(SyntaxKind.OnKeyword), joinConditions)
        End Function


        ''' <summary>
        ''' Represents the "expression Equals expression" condition in a Join.
        ''' </summary>
        ''' <param name="left">
        ''' The left expression in the Join condition.
        ''' </param>
        ''' <param name="equalsKeyword">
        ''' The "Equals" keyword.
        ''' </param>
        ''' <param name="right">
        ''' The right expression in the Join condition.
        ''' </param>
        Public Shared Function JoinCondition(left As ExpressionSyntax, equalsKeyword As SyntaxToken, right As ExpressionSyntax) As JoinConditionSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case equalsKeyword.Kind
                Case SyntaxKind.EqualsKeyword
                Case Else
                    Throw new ArgumentException("equalsKeyword")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New JoinConditionSyntax(SyntaxKind.JoinCondition, Nothing, Nothing, left, DirectCast(equalsKeyword.Node, InternalSyntax.KeywordSyntax), right)
        End Function


        ''' <summary>
        ''' Represents the "expression Equals expression" condition in a Join.
        ''' </summary>
        ''' <param name="left">
        ''' The left expression in the Join condition.
        ''' </param>
        ''' <param name="right">
        ''' The right expression in the Join condition.
        ''' </param>
        Public Shared Function JoinCondition(left As ExpressionSyntax, right As ExpressionSyntax) As JoinConditionSyntax
            Return Syntax.JoinCondition(left, Syntax.Token(SyntaxKind.EqualsKeyword), right)
        End Function


        ''' <summary>
        ''' Represents the "Group Join" query operator.
        ''' </summary>
        ''' <param name="groupKeyword">
        ''' The "Group" keyword.
        ''' </param>
        ''' <param name="joinKeyword">
        ''' The "Join" keyword.
        ''' </param>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' An additional Join or Group Join query operator.
        ''' </param>
        ''' <param name="onKeyword">
        ''' The "On" keyword.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        ''' <param name="intoKeyword">
        ''' The "Into" keyword.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupJoinClause(groupKeyword As SyntaxToken, joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax
            Select Case groupKeyword.Kind
                Case SyntaxKind.GroupKeyword
                Case Else
                    Throw new ArgumentException("groupKeyword")
             End Select
            Select Case joinKeyword.Kind
                Case SyntaxKind.JoinKeyword
                Case Else
                    Throw new ArgumentException("joinKeyword")
             End Select
            Select Case onKeyword.Kind
                Case SyntaxKind.OnKeyword
                Case Else
                    Throw new ArgumentException("onKeyword")
             End Select
            Select Case intoKeyword.Kind
                Case SyntaxKind.IntoKeyword
                Case Else
                    Throw new ArgumentException("intoKeyword")
             End Select
            Return New GroupJoinClauseSyntax(SyntaxKind.GroupJoinClause, Nothing, Nothing, DirectCast(groupKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(joinKeyword.Node, InternalSyntax.KeywordSyntax), joinedVariables.Node, additionalJoins.Node, DirectCast(onKeyword.Node, InternalSyntax.KeywordSyntax), joinConditions.Node, DirectCast(intoKeyword.Node, InternalSyntax.KeywordSyntax), aggregationVariables.Node)
        End Function


        ''' <summary>
        ''' Represents the "Group Join" query operator.
        ''' </summary>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="additionalJoins">
        ''' An additional Join or Group Join query operator.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupJoinClause(joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(of JoinClauseSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax
            Return Syntax.GroupJoinClause(Syntax.Token(SyntaxKind.GroupKeyword), Syntax.Token(SyntaxKind.JoinKeyword), joinedVariables, additionalJoins, Syntax.Token(SyntaxKind.OnKeyword), joinConditions, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents the "Group Join" query operator.
        ''' </summary>
        ''' <param name="joinedVariables">
        ''' Defines the collection range variables being joined to.
        ''' </param>
        ''' <param name="joinConditions">
        ''' The conditions indicating what expressions to compare during the join. Each
        ''' condition is a JoinCondition, and the separators are "And" keywords.
        ''' </param>
        ''' <param name="aggregationVariables">
        ''' The list of new variables that calculate aggregations.
        ''' </param>
        Public Shared Function GroupJoinClause(joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax
            Return Syntax.GroupJoinClause(Syntax.Token(SyntaxKind.GroupKeyword), Syntax.Token(SyntaxKind.JoinKeyword), joinedVariables, Nothing, Syntax.Token(SyntaxKind.OnKeyword), joinConditions, Syntax.Token(SyntaxKind.IntoKeyword), aggregationVariables)
        End Function


        ''' <summary>
        ''' Represents the "Order By" query operator.
        ''' </summary>
        ''' <param name="orderKeyword">
        ''' The "Order" keyword
        ''' </param>
        ''' <param name="byKeyword">
        ''' The "By" keyword.
        ''' </param>
        ''' <param name="orderings">
        ''' The list of OrderExpression's to sort by.
        ''' </param>
        Public Shared Function OrderByClause(orderKeyword As SyntaxToken, byKeyword As SyntaxToken, orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax
            Select Case orderKeyword.Kind
                Case SyntaxKind.OrderKeyword
                Case Else
                    Throw new ArgumentException("orderKeyword")
             End Select
            Select Case byKeyword.Kind
                Case SyntaxKind.ByKeyword
                Case Else
                    Throw new ArgumentException("byKeyword")
             End Select
            Return New OrderByClauseSyntax(SyntaxKind.OrderByClause, Nothing, Nothing, DirectCast(orderKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(byKeyword.Node, InternalSyntax.KeywordSyntax), orderings.Node)
        End Function


        ''' <summary>
        ''' Represents the "Order By" query operator.
        ''' </summary>
        ''' <param name="orderings">
        ''' The list of OrderExpression's to sort by.
        ''' </param>
        Public Shared Function OrderByClause(orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax
            Return Syntax.OrderByClause(Syntax.Token(SyntaxKind.OrderKeyword), Syntax.Token(SyntaxKind.ByKeyword), orderings)
        End Function


        ''' <summary>
        ''' Represents the "Order By" query operator.
        ''' </summary>
        ''' <param name="orderings">
        ''' The list of OrderExpression's to sort by.
        ''' </param>
        Public Shared Function OrderByClause(ParamArray orderings As OrderingSyntax()) As OrderByClauseSyntax
            Return Syntax.OrderByClause(Syntax.Token(SyntaxKind.OrderKeyword), Syntax.Token(SyntaxKind.ByKeyword), Syntax.SeparatedList(Of OrderingSyntax)().Add(SyntaxKind.CommaToken, orderings))
        End Function


        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        ''' <param name="ascendingOrDescendingKeyword">
        ''' The "Ascending" or "Descending" keyword, if present. To determine whether to
        ''' sort in ascending or descending order, checking the Kind property is easier.
        ''' </param>
        Public Shared Function AscendingOrdering(expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New OrderingSyntax(SyntaxKind.AscendingOrdering, Nothing, Nothing, expression, DirectCast(ascendingOrDescendingKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        Public Shared Function AscendingOrdering(expression As ExpressionSyntax) As OrderingSyntax
            Return Syntax.AscendingOrdering(expression, Nothing)
        End Function


        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        ''' <param name="ascendingOrDescendingKeyword">
        ''' The "Ascending" or "Descending" keyword, if present. To determine whether to
        ''' sort in ascending or descending order, checking the Kind property is easier.
        ''' </param>
        Public Shared Function DescendingOrdering(expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New OrderingSyntax(SyntaxKind.DescendingOrdering, Nothing, Nothing, expression, DirectCast(ascendingOrDescendingKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        Public Shared Function DescendingOrdering(expression As ExpressionSyntax) As OrderingSyntax
            Return Syntax.DescendingOrdering(expression, Nothing)
        End Function


        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of OrderingSyntax. One
        ''' of AscendingOrdering, DescendingOrdering.
        ''' </param>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        ''' <param name="ascendingOrDescendingKeyword">
        ''' The "Ascending" or "Descending" keyword, if present. To determine whether to
        ''' sort in ascending or descending order, checking the Kind property is easier.
        ''' </param>
        Public Shared Function Ordering(ByVal kind As SyntaxKind, expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax
            If Not kind.IsOrdering Then
                Throw New ArgumentException("kind")
            End If
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Return New OrderingSyntax(kind, Nothing, Nothing, expression, DirectCast(ascendingOrDescendingKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function

        Private Shared Function GetOrderingAscendingOrDescendingKeywordKind(kind As SyntaxKind) As SyntaxKind
            Select Case kind
                Case SyntaxKind.AscendingOrdering
                    Return SyntaxKind.AscendingKeyword
                Case SyntaxKind.DescendingOrdering
                    Return SyntaxKind.DescendingKeyword
                Case Else
                    Throw New ArgumentException("AscendingOrDescendingKeyword")
            End Select
        End Function

        ''' <summary>
        ''' An expression to order by, plus an optional ordering. The Kind indicates
        ''' whether to order in ascending or descending order.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of OrderingSyntax. One
        ''' of AscendingOrdering, DescendingOrdering.
        ''' </param>
        ''' <param name="expression">
        ''' The expression to sort by.
        ''' </param>
        Public Shared Function Ordering(ByVal kind As SyntaxKind, expression As ExpressionSyntax) As OrderingSyntax
            Return Syntax.Ordering(kind, expression, Nothing)
        End Function


        ''' <summary>
        ''' Represents the "Select" query operator.
        ''' </summary>
        ''' <param name="selectKeyword">
        ''' The "Select" keyword.
        ''' </param>
        ''' <param name="variables">
        ''' The list of expression range variables being defined by the Select query
        ''' operator.
        ''' </param>
        Public Shared Function SelectClause(selectKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax
            Select Case selectKeyword.Kind
                Case SyntaxKind.SelectKeyword
                Case Else
                    Throw new ArgumentException("selectKeyword")
             End Select
            Return New SelectClauseSyntax(SyntaxKind.SelectClause, Nothing, Nothing, DirectCast(selectKeyword.Node, InternalSyntax.KeywordSyntax), variables.Node)
        End Function


        ''' <summary>
        ''' Represents the "Select" query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of expression range variables being defined by the Select query
        ''' operator.
        ''' </param>
        Public Shared Function SelectClause(variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax
            Return Syntax.SelectClause(Syntax.Token(SyntaxKind.SelectKeyword), variables)
        End Function


        ''' <summary>
        ''' Represents the "Select" query operator.
        ''' </summary>
        ''' <param name="variables">
        ''' The list of expression range variables being defined by the Select query
        ''' operator.
        ''' </param>
        Public Shared Function SelectClause(ParamArray variables As ExpressionRangeVariableSyntax()) As SelectClauseSyntax
            Return Syntax.SelectClause(Syntax.Token(SyntaxKind.SelectKeyword), Syntax.SeparatedList(Of ExpressionRangeVariableSyntax)().Add(SyntaxKind.CommaToken, variables))
        End Function


        ''' <summary>
        ''' Represents and XML Document literal expression.
        ''' </summary>
        Public Shared Function XmlDocument(declaration As XmlDeclarationSyntax, precedingMisc As SyntaxList(of XmlNodeSyntax), root As XmlNodeSyntax, followingMisc As SyntaxList(of XmlNodeSyntax)) As XmlDocumentSyntax
            if declaration Is Nothing Then
                Throw New ArgumentNullException("declaration")
            End If
            Select Case declaration.Kind
                Case SyntaxKind.XmlDeclaration
                Case Else
                    Throw new ArgumentException("declaration")
             End Select
            if root Is Nothing Then
                Throw New ArgumentNullException("root")
            End If
            Select Case root.Kind
                Case SyntaxKind.XmlElement,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlEmbeddedExpression
                Case Else
                    Throw new ArgumentException("root")
             End Select
            Return New XmlDocumentSyntax(SyntaxKind.XmlDocument, Nothing, Nothing, declaration, precedingMisc.Node, root, followingMisc.Node)
        End Function


        ''' <summary>
        ''' Represents and XML Document literal expression.
        ''' </summary>
        Public Shared Function XmlDocument(declaration As XmlDeclarationSyntax, root As XmlNodeSyntax) As XmlDocumentSyntax
            Return Syntax.XmlDocument(declaration, Nothing, root, Nothing)
        End Function


        ''' <summary>
        ''' Represents the XML declaration prologue in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlDeclaration(lessThanQuestionToken As SyntaxToken, xmlKeyword As SyntaxToken, version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax, questionGreaterThanToken As SyntaxToken) As XmlDeclarationSyntax
            Select Case lessThanQuestionToken.Kind
                Case SyntaxKind.LessThanQuestionToken
                Case Else
                    Throw new ArgumentException("lessThanQuestionToken")
             End Select
            Select Case xmlKeyword.Kind
                Case SyntaxKind.XmlKeyword
                Case Else
                    Throw new ArgumentException("xmlKeyword")
             End Select
            if version Is Nothing Then
                Throw New ArgumentNullException("version")
            End If
            Select Case version.Kind
                Case SyntaxKind.XmlDeclarationOption
                Case Else
                    Throw new ArgumentException("version")
             End Select
            Select Case questionGreaterThanToken.Kind
                Case SyntaxKind.QuestionGreaterThanToken
                Case Else
                    Throw new ArgumentException("questionGreaterThanToken")
             End Select
            Return New XmlDeclarationSyntax(SyntaxKind.XmlDeclaration, Nothing, Nothing, DirectCast(lessThanQuestionToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(xmlKeyword.Node, InternalSyntax.KeywordSyntax), version, encoding, standalone, DirectCast(questionGreaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the XML declaration prologue in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlDeclaration(version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax) As XmlDeclarationSyntax
            Return Syntax.XmlDeclaration(Syntax.Token(SyntaxKind.LessThanQuestionToken), Syntax.Token(SyntaxKind.XmlKeyword), version, encoding, standalone, Syntax.Token(SyntaxKind.QuestionGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents the XML declaration prologue in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlDeclaration(version As XmlDeclarationOptionSyntax) As XmlDeclarationSyntax
            Return Syntax.XmlDeclaration(Syntax.Token(SyntaxKind.LessThanQuestionToken), Syntax.Token(SyntaxKind.XmlKeyword), version, Nothing, Nothing, Syntax.Token(SyntaxKind.QuestionGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an XML document prologue option - version, encoding, standalone or
        ''' whitespace in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlDeclarationOption(name As SyntaxToken, equals As SyntaxToken, value As XmlStringSyntax) As XmlDeclarationOptionSyntax
            Select Case name.Kind
                Case SyntaxKind.XmlNameToken
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case equals.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equals")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.XmlString
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New XmlDeclarationOptionSyntax(SyntaxKind.XmlDeclarationOption, Nothing, Nothing, DirectCast(name.Node, InternalSyntax.XmlNameTokenSyntax), DirectCast(equals.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents an XML document prologue option - version, encoding, standalone or
        ''' whitespace in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlDeclarationOption(value As XmlStringSyntax) As XmlDeclarationOptionSyntax
            Return Syntax.XmlDeclarationOption(Syntax.Token(SyntaxKind.XmlNameToken), Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents an XML element with content in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlElement(startTag As XmlElementStartTagSyntax, content As SyntaxList(of XmlNodeSyntax), endTag As XmlElementEndTagSyntax) As XmlElementSyntax
            if startTag Is Nothing Then
                Throw New ArgumentNullException("startTag")
            End If
            Select Case startTag.Kind
                Case SyntaxKind.XmlElementStartTag
                Case Else
                    Throw new ArgumentException("startTag")
             End Select
            if endTag Is Nothing Then
                Throw New ArgumentNullException("endTag")
            End If
            Select Case endTag.Kind
                Case SyntaxKind.XmlElementEndTag
                Case Else
                    Throw new ArgumentException("endTag")
             End Select
            Return New XmlElementSyntax(SyntaxKind.XmlElement, Nothing, Nothing, startTag, content.Node, endTag)
        End Function


        ''' <summary>
        ''' Represents an XML element with content in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlElement(startTag As XmlElementStartTagSyntax, endTag As XmlElementEndTagSyntax) As XmlElementSyntax
            Return Syntax.XmlElement(startTag, Nothing, endTag)
        End Function


        ''' <summary>
        ''' Represents Xml text.
        ''' </summary>
        ''' <param name="textTokens">
        ''' A list of all the text tokens in the Xml text. This list always contains at
        ''' least one token.
        ''' </param>
        Public Shared Function XmlText(textTokens As SyntaxTokenList) As XmlTextSyntax
            Return New XmlTextSyntax(SyntaxKind.XmlText, Nothing, Nothing, textTokens.Node)
        End Function


        ''' <summary>
        ''' Represents Xml text.
        ''' </summary>
        Public Shared Function XmlText() As XmlTextSyntax
            Return Syntax.XmlText(Syntax.Token(SyntaxKind.XmlTextLiteralToken))
        End Function


        ''' <summary>
        ''' Represents the start tag of an XML element of the form &lt;element&gt;.
        ''' </summary>
        Public Shared Function XmlElementStartTag(lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax), greaterThanToken As SyntaxToken) As XmlElementStartTagSyntax
            Select Case lessThanToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("lessThanToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlEmbeddedExpression
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case greaterThanToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("greaterThanToken")
             End Select
            Return New XmlElementStartTagSyntax(SyntaxKind.XmlElementStartTag, Nothing, Nothing, DirectCast(lessThanToken.Node, InternalSyntax.PunctuationSyntax), name, attributes.Node, DirectCast(greaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the start tag of an XML element of the form &lt;element&gt;.
        ''' </summary>
        Public Shared Function XmlElementStartTag(name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax)) As XmlElementStartTagSyntax
            Return Syntax.XmlElementStartTag(Syntax.Token(SyntaxKind.LessThanToken), name, attributes, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents the start tag of an XML element of the form &lt;element&gt;.
        ''' </summary>
        Public Shared Function XmlElementStartTag(name As XmlNodeSyntax) As XmlElementStartTagSyntax
            Return Syntax.XmlElementStartTag(Syntax.Token(SyntaxKind.LessThanToken), name, Nothing, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents the end tag of an XML element of the form &lt;/element&gt;.
        ''' </summary>
        Public Shared Function XmlElementEndTag(lessThanSlashToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlElementEndTagSyntax
            Select Case lessThanSlashToken.Kind
                Case SyntaxKind.LessThanSlashToken
                Case Else
                    Throw new ArgumentException("lessThanSlashToken")
             End Select
            Select Case greaterThanToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("greaterThanToken")
             End Select
            Return New XmlElementEndTagSyntax(SyntaxKind.XmlElementEndTag, Nothing, Nothing, DirectCast(lessThanSlashToken.Node, InternalSyntax.PunctuationSyntax), name, DirectCast(greaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the end tag of an XML element of the form &lt;/element&gt;.
        ''' </summary>
        Public Shared Function XmlElementEndTag(name As XmlNameSyntax) As XmlElementEndTagSyntax
            Return Syntax.XmlElementEndTag(Syntax.Token(SyntaxKind.LessThanSlashToken), name, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents the end tag of an XML element of the form &lt;/element&gt;.
        ''' </summary>
        Public Shared Function XmlElementEndTag() As XmlElementEndTagSyntax
            Return Syntax.XmlElementEndTag(Syntax.Token(SyntaxKind.LessThanSlashToken), Nothing, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an empty XML element of the form &lt;element /&gt;
        ''' </summary>
        Public Shared Function XmlEmptyElement(lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax), slashGreaterThanToken As SyntaxToken) As XmlEmptyElementSyntax
            Select Case lessThanToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("lessThanToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlEmbeddedExpression
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case slashGreaterThanToken.Kind
                Case SyntaxKind.SlashGreaterThanToken
                Case Else
                    Throw new ArgumentException("slashGreaterThanToken")
             End Select
            Return New XmlEmptyElementSyntax(SyntaxKind.XmlEmptyElement, Nothing, Nothing, DirectCast(lessThanToken.Node, InternalSyntax.PunctuationSyntax), name, attributes.Node, DirectCast(slashGreaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an empty XML element of the form &lt;element /&gt;
        ''' </summary>
        Public Shared Function XmlEmptyElement(name As XmlNodeSyntax, attributes As SyntaxList(of XmlNodeSyntax)) As XmlEmptyElementSyntax
            Return Syntax.XmlEmptyElement(Syntax.Token(SyntaxKind.LessThanToken), name, attributes, Syntax.Token(SyntaxKind.SlashGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an empty XML element of the form &lt;element /&gt;
        ''' </summary>
        Public Shared Function XmlEmptyElement(name As XmlNodeSyntax) As XmlEmptyElementSyntax
            Return Syntax.XmlEmptyElement(Syntax.Token(SyntaxKind.LessThanToken), name, Nothing, Syntax.Token(SyntaxKind.SlashGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an XML attribute in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlAttribute(name As XmlNodeSyntax, equalsToken As SyntaxToken, value As XmlNodeSyntax) As XmlAttributeSyntax
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName,
                     SyntaxKind.XmlEmbeddedExpression
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.XmlString,
                     SyntaxKind.XmlEmbeddedExpression
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New XmlAttributeSyntax(SyntaxKind.XmlAttribute, Nothing, Nothing, name, DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents an XML attribute in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlAttribute(name As XmlNodeSyntax, value As XmlNodeSyntax) As XmlAttributeSyntax
            Return Syntax.XmlAttribute(name, Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents a string of XML characters embedded as the content of an XML
        ''' element.
        ''' </summary>
        Public Shared Function XmlString(startQuoteToken As SyntaxToken, textTokens As SyntaxTokenList, endQuoteToken As SyntaxToken) As XmlStringSyntax
            Select Case startQuoteToken.Kind
                Case SyntaxKind.DoubleQuoteToken:
                Case SyntaxKind.SingleQuoteToken
                Case Else
                    Throw new ArgumentException("startQuoteToken")
             End Select
            Select Case endQuoteToken.Kind
                Case SyntaxKind.DoubleQuoteToken:
                Case SyntaxKind.SingleQuoteToken
                Case Else
                    Throw new ArgumentException("endQuoteToken")
             End Select
            Return New XmlStringSyntax(SyntaxKind.XmlString, Nothing, Nothing, DirectCast(startQuoteToken.Node, InternalSyntax.PunctuationSyntax), textTokens.Node, DirectCast(endQuoteToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a string of XML characters embedded as the content of an XML
        ''' element.
        ''' </summary>
        Public Shared Function XmlString(startQuoteToken As SyntaxToken, endQuoteToken As SyntaxToken) As XmlStringSyntax
            Return Syntax.XmlString(startQuoteToken, Nothing, endQuoteToken)
        End Function


        ''' <summary>
        ''' Represents an XML name of the form 'name' or 'namespace:name' appearing in
        ''' source as part of an XML literal or member access expression or an XML
        ''' namespace import clause.
        ''' </summary>
        Public Shared Function XmlName(prefix As XmlPrefixSyntax, localName As SyntaxToken) As XmlNameSyntax
            Select Case localName.Kind
                Case SyntaxKind.XmlNameToken
                Case Else
                    Throw new ArgumentException("localName")
             End Select
            Return New XmlNameSyntax(SyntaxKind.XmlName, Nothing, Nothing, prefix, DirectCast(localName.Node, InternalSyntax.XmlNameTokenSyntax))
        End Function


        ''' <summary>
        ''' Represents an XML name of the form 'name' or 'namespace:name' appearing in
        ''' source as part of an XML literal or member access expression or an XML
        ''' namespace import clause.
        ''' </summary>
        Public Shared Function XmlName() As XmlNameSyntax
            Return Syntax.XmlName(Nothing, Syntax.Token(SyntaxKind.XmlNameToken))
        End Function


        ''' <summary>
        ''' Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
        ''' of an XML literal or member access expression or an XML namespace import
        ''' clause.
        ''' </summary>
        Public Shared Function XmlBracketedName(lessThanToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlBracketedNameSyntax
            Select Case lessThanToken.Kind
                Case SyntaxKind.LessThanToken
                Case Else
                    Throw new ArgumentException("lessThanToken")
             End Select
            if name Is Nothing Then
                Throw New ArgumentNullException("name")
            End If
            Select Case name.Kind
                Case SyntaxKind.XmlName
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case greaterThanToken.Kind
                Case SyntaxKind.GreaterThanToken
                Case Else
                    Throw new ArgumentException("greaterThanToken")
             End Select
            Return New XmlBracketedNameSyntax(SyntaxKind.XmlBracketedName, Nothing, Nothing, DirectCast(lessThanToken.Node, InternalSyntax.PunctuationSyntax), name, DirectCast(greaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
        ''' of an XML literal or member access expression or an XML namespace import
        ''' clause.
        ''' </summary>
        Public Shared Function XmlBracketedName(name As XmlNameSyntax) As XmlBracketedNameSyntax
            Return Syntax.XmlBracketedName(Syntax.Token(SyntaxKind.LessThanToken), name, Syntax.Token(SyntaxKind.GreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents and XML namespace prefix of the form 'prefix:' as in xml:ns="".
        ''' </summary>
        Public Shared Function XmlPrefix(name As SyntaxToken, colonToken As SyntaxToken) As XmlPrefixSyntax
            Select Case name.Kind
                Case SyntaxKind.XmlNameToken
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case colonToken.Kind
                Case SyntaxKind.ColonToken
                Case Else
                    Throw new ArgumentException("colonToken")
             End Select
            Return New XmlPrefixSyntax(SyntaxKind.XmlPrefix, Nothing, Nothing, DirectCast(name.Node, InternalSyntax.XmlNameTokenSyntax), DirectCast(colonToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents and XML namespace prefix of the form 'prefix:' as in xml:ns="".
        ''' </summary>
        Public Shared Function XmlPrefix() As XmlPrefixSyntax
            Return Syntax.XmlPrefix(Syntax.Token(SyntaxKind.XmlNameToken), Syntax.Token(SyntaxKind.ColonToken))
        End Function


        ''' <summary>
        ''' Represents an XML comment of the form &lt;-- Comment --&gt; appearing in an XML
        ''' literal expression.
        ''' </summary>
        Public Shared Function XmlComment(lessThanMinusMinusToken As SyntaxToken, textTokens As SyntaxTokenList, minusMinusGreaterThanToken As SyntaxToken) As XmlCommentSyntax
            Select Case lessThanMinusMinusToken.Kind
                Case SyntaxKind.LessThanMinusMinusToken
                Case Else
                    Throw new ArgumentException("lessThanMinusMinusToken")
             End Select
            Select Case minusMinusGreaterThanToken.Kind
                Case SyntaxKind.MinusMinusGreaterThanToken
                Case Else
                    Throw new ArgumentException("minusMinusGreaterThanToken")
             End Select
            Return New XmlCommentSyntax(SyntaxKind.XmlComment, Nothing, Nothing, DirectCast(lessThanMinusMinusToken.Node, InternalSyntax.PunctuationSyntax), textTokens.Node, DirectCast(minusMinusGreaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an XML comment of the form &lt;-- Comment --&gt; appearing in an XML
        ''' literal expression.
        ''' </summary>
        Public Shared Function XmlComment() As XmlCommentSyntax
            Return Syntax.XmlComment(Syntax.Token(SyntaxKind.LessThanMinusMinusToken), Syntax.Token(SyntaxKind.XmlTextLiteralToken), Syntax.Token(SyntaxKind.MinusMinusGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
        ''' XMLProcessingValue ?&gt;'.
        ''' </summary>
        Public Shared Function XmlProcessingInstruction(lessThanQuestionToken As SyntaxToken, name As SyntaxToken, textTokens As SyntaxTokenList, questionGreaterThanToken As SyntaxToken) As XmlProcessingInstructionSyntax
            Select Case lessThanQuestionToken.Kind
                Case SyntaxKind.LessThanQuestionToken
                Case Else
                    Throw new ArgumentException("lessThanQuestionToken")
             End Select
            Select Case name.Kind
                Case SyntaxKind.XmlNameToken
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case questionGreaterThanToken.Kind
                Case SyntaxKind.QuestionGreaterThanToken
                Case Else
                    Throw new ArgumentException("questionGreaterThanToken")
             End Select
            Return New XmlProcessingInstructionSyntax(SyntaxKind.XmlProcessingInstruction, Nothing, Nothing, DirectCast(lessThanQuestionToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(name.Node, InternalSyntax.XmlNameTokenSyntax), textTokens.Node, DirectCast(questionGreaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
        ''' XMLProcessingValue ?&gt;'.
        ''' </summary>
        Public Shared Function XmlProcessingInstruction() As XmlProcessingInstructionSyntax
            Return Syntax.XmlProcessingInstruction(Syntax.Token(SyntaxKind.LessThanQuestionToken), Syntax.Token(SyntaxKind.XmlNameToken), Syntax.Token(SyntaxKind.XmlTextLiteralToken), Syntax.Token(SyntaxKind.QuestionGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an XML CDATA section in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlCDataSection(beginCDataToken As SyntaxToken, textTokens As SyntaxTokenList, endCDataToken As SyntaxToken) As XmlCDataSectionSyntax
            Select Case beginCDataToken.Kind
                Case SyntaxKind.BeginCDataToken
                Case Else
                    Throw new ArgumentException("beginCDataToken")
             End Select
            Select Case endCDataToken.Kind
                Case SyntaxKind.EndCDataToken
                Case Else
                    Throw new ArgumentException("endCDataToken")
             End Select
            Return New XmlCDataSectionSyntax(SyntaxKind.XmlCDataSection, Nothing, Nothing, DirectCast(beginCDataToken.Node, InternalSyntax.PunctuationSyntax), textTokens.Node, DirectCast(endCDataToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an XML CDATA section in an XML literal expression.
        ''' </summary>
        Public Shared Function XmlCDataSection() As XmlCDataSectionSyntax
            Return Syntax.XmlCDataSection(Syntax.Token(SyntaxKind.BeginCDataToken), Syntax.Token(SyntaxKind.XmlTextLiteralToken), Syntax.Token(SyntaxKind.EndCDataToken))
        End Function


        ''' <summary>
        ''' Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
        ''' obj.Name =%&gt;&lt;/name&gt;'.
        ''' </summary>
        Public Shared Function XmlEmbeddedExpression(lessThanPercentEqualsToken As SyntaxToken, expression As ExpressionSyntax, percentGreaterThanToken As SyntaxToken) As XmlEmbeddedExpressionSyntax
            Select Case lessThanPercentEqualsToken.Kind
                Case SyntaxKind.LessThanPercentEqualsToken
                Case Else
                    Throw new ArgumentException("lessThanPercentEqualsToken")
             End Select
            if expression Is Nothing Then
                Throw New ArgumentNullException("expression")
            End If
            Select Case expression.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("expression")
             End Select
            Select Case percentGreaterThanToken.Kind
                Case SyntaxKind.PercentGreaterThanToken
                Case Else
                    Throw new ArgumentException("percentGreaterThanToken")
             End Select
            Return New XmlEmbeddedExpressionSyntax(SyntaxKind.XmlEmbeddedExpression, Nothing, Nothing, DirectCast(lessThanPercentEqualsToken.Node, InternalSyntax.PunctuationSyntax), expression, DirectCast(percentGreaterThanToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
        ''' obj.Name =%&gt;&lt;/name&gt;'.
        ''' </summary>
        Public Shared Function XmlEmbeddedExpression(expression As ExpressionSyntax) As XmlEmbeddedExpressionSyntax
            Return Syntax.XmlEmbeddedExpression(Syntax.Token(SyntaxKind.LessThanPercentEqualsToken), expression, Syntax.Token(SyntaxKind.PercentGreaterThanToken))
        End Function


        ''' <summary>
        ''' Represents an array type, such as "A() or "A(,)", without bounds specified for
        ''' the array.
        ''' </summary>
        ''' <param name="elementType">
        ''' The type of the elements of the array.
        ''' </param>
        ''' <param name="rankSpecifiers">
        ''' Represents the list of "()" or "(,,)" modifiers on the array type.
        ''' </param>
        Public Shared Function ArrayType(elementType As TypeSyntax, rankSpecifiers As SyntaxList(of ArrayRankSpecifierSyntax)) As ArrayTypeSyntax
            if elementType Is Nothing Then
                Throw New ArgumentNullException("elementType")
            End If
            Select Case elementType.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.NullableType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("elementType")
             End Select
            Return New ArrayTypeSyntax(SyntaxKind.ArrayType, Nothing, Nothing, elementType, rankSpecifiers.Node)
        End Function


        ''' <summary>
        ''' Represents an array type, such as "A() or "A(,)", without bounds specified for
        ''' the array.
        ''' </summary>
        ''' <param name="elementType">
        ''' The type of the elements of the array.
        ''' </param>
        Public Shared Function ArrayType(elementType As TypeSyntax) As ArrayTypeSyntax
            Return Syntax.ArrayType(elementType, Syntax.ArrayRankSpecifier())
        End Function


        ''' <summary>
        ''' A type name that represents a nullable type, such as "Integer?".
        ''' </summary>
        ''' <param name="elementType">
        ''' The kind of type that is this type is a nullable of. Cannot be an array type or
        ''' a nullable type.
        ''' </param>
        ''' <param name="questionMarkToken">
        ''' The "?" token.
        ''' </param>
        Public Shared Function NullableType(elementType As TypeSyntax, questionMarkToken As SyntaxToken) As NullableTypeSyntax
            if elementType Is Nothing Then
                Throw New ArgumentNullException("elementType")
            End If
            Select Case elementType.Kind
                Case SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("elementType")
             End Select
            Select Case questionMarkToken.Kind
                Case SyntaxKind.QuestionToken
                Case Else
                    Throw new ArgumentException("questionMarkToken")
             End Select
            Return New NullableTypeSyntax(SyntaxKind.NullableType, Nothing, Nothing, elementType, DirectCast(questionMarkToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' A type name that represents a nullable type, such as "Integer?".
        ''' </summary>
        ''' <param name="elementType">
        ''' The kind of type that is this type is a nullable of. Cannot be an array type or
        ''' a nullable type.
        ''' </param>
        Public Shared Function NullableType(elementType As TypeSyntax) As NullableTypeSyntax
            Return Syntax.NullableType(elementType, Syntax.Token(SyntaxKind.QuestionToken))
        End Function


        ''' <summary>
        ''' Represents an occurrence of a Visual Basic built-in type such as Integer or
        ''' String in source code.
        ''' </summary>
        ''' <param name="keyword">
        ''' The keyword that was used to describe the built-in type.
        ''' </param>
        Public Shared Function PredefinedType(keyword As SyntaxToken) As PredefinedTypeSyntax
            Select Case keyword.Kind
                Case SyntaxKind.ObjectKeyword:
                Case SyntaxKind.BooleanKeyword:
                Case SyntaxKind.DateKeyword:
                Case SyntaxKind.CharKeyword:
                Case SyntaxKind.StringKeyword:
                Case SyntaxKind.DecimalKeyword:
                Case SyntaxKind.ByteKeyword:
                Case SyntaxKind.SByteKeyword:
                Case SyntaxKind.UShortKeyword:
                Case SyntaxKind.ShortKeyword:
                Case SyntaxKind.UIntegerKeyword:
                Case SyntaxKind.IntegerKeyword:
                Case SyntaxKind.ULongKeyword:
                Case SyntaxKind.LongKeyword:
                Case SyntaxKind.SingleKeyword:
                Case SyntaxKind.DoubleKeyword
                Case Else
                    Throw new ArgumentException("keyword")
             End Select
            Return New PredefinedTypeSyntax(SyntaxKind.PredefinedType, Nothing, Nothing, DirectCast(keyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a type name consisting of a single identifier (which might include
        ''' brackets or a type character).
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier in the name.
        ''' </param>
        Public Shared Function IdentifierName(identifier As SyntaxToken) As IdentifierNameSyntax
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            Return New IdentifierNameSyntax(SyntaxKind.IdentifierName, Nothing, Nothing, DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax))
        End Function


        ''' <summary>
        ''' Represents a type name consisting of a single identifier (which might include
        ''' brackets or a type character).
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier in the name.
        ''' </param>
        Public Shared Function IdentifierName(identifier As String) As IdentifierNameSyntax
            Return Syntax.IdentifierName(Syntax.Identifier(identifier))
        End Function


        ''' <summary>
        ''' Represents a simple type name with one or more generic arguments, such as "X(Of
        ''' Y, Z).
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier in the name.
        ''' </param>
        ''' <param name="typeArgumentList">
        ''' The generic argument list.
        ''' </param>
        Public Shared Function GenericName(identifier As SyntaxToken, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax
            Select Case identifier.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("identifier")
             End Select
            if typeArgumentList Is Nothing Then
                Throw New ArgumentNullException("typeArgumentList")
            End If
            Select Case typeArgumentList.Kind
                Case SyntaxKind.TypeArgumentList
                Case Else
                    Throw new ArgumentException("typeArgumentList")
             End Select
            Return New GenericNameSyntax(SyntaxKind.GenericName, Nothing, Nothing, DirectCast(identifier.Node, InternalSyntax.IdentifierTokenSyntax), typeArgumentList)
        End Function


        ''' <summary>
        ''' Represents a simple type name with one or more generic arguments, such as "X(Of
        ''' Y, Z).
        ''' </summary>
        ''' <param name="identifier">
        ''' The identifier in the name.
        ''' </param>
        ''' <param name="typeArgumentList">
        ''' The generic argument list.
        ''' </param>
        Public Shared Function GenericName(identifier As String, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax
            Return Syntax.GenericName(Syntax.Identifier(identifier), typeArgumentList)
        End Function


        ''' <summary>
        ''' Represents a qualified type name, for example X.Y or X(Of Z).Y.
        ''' </summary>
        ''' <param name="left">
        ''' The part of the name that appears to the left of the dot. This can itself be
        ''' any name.
        ''' </param>
        ''' <param name="dotToken">
        ''' The "." token that separates the names.
        ''' </param>
        ''' <param name="right">
        ''' The part of the name that appears to the right of the dot. This must be a
        ''' simple identifier.
        ''' </param>
        Public Shared Function QualifiedName(left As NameSyntax, dotToken As SyntaxToken, right As SimpleNameSyntax) As QualifiedNameSyntax
            if left Is Nothing Then
                Throw New ArgumentNullException("left")
            End If
            Select Case left.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("left")
             End Select
            Select Case dotToken.Kind
                Case SyntaxKind.DotToken
                Case Else
                    Throw new ArgumentException("dotToken")
             End Select
            if right Is Nothing Then
                Throw New ArgumentNullException("right")
            End If
            Select Case right.Kind
                Case SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName
                Case Else
                    Throw new ArgumentException("right")
             End Select
            Return New QualifiedNameSyntax(SyntaxKind.QualifiedName, Nothing, Nothing, left, DirectCast(dotToken.Node, InternalSyntax.PunctuationSyntax), right)
        End Function


        ''' <summary>
        ''' Represents a qualified type name, for example X.Y or X(Of Z).Y.
        ''' </summary>
        ''' <param name="left">
        ''' The part of the name that appears to the left of the dot. This can itself be
        ''' any name.
        ''' </param>
        ''' <param name="right">
        ''' The part of the name that appears to the right of the dot. This must be a
        ''' simple identifier.
        ''' </param>
        Public Shared Function QualifiedName(left As NameSyntax, right As SimpleNameSyntax) As QualifiedNameSyntax
            Return Syntax.QualifiedName(left, Syntax.Token(SyntaxKind.DotToken), right)
        End Function


        ''' <summary>
        ''' Represents a name in the global namespace.
        ''' </summary>
        ''' <param name="globalKeyword">
        ''' The "Global" keyword.
        ''' </param>
        Public Shared Function GlobalName(globalKeyword As SyntaxToken) As GlobalNameSyntax
            Select Case globalKeyword.Kind
                Case SyntaxKind.GlobalKeyword
                Case Else
                    Throw new ArgumentException("globalKeyword")
             End Select
            Return New GlobalNameSyntax(SyntaxKind.GlobalName, Nothing, Nothing, DirectCast(globalKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents a name in the global namespace.
        ''' </summary>
        Public Shared Function GlobalName() As GlobalNameSyntax
            Return Syntax.GlobalName(Syntax.Token(SyntaxKind.GlobalKeyword))
        End Function


        ''' <summary>
        ''' Represents a parenthesized list of generic type arguments.
        ''' </summary>
        ''' <param name="openParenToken">
        ''' The "(" token.
        ''' </param>
        ''' <param name="ofKeyword">
        ''' The "Of" keyword.
        ''' </param>
        ''' <param name="arguments">
        ''' A list of all the type arguments.
        ''' </param>
        ''' <param name="closeParenToken">
        ''' The ")" token.
        ''' </param>
        Public Shared Function TypeArgumentList(openParenToken As SyntaxToken, ofKeyword As SyntaxToken, arguments As SeparatedSyntaxList(Of TypeSyntax), closeParenToken As SyntaxToken) As TypeArgumentListSyntax
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case ofKeyword.Kind
                Case SyntaxKind.OfKeyword
                Case Else
                    Throw new ArgumentException("ofKeyword")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New TypeArgumentListSyntax(SyntaxKind.TypeArgumentList, Nothing, Nothing, DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(ofKeyword.Node, InternalSyntax.KeywordSyntax), arguments.Node, DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents a parenthesized list of generic type arguments.
        ''' </summary>
        ''' <param name="arguments">
        ''' A list of all the type arguments.
        ''' </param>
        Public Shared Function TypeArgumentList(arguments As SeparatedSyntaxList(Of TypeSyntax)) As TypeArgumentListSyntax
            Return Syntax.TypeArgumentList(Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.OfKeyword), arguments, Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents a parenthesized list of generic type arguments.
        ''' </summary>
        ''' <param name="arguments">
        ''' A list of all the type arguments.
        ''' </param>
        Public Shared Function TypeArgumentList(ParamArray arguments As TypeSyntax()) As TypeArgumentListSyntax
            Return Syntax.TypeArgumentList(Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.OfKeyword), Syntax.SeparatedList(Of TypeSyntax)().Add(SyntaxKind.CommaToken, arguments), Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents an Xml NCName per Namespaces in XML 1.0
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function XmlNameToken(text as String, possibleKeywordKind As SyntaxKind, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.XmlNameTokenSyntax(SyntaxKind.XmlNameToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, possibleKeywordKind), 0, 0)
        End Function


        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function XmlTextLiteralToken(text as String, value As String, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.XmlTextTokenSyntax(SyntaxKind.XmlTextLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function XmlEntityLiteralToken(text as String, value As String, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.XmlTextTokenSyntax(SyntaxKind.XmlEntityLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function DocCommentLineBreakToken(text as String, value As String, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.XmlTextTokenSyntax(SyntaxKind.DocCommentLineBreakToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents character data in Xml content also known as PCData or in an Xml
        ''' attribute value. All text is here for now even text that does not need
        ''' normalization such as comment, pi and cdata text.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of XmlTextTokenSyntax.
        ''' One of XmlTextLiteralToken, XmlEntityLiteralToken, DocCommentLineBreakToken.
        ''' </param>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function XmlTextToken(ByVal kind As SyntaxKind, text as String, value As String, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            If Not kind.IsXmlTextToken Then
                Throw New ArgumentException("kind")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.XmlTextTokenSyntax(kind, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents a Decimal literal token.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function DecimalLiteralToken(text as String, typeSuffix As TypeCharacter, value As System.Decimal, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.DecimalLiteralTokenSyntax(SyntaxKind.DecimalLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, typeSuffix, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents an Date literal token.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function DateLiteralToken(text as String, value As DateTime, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.DateLiteralTokenSyntax(SyntaxKind.DateLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents an string literal token.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function StringLiteralToken(text as String, value As String, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.StringLiteralTokenSyntax(SyntaxKind.StringLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents an string literal token.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function CharacterLiteralToken(text as String, value As Char, Optional leadingTrivia As SyntaxTriviaList = Nothing, Optional trailingTrivia As SyntaxTriviaList = Nothing) As SyntaxToken
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxToken(Nothing, New InternalSyntax.CharacterLiteralTokenSyntax(SyntaxKind.CharacterLiteralToken, Nothing, Nothing, text, leadingTrivia.Node, trailingTrivia.Node, value), 0, 0)
        End Function


        ''' <summary>
        ''' Represents tokens that were skipped by the parser as part of error recovery,
        ''' and thus are not part of any syntactic structure.
        ''' </summary>
        ''' <param name="tokens">
        ''' The list of tokens that were skipped by the parser.
        ''' </param>
        Public Shared Function SkippedTokens(tokens As SyntaxTokenList) As SkippedTokensSyntax
            Return New SkippedTokensSyntax(SyntaxKind.SkippedTokens, Nothing, Nothing, tokens.Node)
        End Function


        ''' <summary>
        ''' Represents tokens that were skipped by the parser as part of error recovery,
        ''' and thus are not part of any syntactic structure.
        ''' </summary>
        Public Shared Function SkippedTokens() As SkippedTokensSyntax
            Return Syntax.SkippedTokens(Nothing)
        End Function


        ''' <summary>
        ''' Represents a documentation comment e.g. ''' &lt;Summary&gt; apearing in source.
        ''' </summary>
        Public Shared Function DocumentationComment(content As SyntaxList(of XmlNodeSyntax)) As DocumentationCommentSyntax
            Return New DocumentationCommentSyntax(SyntaxKind.DocumentationComment, Nothing, Nothing, content.Node)
        End Function


        ''' <summary>
        ''' Represents a documentation comment e.g. ''' &lt;Summary&gt; apearing in source.
        ''' </summary>
        Public Shared Function DocumentationComment() As DocumentationCommentSyntax
            Return Syntax.DocumentationComment(Nothing)
        End Function


        ''' <summary>
        ''' Represents a preprocessor directive
        ''' </summary>
        ''' <param name="terminator">
        ''' The statement terminator token that ended the Directive.
        ''' </param>
        Public Shared Function Directive(directiveParameter As DirectiveStatementSyntax, terminator As SyntaxToken) As DirectiveSyntax
            if directiveParameter Is Nothing Then
                Throw New ArgumentNullException("directiveParameter")
            End If
            Select Case directiveParameter.Kind
                Case SyntaxKind.ConstDirective,
                     SyntaxKind.IfDirective,
                     SyntaxKind.ElseIfDirective,
                     SyntaxKind.ElseDirective,
                     SyntaxKind.EndIfDirective
                Case Else
                    Throw new ArgumentException("directiveParameter")
             End Select
            Select Case terminator.Kind
                Case SyntaxKind.StatementTerminatorToken:
                Case SyntaxKind.EndOfFileToken
                Case Else
                    Throw new ArgumentException("terminator")
             End Select
            Return New DirectiveSyntax(SyntaxKind.Directive, Nothing, Nothing, directiveParameter, DirectCast(terminator.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function WhitespaceTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.WhitespaceTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function EndOfLineTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.EndOfLineTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function ColonTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.ColonTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function CommentTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.CommentTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function LineContinuationTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.LineContinuationTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function ImplicitLineContinuationTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.ImplicitLineContinuationTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function DocumentationCommentExteriorTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.DocumentationCommentExteriorTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function DisabledTextTrivia(text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(SyntaxKind.DisabledTextTrivia, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Trivia nodes represents parts of the program text that are not parts of the
        ''' syntactic grammar, such as spaces, newlines, comments, preprocessors
        ''' directives, and disabled code.
        ''' </summary>
        ''' <param name="kind">
        ''' A <cref c="SyntaxKind"/> representing the specific kind of SyntaxTrivia. One of
        ''' WhitespaceTrivia, EndOfLineTrivia, ColonTrivia, CommentTrivia,
        ''' LineContinuationTrivia, ImplicitLineContinuationTrivia,
        ''' DocumentationCommentExteriorTrivia, DisabledTextTrivia.
        ''' </param>
        ''' <param name="text">
        ''' The actual text of this token.
        ''' </param>
        Public Shared Function SyntaxTrivia(ByVal kind As SyntaxKind, text as String) As SyntaxTrivia
            if text Is Nothing Then
                Throw New ArgumentNullException("text")
            End If
            If Not kind.IsSyntaxTrivia Then
                Throw New ArgumentException("kind")
            End If
            Return New SyntaxTrivia(Nothing, New InternalSyntax.SyntaxTrivia(kind, Nothing, Nothing, text), 0, 0)
        End Function


        ''' <summary>
        ''' Represents a #Const pre-processing constant declaration appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        ''' <param name="constKeyword">
        ''' The "Const" keyword.
        ''' </param>
        ''' <param name="name">
        ''' The name of the pre-processing constant being defined.
        ''' </param>
        ''' <param name="equalsToken">
        ''' The "=" token.
        ''' </param>
        ''' <param name="value">
        ''' An expression representing the value of the pre-processing constant being
        ''' defined.
        ''' </param>
        Public Shared Function ConstDirective(hashToken As SyntaxToken, constKeyword As SyntaxToken, name As SyntaxToken, equalsToken As SyntaxToken, value As ExpressionSyntax) As ConstDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case constKeyword.Kind
                Case SyntaxKind.ConstKeyword
                Case Else
                    Throw new ArgumentException("constKeyword")
             End Select
            Select Case name.Kind
                Case SyntaxKind.IdentifierToken
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Select Case equalsToken.Kind
                Case SyntaxKind.EqualsToken
                Case Else
                    Throw new ArgumentException("equalsToken")
             End Select
            if value Is Nothing Then
                Throw New ArgumentNullException("value")
            End If
            Select Case value.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("value")
             End Select
            Return New ConstDirectiveSyntax(SyntaxKind.ConstDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(constKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(name.Node, InternalSyntax.IdentifierTokenSyntax), DirectCast(equalsToken.Node, InternalSyntax.PunctuationSyntax), value)
        End Function


        ''' <summary>
        ''' Represents a #Const pre-processing constant declaration appearing in source.
        ''' </summary>
        ''' <param name="name">
        ''' The name of the pre-processing constant being defined.
        ''' </param>
        ''' <param name="value">
        ''' An expression representing the value of the pre-processing constant being
        ''' defined.
        ''' </param>
        Public Shared Function ConstDirective(name As SyntaxToken, value As ExpressionSyntax) As ConstDirectiveSyntax
            Return Syntax.ConstDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ConstKeyword), name, Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents a #Const pre-processing constant declaration appearing in source.
        ''' </summary>
        ''' <param name="name">
        ''' The name of the pre-processing constant being defined.
        ''' </param>
        ''' <param name="value">
        ''' An expression representing the value of the pre-processing constant being
        ''' defined.
        ''' </param>
        Public Shared Function ConstDirective(name As String, value As ExpressionSyntax) As ConstDirectiveSyntax
            Return Syntax.ConstDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ConstKeyword), Syntax.Identifier(name), Syntax.Token(SyntaxKind.EqualsToken), value)
        End Function


        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function IfDirective(hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case ifOrElseIfKeyword.Kind
                Case SyntaxKind.IfKeyword:
                Case SyntaxKind.ElseIfKeyword
                Case Else
                    Throw new ArgumentException("ifOrElseIfKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New IfDirectiveSyntax(SyntaxKind.IfDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(ifOrElseIfKeyword.Node, InternalSyntax.KeywordSyntax), condition, DirectCast(thenKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        Public Shared Function IfDirective(ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfDirectiveSyntax
            Return Syntax.IfDirective(Syntax.Token(SyntaxKind.HashToken), Nothing, ifOrElseIfKeyword, condition, Nothing)
        End Function


        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function ElseIfDirective(hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case ifOrElseIfKeyword.Kind
                Case SyntaxKind.IfKeyword:
                Case SyntaxKind.ElseIfKeyword
                Case Else
                    Throw new ArgumentException("ifOrElseIfKeyword")
             End Select
            if condition Is Nothing Then
                Throw New ArgumentNullException("condition")
            End If
            Select Case condition.Kind
                Case SyntaxKind.IdentifierLabel,
                     SyntaxKind.NumericLabel,
                     SyntaxKind.NextLabel,
                     SyntaxKind.CharacterLiteralExpression,
                     SyntaxKind.TrueLiteralExpression,
                     SyntaxKind.FalseLiteralExpression,
                     SyntaxKind.NumericLiteralExpression,
                     SyntaxKind.DateLiteralExpression,
                     SyntaxKind.StringLiteralExpression,
                     SyntaxKind.NothingLiteralExpression,
                     SyntaxKind.ParenthesizedExpression,
                     SyntaxKind.MeExpression,
                     SyntaxKind.MyBaseExpression,
                     SyntaxKind.MyClassExpression,
                     SyntaxKind.GetTypeExpression,
                     SyntaxKind.TypeOfIsExpression,
                     SyntaxKind.TypeOfIsNotExpression,
                     SyntaxKind.GetXmlNamespaceExpression,
                     SyntaxKind.MemberAccessExpression,
                     SyntaxKind.DictionaryAccess,
                     SyntaxKind.XmlElementAccessExpression,
                     SyntaxKind.XmlDescendantAccessExpression,
                     SyntaxKind.XmlAttributeAccessExpression,
                     SyntaxKind.InvocationExpression,
                     SyntaxKind.ObjectCreationExpression,
                     SyntaxKind.AnonymousObjectCreationExpression,
                     SyntaxKind.ArrayCreationExpression,
                     SyntaxKind.CollectionInitializer,
                     SyntaxKind.CTypeExpression,
                     SyntaxKind.DirectCastExpression,
                     SyntaxKind.TryCastExpression,
                     SyntaxKind.PredefinedCastExpression,
                     SyntaxKind.AddExpression,
                     SyntaxKind.SubtractExpression,
                     SyntaxKind.MultiplyExpression,
                     SyntaxKind.DivideExpression,
                     SyntaxKind.IntegerDivideExpression,
                     SyntaxKind.PowerExpression,
                     SyntaxKind.LeftShiftExpression,
                     SyntaxKind.RightShiftExpression,
                     SyntaxKind.ConcatenateExpression,
                     SyntaxKind.ModuloExpression,
                     SyntaxKind.EqualsExpression,
                     SyntaxKind.NotEqualsExpression,
                     SyntaxKind.LessThanExpression,
                     SyntaxKind.LessThanOrEqualExpression,
                     SyntaxKind.GreaterThanOrEqualExpression,
                     SyntaxKind.GreaterThanExpression,
                     SyntaxKind.IsExpression,
                     SyntaxKind.IsNotExpression,
                     SyntaxKind.LikeExpression,
                     SyntaxKind.OrExpression,
                     SyntaxKind.XorExpression,
                     SyntaxKind.AndExpression,
                     SyntaxKind.OrElseExpression,
                     SyntaxKind.AndAlsoExpression,
                     SyntaxKind.PlusExpression,
                     SyntaxKind.NegateExpression,
                     SyntaxKind.NotExpression,
                     SyntaxKind.AddressOfExpression,
                     SyntaxKind.BinaryConditionalExpression,
                     SyntaxKind.TernaryConditionalExpression,
                     SyntaxKind.SingleLineFunctionLambdaExpression,
                     SyntaxKind.SingleLineSubLambdaExpression,
                     SyntaxKind.MultiLineFunctionLambdaExpression,
                     SyntaxKind.MultiLineSubLambdaExpression,
                     SyntaxKind.QueryExpression,
                     SyntaxKind.FunctionAggregation,
                     SyntaxKind.GroupAggregation,
                     SyntaxKind.XmlDocument,
                     SyntaxKind.XmlElement,
                     SyntaxKind.XmlText,
                     SyntaxKind.XmlElementStartTag,
                     SyntaxKind.XmlElementEndTag,
                     SyntaxKind.XmlEmptyElement,
                     SyntaxKind.XmlAttribute,
                     SyntaxKind.XmlString,
                     SyntaxKind.XmlName,
                     SyntaxKind.XmlBracketedName,
                     SyntaxKind.XmlComment,
                     SyntaxKind.XmlProcessingInstruction,
                     SyntaxKind.XmlCDataSection,
                     SyntaxKind.XmlEmbeddedExpression,
                     SyntaxKind.ArrayType,
                     SyntaxKind.NullableType,
                     SyntaxKind.PredefinedType,
                     SyntaxKind.IdentifierName,
                     SyntaxKind.GenericName,
                     SyntaxKind.QualifiedName,
                     SyntaxKind.GlobalName
                Case Else
                    Throw new ArgumentException("condition")
             End Select
            Return New IfDirectiveSyntax(SyntaxKind.ElseIfDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(ifOrElseIfKeyword.Node, InternalSyntax.KeywordSyntax), condition, DirectCast(thenKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents the beginning of an #If pre-processing directive appearing in
        ''' source.
        ''' </summary>
        Public Shared Function ElseIfDirective(ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfDirectiveSyntax
            Return Syntax.ElseIfDirective(Syntax.Token(SyntaxKind.HashToken), Nothing, ifOrElseIfKeyword, condition, Nothing)
        End Function


        ''' <summary>
        ''' Represents an #Else pre-processing directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function ElseDirective(hashToken As SyntaxToken, elseKeyword As SyntaxToken) As ElseDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case elseKeyword.Kind
                Case SyntaxKind.ElseKeyword
                Case Else
                    Throw new ArgumentException("elseKeyword")
             End Select
            Return New ElseDirectiveSyntax(SyntaxKind.ElseDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(elseKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an #Else pre-processing directive appearing in source.
        ''' </summary>
        Public Shared Function ElseDirective() As ElseDirectiveSyntax
            Return Syntax.ElseDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ElseKeyword))
        End Function


        ''' <summary>
        ''' Represents an #End If pre-processing directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function EndIfDirective(hashToken As SyntaxToken, endKeyword As SyntaxToken, ifKeyword As SyntaxToken) As EndIfDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case ifKeyword.Kind
                Case SyntaxKind.IfKeyword
                Case Else
                    Throw new ArgumentException("ifKeyword")
             End Select
            Return New EndIfDirectiveSyntax(SyntaxKind.EndIfDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(ifKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an #End If pre-processing directive appearing in source.
        ''' </summary>
        Public Shared Function EndIfDirective() As EndIfDirectiveSyntax
            Return Syntax.EndIfDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.IfKeyword))
        End Function


        ''' <summary>
        ''' Represents the beginning of a #Region directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        ''' <param name="regionKeyword">
        ''' The "Region" keyword.
        ''' </param>
        ''' <param name="name">
        ''' The label of the code region being defined.
        ''' </param>
        Public Shared Function RegionDirective(hashToken As SyntaxToken, regionKeyword As SyntaxToken, name As SyntaxToken) As RegionDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case regionKeyword.Kind
                Case SyntaxKind.RegionKeyword
                Case Else
                    Throw new ArgumentException("regionKeyword")
             End Select
            Select Case name.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("name")
             End Select
            Return New RegionDirectiveSyntax(SyntaxKind.RegionDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(regionKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(name.Node, InternalSyntax.StringLiteralTokenSyntax))
        End Function


        ''' <summary>
        ''' Represents the beginning of a #Region directive appearing in source.
        ''' </summary>
        Public Shared Function RegionDirective() As RegionDirectiveSyntax
            Return Syntax.RegionDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.RegionKeyword), Syntax.Token(SyntaxKind.StringLiteralToken))
        End Function


        ''' <summary>
        ''' Represents an #End Region directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        ''' <param name="endKeyword">
        ''' The "End" keyword.
        ''' </param>
        ''' <param name="regionKeyword">
        ''' The "Region" keyword.
        ''' </param>
        Public Shared Function EndRegionDirective(hashToken As SyntaxToken, endKeyword As SyntaxToken, regionKeyword As SyntaxToken) As EndRegionDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case regionKeyword.Kind
                Case SyntaxKind.RegionKeyword
                Case Else
                    Throw new ArgumentException("regionKeyword")
             End Select
            Return New EndRegionDirectiveSyntax(SyntaxKind.EndRegionDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(regionKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an #End Region directive appearing in source.
        ''' </summary>
        Public Shared Function EndRegionDirective() As EndRegionDirectiveSyntax
            Return Syntax.EndRegionDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.RegionKeyword))
        End Function


        ''' <summary>
        ''' Represents the beginning of a #ExternalSource pre-processing directive
        ''' appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function ExternalSourceDirective(hashToken As SyntaxToken, externalSourceKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, commaToken As SyntaxToken, lineStart As SyntaxToken, closeParenToken As SyntaxToken) As ExternalSourceDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case externalSourceKeyword.Kind
                Case SyntaxKind.ExternalSourceKeyword
                Case Else
                    Throw new ArgumentException("externalSourceKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case externalSource.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("externalSource")
             End Select
            Select Case commaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("commaToken")
             End Select
            Select Case lineStart.Kind
                Case SyntaxKind.IntegerLiteralToken
                Case Else
                    Throw new ArgumentException("lineStart")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ExternalSourceDirectiveSyntax(SyntaxKind.ExternalSourceDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(externalSourceKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(externalSource.Node, InternalSyntax.StringLiteralTokenSyntax), DirectCast(commaToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(lineStart.Node, InternalSyntax.IntegerLiteralTokenSyntax), DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents the beginning of a #ExternalSource pre-processing directive
        ''' appearing in source.
        ''' </summary>
        Public Shared Function ExternalSourceDirective() As ExternalSourceDirectiveSyntax
            Return Syntax.ExternalSourceDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ExternalSourceKeyword), Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.StringLiteralToken), Syntax.Token(SyntaxKind.CommaToken), Syntax.Token(SyntaxKind.IntegerLiteralToken), Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents an #End ExternalSource pre-processing directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function EndExternalSourceDirective(hashToken As SyntaxToken, endKeyword As SyntaxToken, externalSourceKeyword As SyntaxToken) As EndExternalSourceDirective
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case endKeyword.Kind
                Case SyntaxKind.EndKeyword
                Case Else
                    Throw new ArgumentException("endKeyword")
             End Select
            Select Case externalSourceKeyword.Kind
                Case SyntaxKind.ExternalSourceKeyword
                Case Else
                    Throw new ArgumentException("externalSourceKeyword")
             End Select
            Return New EndExternalSourceDirective(SyntaxKind.EndExternalSourceDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(endKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(externalSourceKeyword.Node, InternalSyntax.KeywordSyntax))
        End Function


        ''' <summary>
        ''' Represents an #End ExternalSource pre-processing directive appearing in source.
        ''' </summary>
        Public Shared Function EndExternalSourceDirective() As EndExternalSourceDirective
            Return Syntax.EndExternalSourceDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.EndKeyword), Syntax.Token(SyntaxKind.ExternalSourceKeyword))
        End Function


        ''' <summary>
        ''' Represents an #ExternalChecksum pre-processing directive appearing in source.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function ExternalChecksumDirective(hashToken As SyntaxToken, externalChecksumKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, firstCommaToken As SyntaxToken, guid As SyntaxToken, secondCommaToken As SyntaxToken, checksum As SyntaxToken, closeParenToken As SyntaxToken) As ExternalChecksumDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case externalChecksumKeyword.Kind
                Case SyntaxKind.ExternalChecksumKeyword
                Case Else
                    Throw new ArgumentException("externalChecksumKeyword")
             End Select
            Select Case openParenToken.Kind
                Case SyntaxKind.OpenParenToken
                Case Else
                    Throw new ArgumentException("openParenToken")
             End Select
            Select Case externalSource.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("externalSource")
             End Select
            Select Case firstCommaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("firstCommaToken")
             End Select
            Select Case guid.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("guid")
             End Select
            Select Case secondCommaToken.Kind
                Case SyntaxKind.CommaToken
                Case Else
                    Throw new ArgumentException("secondCommaToken")
             End Select
            Select Case checksum.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("checksum")
             End Select
            Select Case closeParenToken.Kind
                Case SyntaxKind.CloseParenToken
                Case Else
                    Throw new ArgumentException("closeParenToken")
             End Select
            Return New ExternalChecksumDirectiveSyntax(SyntaxKind.ExternalChecksumDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(externalChecksumKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(openParenToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(externalSource.Node, InternalSyntax.StringLiteralTokenSyntax), DirectCast(firstCommaToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(guid.Node, InternalSyntax.StringLiteralTokenSyntax), DirectCast(secondCommaToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(checksum.Node, InternalSyntax.StringLiteralTokenSyntax), DirectCast(closeParenToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an #ExternalChecksum pre-processing directive appearing in source.
        ''' </summary>
        Public Shared Function ExternalChecksumDirective() As ExternalChecksumDirectiveSyntax
            Return Syntax.ExternalChecksumDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ExternalChecksumKeyword), Syntax.Token(SyntaxKind.OpenParenToken), Syntax.Token(SyntaxKind.StringLiteralToken), Syntax.Token(SyntaxKind.CommaToken), Syntax.Token(SyntaxKind.StringLiteralToken), Syntax.Token(SyntaxKind.CommaToken), Syntax.Token(SyntaxKind.StringLiteralToken), Syntax.Token(SyntaxKind.CloseParenToken))
        End Function


        ''' <summary>
        ''' Represents an #r directive appearing in scripts.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function ReferenceDirective(hashToken As SyntaxToken, referenceKeyword As SyntaxToken, file As SyntaxToken) As ReferenceDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Select Case referenceKeyword.Kind
                Case SyntaxKind.ReferenceKeyword
                Case Else
                    Throw new ArgumentException("referenceKeyword")
             End Select
            Select Case file.Kind
                Case SyntaxKind.StringLiteralToken
                Case Else
                    Throw new ArgumentException("file")
             End Select
            Return New ReferenceDirectiveSyntax(SyntaxKind.ReferenceDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax), DirectCast(referenceKeyword.Node, InternalSyntax.KeywordSyntax), DirectCast(file.Node, InternalSyntax.StringLiteralTokenSyntax))
        End Function


        ''' <summary>
        ''' Represents an #r directive appearing in scripts.
        ''' </summary>
        Public Shared Function ReferenceDirective() As ReferenceDirectiveSyntax
            Return Syntax.ReferenceDirective(Syntax.Token(SyntaxKind.HashToken), Syntax.Token(SyntaxKind.ReferenceKeyword), Syntax.Token(SyntaxKind.StringLiteralToken))
        End Function


        ''' <summary>
        ''' Represents an unrecognized pre-processing directive. This occurs when the
        ''' parser encounters a hash '#' token at the beginning of a physical line but does
        ''' recognize the text that follows as a valid Visual Basic pre-processing
        ''' directive.
        ''' </summary>
        ''' <param name="hashToken">
        ''' The "#" token in a preprocessor directive.
        ''' </param>
        Public Shared Function BadDirective(hashToken As SyntaxToken) As BadDirectiveSyntax
            Select Case hashToken.Kind
                Case SyntaxKind.HashToken
                Case Else
                    Throw new ArgumentException("hashToken")
             End Select
            Return New BadDirectiveSyntax(SyntaxKind.BadDirective, Nothing, Nothing, DirectCast(hashToken.Node, InternalSyntax.PunctuationSyntax))
        End Function


        ''' <summary>
        ''' Represents an unrecognized pre-processing directive. This occurs when the
        ''' parser encounters a hash '#' token at the beginning of a physical line but does
        ''' recognize the text that follows as a valid Visual Basic pre-processing
        ''' directive.
        ''' </summary>
        Public Shared Function BadDirective() As BadDirectiveSyntax
            Return Syntax.BadDirective(Syntax.Token(SyntaxKind.HashToken))
        End Function

    End Class
End Namespace
