Imports System
Imports System.Collections.Generic
Imports Roslyn.Compilers
Imports Roslyn.Compilers.Common
Imports Roslyn.Compilers.Internal
Imports Roslyn.Compilers.VisualBasic
Imports Roslyn.Services
Imports Roslyn.Services.Formatting

Namespace Roslyn.Services.VisualBasic.Formatting
    Friend Class AutoGeneratedCodeOperationProvider
        Implements IFormattingOperationProvider
        Private ReadOnly factory As IFormattingOperationsFactory
        Private ReadOnly provider As IFormattingOperationProvider

        Public Sub New(factory As IFormattingOperationsFactory, provider As IFormattingOperationProvider)
            Contract.ThrowIfNull(factory)
            Contract.ThrowIfNull(provider)

            Me.factory = factory
            Me.provider = provider
        End Sub

        Public Sub AddSuppressOperations(operations As List(Of ISuppressOperation), node As CommonSyntaxNode) Implements IFormattingOperationProvider.AddSuppressOperations
            ' suppression is to keep user code style. don't do anything
        End Sub

        Public Sub AddAnchorIndentationOperations(operations As List(Of IAnchorIndentationOperation), node As CommonSyntaxNode) Implements IFormattingOperationProvider.AddAnchorIndentationOperations
            ' anchor operation is to preserve user code style. don't do anything
        End Sub

        Public Sub AddIndentBlockOperations(operations As List(Of IIndentBlockOperation), node As CommonSyntaxNode) Implements IFormattingOperationProvider.AddIndentBlockOperations
            Me.provider.AddIndentBlockOperations(operations, node)
        End Sub

        Public Sub AddAlignTokensOperations(operations As List(Of IAlignTokensOperation), node As CommonSyntaxNode) Implements IFormattingOperationProvider.AddAlignTokensOperations
            Me.provider.AddAlignTokensOperations(operations, node)
        End Sub

        Public Function GetAdjustNewLinesOperation(previousToken As CommonSyntaxToken, currentToken As CommonSyntaxToken) As IAdjustNewLinesOperation Implements IFormattingOperationProvider.GetAdjustNewLinesOperation
            ' TODO : for now, do very simple work until VB has compiler syntax formatter that will define forced formatting rule
            Dim operation = Me.provider.GetAdjustNewLinesOperation(previousToken, currentToken)
            If operation Is Nothing Then
                Return Nothing
            End If

            ' if operation is already forced, return as it is
            If operation.Option = AdjustNewLinesOption.ForceLines Then
                Return operation
            End If

            Dim line = Math.Max(LineBreaksAfter(CType(previousToken, SyntaxToken), CType(currentToken, SyntaxToken), operation.Line), operation.Line)
            If line = 0 Then
                Return Me.factory.CreateAdjustNewLinesOperation(0, AdjustNewLinesOption.PreserveLines)
            End If

            Return Me.factory.CreateAdjustNewLinesOperation(line, AdjustNewLinesOption.ForceLines)
        End Function

        Public Function GetAdjustSpacesOperation(previousToken As CommonSyntaxToken, currentToken As CommonSyntaxToken) As IAdjustSpacesOperation Implements IFormattingOperationProvider.GetAdjustSpacesOperation
            ' TODO : for now, do nothing special
            Return Me.provider.GetAdjustSpacesOperation(previousToken, currentToken)
        End Function

        Private Function LineBreaksAfter(previousToken As SyntaxToken, currentToken As SyntaxToken, defaultLines As Integer) As Integer
            If currentToken.Kind = SyntaxKind.None OrElse
               previousToken.Kind = SyntaxKind.None Then
                Return 0
            End If

            If previousToken.Kind = SyntaxKind.StatementTerminatorToken AndAlso
               FormattingHelpers.IsLastTokenOfEndBlockStatement(previousToken.GetPreviousToken(SyntaxToken.Any)) AndAlso
               FormattingHelpers.IsFirstTokenOfMethodBase(currentToken) Then
                Return 2
            End If

            Return defaultLines
        End Function
    End Class
End Namespace